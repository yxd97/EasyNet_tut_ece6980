// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ip_handler_top_detect_eth_protocol_512_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        s_axis_raw_internal_dout,
        s_axis_raw_internal_num_data_valid,
        s_axis_raw_internal_fifo_cap,
        s_axis_raw_internal_empty_n,
        s_axis_raw_internal_read,
        ethDataFifo_din,
        ethDataFifo_num_data_valid,
        ethDataFifo_fifo_cap,
        ethDataFifo_full_n,
        ethDataFifo_write,
        etherTypeFifo_din,
        etherTypeFifo_num_data_valid,
        etherTypeFifo_fifo_cap,
        etherTypeFifo_full_n,
        etherTypeFifo_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [1023:0] s_axis_raw_internal_dout;
input  [1:0] s_axis_raw_internal_num_data_valid;
input  [1:0] s_axis_raw_internal_fifo_cap;
input   s_axis_raw_internal_empty_n;
output   s_axis_raw_internal_read;
output  [1023:0] ethDataFifo_din;
input  [2:0] ethDataFifo_num_data_valid;
input  [2:0] ethDataFifo_fifo_cap;
input   ethDataFifo_full_n;
output   ethDataFifo_write;
output  [15:0] etherTypeFifo_din;
input  [1:0] etherTypeFifo_num_data_valid;
input  [1:0] etherTypeFifo_fifo_cap;
input   etherTypeFifo_full_n;
output   etherTypeFifo_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg s_axis_raw_internal_read;
reg ethDataFifo_write;
reg etherTypeFifo_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] tmp_i_nbreadreq_fu_82_p3;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] tmp_i_reg_357;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] tmp_i_reg_357_pp0_iter1_reg;
reg   [0:0] metaWritten_1_load_reg_389;
reg    ap_predicate_op66_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] header_ready_1;
reg   [15:0] header_idx_1;
reg   [111:0] header_header_V_1;
reg   [0:0] metaWritten_1;
reg    s_axis_raw_internal_blk_n;
wire    ap_block_pp0_stage0;
reg    etherTypeFifo_blk_n;
reg    ethDataFifo_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [1023:0] s_axis_raw_internal_read_reg_361;
reg   [0:0] tmp_last_V_reg_368;
wire   [111:0] p_Result_s_fu_272_p2;
wire   [0:0] header_ready_1_load_load_fu_159_p1;
wire   [0:0] metaWritten_1_load_load_fu_284_p1;
reg   [0:0] ap_phi_mux_header_ready_1_flag_0_i_phi_fu_113_p4;
wire   [0:0] ap_phi_reg_pp0_iter1_header_ready_1_flag_0_i_reg_110;
reg   [15:0] ap_phi_mux_header_idx_1_new_0_i_phi_fu_124_p4;
wire   [15:0] add_ln67_fu_182_p2;
wire   [15:0] ap_phi_reg_pp0_iter1_header_idx_1_new_0_i_reg_121;
reg   [0:0] ap_phi_mux_metaWritten_1_flag_0_i_phi_fu_134_p4;
wire   [0:0] ap_phi_reg_pp0_iter1_metaWritten_1_flag_0_i_reg_131;
wire   [111:0] ap_phi_reg_pp0_iter0_p_Val2_8_reg_142;
reg   [111:0] ap_phi_reg_pp0_iter1_p_Val2_8_reg_142;
reg   [111:0] ap_phi_reg_pp0_iter2_p_Val2_8_reg_142;
wire   [0:0] xor_ln62_fu_293_p2;
wire   [0:0] or_ln62_fu_288_p2;
wire   [15:0] select_ln62_fu_298_p3;
wire   [0:0] or_ln62_1_fu_305_p2;
reg    ap_block_pp0_stage0_01001;
wire   [24:0] shl_ln_fu_171_p3;
wire   [0:0] trunc_ln414_fu_195_p1;
wire   [0:0] icmp_ln414_fu_189_p2;
wire   [111:0] st_fu_198_p3;
wire   [111:0] tmp_75_fu_179_p1;
wire   [111:0] select_ln414_fu_206_p3;
reg   [111:0] tmp_fu_214_p4;
wire   [111:0] select_ln414_5_fu_232_p3;
wire   [111:0] select_ln414_6_fu_240_p3;
wire   [111:0] or_ln414_fu_248_p2;
wire   [111:0] select_ln414_4_fu_224_p3;
wire   [111:0] xor_ln414_fu_254_p2;
wire   [111:0] and_ln414_fu_260_p2;
wire   [111:0] and_ln414_2_fu_266_p2;
wire   [7:0] tmp_101_i_fu_338_p4;
wire   [7:0] tmp_i_60_fu_328_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_143;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 header_ready_1 = 1'd0;
#0 header_idx_1 = 16'd0;
#0 header_header_V_1 = 112'd0;
#0 metaWritten_1 = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_143)) begin
        if (((tmp_i_reg_357 == 1'd1) & (header_ready_1_load_load_fu_159_p1 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_p_Val2_8_reg_142 <= p_Result_s_fu_272_p2;
        end else if (((tmp_i_reg_357 == 1'd1) & (header_ready_1_load_load_fu_159_p1 == 1'd1))) begin
            ap_phi_reg_pp0_iter2_p_Val2_8_reg_142 <= header_header_V_1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_p_Val2_8_reg_142 <= ap_phi_reg_pp0_iter1_p_Val2_8_reg_142;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_Val2_8_reg_142 <= ap_phi_reg_pp0_iter0_p_Val2_8_reg_142;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_reg_357 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (header_ready_1_load_load_fu_159_p1 == 1'd0))) begin
        header_header_V_1 <= p_Result_s_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_reg_357 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln62_fu_288_p2 == 1'd1))) begin
        header_idx_1 <= select_ln62_fu_298_p3;
        header_ready_1 <= xor_ln62_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_reg_357 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln62_1_fu_305_p2 == 1'd1))) begin
        metaWritten_1 <= xor_ln62_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_reg_357 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        metaWritten_1_load_reg_389 <= metaWritten_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_nbreadreq_fu_82_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_raw_internal_read_reg_361 <= s_axis_raw_internal_dout;
        tmp_last_V_reg_368 <= s_axis_raw_internal_dout[1024'd576];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_i_reg_357 <= tmp_i_nbreadreq_fu_82_p3;
        tmp_i_reg_357_pp0_iter1_reg <= tmp_i_reg_357;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_reg_357 == 1'd1) & (header_ready_1_load_load_fu_159_p1 == 1'd0))) begin
        ap_phi_mux_header_idx_1_new_0_i_phi_fu_124_p4 = add_ln67_fu_182_p2;
    end else begin
        ap_phi_mux_header_idx_1_new_0_i_phi_fu_124_p4 = ap_phi_reg_pp0_iter1_header_idx_1_new_0_i_reg_121;
    end
end

always @ (*) begin
    if ((tmp_i_reg_357 == 1'd1)) begin
        if ((header_ready_1_load_load_fu_159_p1 == 1'd0)) begin
            ap_phi_mux_header_ready_1_flag_0_i_phi_fu_113_p4 = 1'd1;
        end else if ((header_ready_1_load_load_fu_159_p1 == 1'd1)) begin
            ap_phi_mux_header_ready_1_flag_0_i_phi_fu_113_p4 = 1'd0;
        end else begin
            ap_phi_mux_header_ready_1_flag_0_i_phi_fu_113_p4 = ap_phi_reg_pp0_iter1_header_ready_1_flag_0_i_reg_110;
        end
    end else begin
        ap_phi_mux_header_ready_1_flag_0_i_phi_fu_113_p4 = ap_phi_reg_pp0_iter1_header_ready_1_flag_0_i_reg_110;
    end
end

always @ (*) begin
    if ((tmp_i_reg_357 == 1'd1)) begin
        if ((metaWritten_1_load_load_fu_284_p1 == 1'd0)) begin
            ap_phi_mux_metaWritten_1_flag_0_i_phi_fu_134_p4 = 1'd1;
        end else if ((metaWritten_1_load_load_fu_284_p1 == 1'd1)) begin
            ap_phi_mux_metaWritten_1_flag_0_i_phi_fu_134_p4 = 1'd0;
        end else begin
            ap_phi_mux_metaWritten_1_flag_0_i_phi_fu_134_p4 = ap_phi_reg_pp0_iter1_metaWritten_1_flag_0_i_reg_131;
        end
    end else begin
        ap_phi_mux_metaWritten_1_flag_0_i_phi_fu_134_p4 = ap_phi_reg_pp0_iter1_metaWritten_1_flag_0_i_reg_131;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_i_reg_357 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ethDataFifo_blk_n = ethDataFifo_full_n;
    end else begin
        ethDataFifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_reg_357 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ethDataFifo_write = 1'b1;
    end else begin
        ethDataFifo_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op66_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        etherTypeFifo_blk_n = etherTypeFifo_full_n;
    end else begin
        etherTypeFifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op66_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        etherTypeFifo_write = 1'b1;
    end else begin
        etherTypeFifo_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (tmp_i_nbreadreq_fu_82_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_raw_internal_blk_n = s_axis_raw_internal_empty_n;
    end else begin
        s_axis_raw_internal_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_nbreadreq_fu_82_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_raw_internal_read = 1'b1;
    end else begin
        s_axis_raw_internal_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln67_fu_182_p2 = (header_idx_1 + 16'd1);

assign and_ln414_2_fu_266_p2 = (xor_ln414_fu_254_p2 & select_ln414_4_fu_224_p3);

assign and_ln414_fu_260_p2 = (or_ln414_fu_248_p2 & header_header_V_1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_predicate_op66_write_state3 == 1'b1) & (etherTypeFifo_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_i_reg_357 == 1'd1) & (ethDataFifo_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_82_p3 == 1'd1) & (s_axis_raw_internal_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_predicate_op66_write_state3 == 1'b1) & (etherTypeFifo_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_i_reg_357 == 1'd1) & (ethDataFifo_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_82_p3 == 1'd1) & (s_axis_raw_internal_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_predicate_op66_write_state3 == 1'b1) & (etherTypeFifo_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((tmp_i_reg_357 == 1'd1) & (ethDataFifo_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_82_p3 == 1'd1) & (s_axis_raw_internal_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_82_p3 == 1'd1) & (s_axis_raw_internal_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((tmp_i_reg_357 == 1'd1) & (ethDataFifo_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op66_write_state3 == 1'b1) & (etherTypeFifo_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_143 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_p_Val2_8_reg_142 = 'bx;

assign ap_phi_reg_pp0_iter1_header_idx_1_new_0_i_reg_121 = 'bx;

assign ap_phi_reg_pp0_iter1_header_ready_1_flag_0_i_reg_110 = 'bx;

assign ap_phi_reg_pp0_iter1_metaWritten_1_flag_0_i_reg_131 = 'bx;

always @ (*) begin
    ap_predicate_op66_write_state3 = ((metaWritten_1_load_reg_389 == 1'd0) & (tmp_i_reg_357_pp0_iter1_reg == 1'd1));
end

assign ethDataFifo_din = s_axis_raw_internal_read_reg_361;

assign etherTypeFifo_din = {{tmp_101_i_fu_338_p4}, {tmp_i_60_fu_328_p4}};

assign header_ready_1_load_load_fu_159_p1 = header_ready_1;

assign icmp_ln414_fu_189_p2 = ((shl_ln_fu_171_p3 > 25'd111) ? 1'b1 : 1'b0);

assign metaWritten_1_load_load_fu_284_p1 = metaWritten_1;

assign or_ln414_fu_248_p2 = (select_ln414_6_fu_240_p3 | select_ln414_5_fu_232_p3);

assign or_ln62_1_fu_305_p2 = (tmp_last_V_reg_368 | ap_phi_mux_metaWritten_1_flag_0_i_phi_fu_134_p4);

assign or_ln62_fu_288_p2 = (tmp_last_V_reg_368 | ap_phi_mux_header_ready_1_flag_0_i_phi_fu_113_p4);

assign p_Result_s_fu_272_p2 = (and_ln414_fu_260_p2 | and_ln414_2_fu_266_p2);

assign select_ln414_4_fu_224_p3 = ((icmp_ln414_fu_189_p2[0:0] == 1'b1) ? tmp_fu_214_p4 : tmp_75_fu_179_p1);

assign select_ln414_5_fu_232_p3 = ((icmp_ln414_fu_189_p2[0:0] == 1'b1) ? 112'd2596148429267413814265248164610047 : 112'd0);

assign select_ln414_6_fu_240_p3 = ((icmp_ln414_fu_189_p2[0:0] == 1'b1) ? 112'd5192296858534827628530496329220094 : 112'd0);

assign select_ln414_fu_206_p3 = ((icmp_ln414_fu_189_p2[0:0] == 1'b1) ? st_fu_198_p3 : tmp_75_fu_179_p1);

assign select_ln62_fu_298_p3 = ((tmp_last_V_reg_368[0:0] == 1'b1) ? 16'd0 : ap_phi_mux_header_idx_1_new_0_i_phi_fu_124_p4);

assign shl_ln_fu_171_p3 = {{header_idx_1}, {9'd0}};

assign st_fu_198_p3 = {{trunc_ln414_fu_195_p1}, {111'd0}};

assign tmp_101_i_fu_338_p4 = {{ap_phi_reg_pp0_iter2_p_Val2_8_reg_142[103:96]}};

assign tmp_75_fu_179_p1 = s_axis_raw_internal_read_reg_361[111:0];

integer ap_tvar_int_0;

always @ (select_ln414_fu_206_p3) begin
    for (ap_tvar_int_0 = 112 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 111 - 0) begin
            tmp_fu_214_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_fu_214_p4[ap_tvar_int_0] = select_ln414_fu_206_p3[111 - ap_tvar_int_0];
        end
    end
end

assign tmp_i_60_fu_328_p4 = {{ap_phi_reg_pp0_iter2_p_Val2_8_reg_142[111:104]}};

assign tmp_i_nbreadreq_fu_82_p3 = s_axis_raw_internal_empty_n;

assign trunc_ln414_fu_195_p1 = s_axis_raw_internal_read_reg_361[0:0];

assign xor_ln414_fu_254_p2 = (or_ln414_fu_248_p2 ^ 112'd5192296858534827628530496329220095);

assign xor_ln62_fu_293_p2 = (tmp_last_V_reg_368 ^ 1'd1);

endmodule //ip_handler_top_detect_eth_protocol_512_s
