// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ip_handler_top_route_by_eth_protocol_512_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        etherTypeFifo_dout,
        etherTypeFifo_num_data_valid,
        etherTypeFifo_fifo_cap,
        etherTypeFifo_empty_n,
        etherTypeFifo_read,
        ethDataFifo_dout,
        ethDataFifo_num_data_valid,
        ethDataFifo_fifo_cap,
        ethDataFifo_empty_n,
        ethDataFifo_read,
        ipv6ShiftFifo_din,
        ipv6ShiftFifo_num_data_valid,
        ipv6ShiftFifo_fifo_cap,
        ipv6ShiftFifo_full_n,
        ipv6ShiftFifo_write,
        ipv4ShiftFifo_din,
        ipv4ShiftFifo_num_data_valid,
        ipv4ShiftFifo_fifo_cap,
        ipv4ShiftFifo_full_n,
        ipv4ShiftFifo_write,
        m_axis_arp_internal_din,
        m_axis_arp_internal_num_data_valid,
        m_axis_arp_internal_fifo_cap,
        m_axis_arp_internal_full_n,
        m_axis_arp_internal_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] etherTypeFifo_dout;
input  [1:0] etherTypeFifo_num_data_valid;
input  [1:0] etherTypeFifo_fifo_cap;
input   etherTypeFifo_empty_n;
output   etherTypeFifo_read;
input  [1023:0] ethDataFifo_dout;
input  [2:0] ethDataFifo_num_data_valid;
input  [2:0] ethDataFifo_fifo_cap;
input   ethDataFifo_empty_n;
output   ethDataFifo_read;
output  [1023:0] ipv6ShiftFifo_din;
input  [1:0] ipv6ShiftFifo_num_data_valid;
input  [1:0] ipv6ShiftFifo_fifo_cap;
input   ipv6ShiftFifo_full_n;
output   ipv6ShiftFifo_write;
output  [1023:0] ipv4ShiftFifo_din;
input  [1:0] ipv4ShiftFifo_num_data_valid;
input  [1:0] ipv4ShiftFifo_fifo_cap;
input   ipv4ShiftFifo_full_n;
output   ipv4ShiftFifo_write;
output  [1023:0] m_axis_arp_internal_din;
input  [1:0] m_axis_arp_internal_num_data_valid;
input  [1:0] m_axis_arp_internal_fifo_cap;
input   m_axis_arp_internal_full_n;
output   m_axis_arp_internal_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg etherTypeFifo_read;
reg ethDataFifo_read;
reg ipv6ShiftFifo_write;
reg ipv4ShiftFifo_write;
reg m_axis_arp_internal_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [0:0] tmp_1_i_nbreadreq_fu_52_p3;
wire   [0:0] grp_nbreadreq_fu_60_p3;
reg    ap_predicate_op30_read_state1;
reg    ap_predicate_op32_read_state1;
reg    ap_predicate_op44_read_state1;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] rep_fsmState_V_load_reg_142;
reg   [0:0] tmp_1_i_reg_146;
reg   [0:0] tmp_3_i_reg_150;
reg   [15:0] tmp_reg_154;
reg    ap_predicate_op55_write_state2;
reg    ap_predicate_op57_write_state2;
reg    ap_predicate_op59_write_state2;
reg   [0:0] tmp_i_reg_161;
reg   [15:0] rep_etherType_V_load_reg_168;
reg    ap_predicate_op61_write_state2;
reg    ap_predicate_op63_write_state2;
reg    ap_predicate_op65_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] rep_fsmState_V;
reg   [15:0] rep_etherType_V;
reg    etherTypeFifo_blk_n;
wire    ap_block_pp0_stage0;
reg    ethDataFifo_blk_n;
reg    m_axis_arp_internal_blk_n;
reg    ipv4ShiftFifo_blk_n;
reg    ipv6ShiftFifo_blk_n;
reg   [1023:0] reg_109;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] grp_fu_101_p3;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_274;
reg    ap_condition_273;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 rep_fsmState_V = 1'd0;
#0 rep_etherType_V = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_273)) begin
        if (((rep_fsmState_V == 1'd1) & (grp_fu_101_p3 == 1'd1))) begin
            rep_fsmState_V <= 1'd0;
        end else if ((1'b1 == ap_condition_274)) begin
            rep_fsmState_V <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_predicate_op44_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_predicate_op32_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_109 <= ethDataFifo_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_60_p3 == 1'd1) & (tmp_1_i_nbreadreq_fu_52_p3 == 1'd1) & (rep_fsmState_V == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        rep_etherType_V <= etherTypeFifo_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_nbreadreq_fu_60_p3 == 1'd1) & (rep_fsmState_V == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        rep_etherType_V_load_reg_168 <= rep_etherType_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        rep_fsmState_V_load_reg_142 <= rep_fsmState_V;
    end
end

always @ (posedge ap_clk) begin
    if (((rep_fsmState_V == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1_i_reg_146 <= tmp_1_i_nbreadreq_fu_52_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_i_nbreadreq_fu_52_p3 == 1'd1) & (rep_fsmState_V == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_3_i_reg_150 <= grp_nbreadreq_fu_60_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((rep_fsmState_V == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_i_reg_161 <= grp_nbreadreq_fu_60_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op30_read_state1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_154 <= etherTypeFifo_dout;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_done_reg == 1'b0) & (ap_predicate_op44_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_done_reg == 1'b0) & (ap_predicate_op32_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        ethDataFifo_blk_n = ethDataFifo_empty_n;
    end else begin
        ethDataFifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_predicate_op44_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_predicate_op32_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        ethDataFifo_read = 1'b1;
    end else begin
        ethDataFifo_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b0) & (ap_predicate_op30_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        etherTypeFifo_blk_n = etherTypeFifo_empty_n;
    end else begin
        etherTypeFifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op30_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        etherTypeFifo_read = 1'b1;
    end else begin
        etherTypeFifo_read = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op63_write_state2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op57_write_state2 == 1'b1)))) begin
        ipv4ShiftFifo_blk_n = ipv4ShiftFifo_full_n;
    end else begin
        ipv4ShiftFifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op63_write_state2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op57_write_state2 == 1'b1)))) begin
        ipv4ShiftFifo_write = 1'b1;
    end else begin
        ipv4ShiftFifo_write = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op55_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op61_write_state2 == 1'b1)))) begin
        ipv6ShiftFifo_blk_n = ipv6ShiftFifo_full_n;
    end else begin
        ipv6ShiftFifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_predicate_op55_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op61_write_state2 == 1'b1)))) begin
        ipv6ShiftFifo_write = 1'b1;
    end else begin
        ipv6ShiftFifo_write = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op65_write_state2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op59_write_state2 == 1'b1)))) begin
        m_axis_arp_internal_blk_n = m_axis_arp_internal_full_n;
    end else begin
        m_axis_arp_internal_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op65_write_state2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op59_write_state2 == 1'b1)))) begin
        m_axis_arp_internal_write = 1'b1;
    end else begin
        m_axis_arp_internal_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((ap_predicate_op44_read_state1 == 1'b1) & (ethDataFifo_empty_n == 1'b0)) | ((ap_predicate_op32_read_state1 == 1'b1) & (ethDataFifo_empty_n == 1'b0)) | ((ap_predicate_op30_read_state1 == 1'b1) & (etherTypeFifo_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op55_write_state2 == 1'b1) & (ipv6ShiftFifo_full_n == 1'b0)) | ((ipv6ShiftFifo_full_n == 1'b0) & (ap_predicate_op61_write_state2 == 1'b1)) | ((ap_predicate_op65_write_state2 == 1'b1) & (m_axis_arp_internal_full_n == 1'b0)) | ((ap_predicate_op59_write_state2 == 1'b1) & (m_axis_arp_internal_full_n == 1'b0)) | ((ipv4ShiftFifo_full_n == 1'b0) & (ap_predicate_op63_write_state2 == 1'b1)) | ((ipv4ShiftFifo_full_n == 1'b0) & (ap_predicate_op57_write_state2 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((ap_predicate_op44_read_state1 == 1'b1) & (ethDataFifo_empty_n == 1'b0)) | ((ap_predicate_op32_read_state1 == 1'b1) & (ethDataFifo_empty_n == 1'b0)) | ((ap_predicate_op30_read_state1 == 1'b1) & (etherTypeFifo_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op55_write_state2 == 1'b1) & (ipv6ShiftFifo_full_n == 1'b0)) | ((ipv6ShiftFifo_full_n == 1'b0) & (ap_predicate_op61_write_state2 == 1'b1)) | ((ap_predicate_op65_write_state2 == 1'b1) & (m_axis_arp_internal_full_n == 1'b0)) | ((ap_predicate_op59_write_state2 == 1'b1) & (m_axis_arp_internal_full_n == 1'b0)) | ((ipv4ShiftFifo_full_n == 1'b0) & (ap_predicate_op63_write_state2 == 1'b1)) | ((ipv4ShiftFifo_full_n == 1'b0) & (ap_predicate_op57_write_state2 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((ap_predicate_op44_read_state1 == 1'b1) & (ethDataFifo_empty_n == 1'b0)) | ((ap_predicate_op32_read_state1 == 1'b1) & (ethDataFifo_empty_n == 1'b0)) | ((ap_predicate_op30_read_state1 == 1'b1) & (etherTypeFifo_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op55_write_state2 == 1'b1) & (ipv6ShiftFifo_full_n == 1'b0)) | ((ipv6ShiftFifo_full_n == 1'b0) & (ap_predicate_op61_write_state2 == 1'b1)) | ((ap_predicate_op65_write_state2 == 1'b1) & (m_axis_arp_internal_full_n == 1'b0)) | ((ap_predicate_op59_write_state2 == 1'b1) & (m_axis_arp_internal_full_n == 1'b0)) | ((ipv4ShiftFifo_full_n == 1'b0) & (ap_predicate_op63_write_state2 == 1'b1)) | ((ipv4ShiftFifo_full_n == 1'b0) & (ap_predicate_op57_write_state2 == 1'b1)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((ap_predicate_op44_read_state1 == 1'b1) & (ethDataFifo_empty_n == 1'b0)) | ((ap_predicate_op32_read_state1 == 1'b1) & (ethDataFifo_empty_n == 1'b0)) | ((ap_predicate_op30_read_state1 == 1'b1) & (etherTypeFifo_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((ap_predicate_op55_write_state2 == 1'b1) & (ipv6ShiftFifo_full_n == 1'b0)) | ((ipv6ShiftFifo_full_n == 1'b0) & (ap_predicate_op61_write_state2 == 1'b1)) | ((ap_predicate_op65_write_state2 == 1'b1) & (m_axis_arp_internal_full_n == 1'b0)) | ((ap_predicate_op59_write_state2 == 1'b1) & (m_axis_arp_internal_full_n == 1'b0)) | ((ipv4ShiftFifo_full_n == 1'b0) & (ap_predicate_op63_write_state2 == 1'b1)) | ((ipv4ShiftFifo_full_n == 1'b0) & (ap_predicate_op57_write_state2 == 1'b1)));
end

always @ (*) begin
    ap_condition_273 = ((grp_nbreadreq_fu_60_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_274 = ((tmp_1_i_nbreadreq_fu_52_p3 == 1'd1) & (rep_fsmState_V == 1'd0) & (grp_fu_101_p3 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op30_read_state1 = ((grp_nbreadreq_fu_60_p3 == 1'd1) & (tmp_1_i_nbreadreq_fu_52_p3 == 1'd1) & (rep_fsmState_V == 1'd0));
end

always @ (*) begin
    ap_predicate_op32_read_state1 = ((grp_nbreadreq_fu_60_p3 == 1'd1) & (tmp_1_i_nbreadreq_fu_52_p3 == 1'd1) & (rep_fsmState_V == 1'd0));
end

always @ (*) begin
    ap_predicate_op44_read_state1 = ((grp_nbreadreq_fu_60_p3 == 1'd1) & (rep_fsmState_V == 1'd1));
end

always @ (*) begin
    ap_predicate_op55_write_state2 = ((tmp_reg_154 == 16'd34525) & (tmp_3_i_reg_150 == 1'd1) & (tmp_1_i_reg_146 == 1'd1) & (rep_fsmState_V_load_reg_142 == 1'd0));
end

always @ (*) begin
    ap_predicate_op57_write_state2 = ((tmp_reg_154 == 16'd2048) & (tmp_3_i_reg_150 == 1'd1) & (tmp_1_i_reg_146 == 1'd1) & (rep_fsmState_V_load_reg_142 == 1'd0));
end

always @ (*) begin
    ap_predicate_op59_write_state2 = ((tmp_reg_154 == 16'd2054) & (tmp_3_i_reg_150 == 1'd1) & (tmp_1_i_reg_146 == 1'd1) & (rep_fsmState_V_load_reg_142 == 1'd0));
end

always @ (*) begin
    ap_predicate_op61_write_state2 = ((rep_fsmState_V_load_reg_142 == 1'd1) & (rep_etherType_V_load_reg_168 == 16'd34525) & (tmp_i_reg_161 == 1'd1));
end

always @ (*) begin
    ap_predicate_op63_write_state2 = ((rep_fsmState_V_load_reg_142 == 1'd1) & (rep_etherType_V_load_reg_168 == 16'd2048) & (tmp_i_reg_161 == 1'd1));
end

always @ (*) begin
    ap_predicate_op65_write_state2 = ((rep_fsmState_V_load_reg_142 == 1'd1) & (rep_etherType_V_load_reg_168 == 16'd2054) & (tmp_i_reg_161 == 1'd1));
end

assign grp_fu_101_p3 = ethDataFifo_dout[1024'd576];

assign grp_nbreadreq_fu_60_p3 = ethDataFifo_empty_n;

assign ipv4ShiftFifo_din = reg_109;

assign ipv6ShiftFifo_din = reg_109;

assign m_axis_arp_internal_din = reg_109;

assign tmp_1_i_nbreadreq_fu_52_p3 = etherTypeFifo_empty_n;

endmodule //ip_handler_top_route_by_eth_protocol_512_s
