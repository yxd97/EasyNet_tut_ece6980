-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ip_handler_top_extract_ip_meta_512_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    myIpAddress_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    myIpAddress_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    myIpAddress_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    myIpAddress_empty_n : IN STD_LOGIC;
    myIpAddress_read : OUT STD_LOGIC;
    ipDataFifo_dout : IN STD_LOGIC_VECTOR (576 downto 0);
    ipDataFifo_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    ipDataFifo_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    ipDataFifo_empty_n : IN STD_LOGIC;
    ipDataFifo_read : OUT STD_LOGIC;
    ipDataMetaFifo_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
    ipDataMetaFifo_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    ipDataMetaFifo_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    ipDataMetaFifo_full_n : IN STD_LOGIC;
    ipDataMetaFifo_write : OUT STD_LOGIC;
    validIpAddressFifo_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    validIpAddressFifo_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    validIpAddressFifo_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    validIpAddressFifo_full_n : IN STD_LOGIC;
    validIpAddressFifo_write : OUT STD_LOGIC;
    ipv4ProtocolFifo_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    ipv4ProtocolFifo_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    ipv4ProtocolFifo_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    ipv4ProtocolFifo_full_n : IN STD_LOGIC;
    ipv4ProtocolFifo_write : OUT STD_LOGIC );
end;


architecture behav of ip_handler_top_extract_ip_meta_512_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv25_9F : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010011111";
    constant ap_const_lv159_lc_2 : STD_LOGIC_VECTOR (158 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv160_lc_4 : STD_LOGIC_VECTOR (159 downto 0) := "0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv160_lc_2 : STD_LOGIC_VECTOR (159 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv160_lc_5 : STD_LOGIC_VECTOR (159 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110";
    constant ap_const_lv160_lc_6 : STD_LOGIC_VECTOR (159 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal tmp_i_nbreadreq_fu_106_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal tmp_i_reg_413 : STD_LOGIC_VECTOR (0 downto 0);
    signal header_ready_load_reg_422 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op68_write_state2 : BOOLEAN;
    signal ap_predicate_op69_write_state2 : BOOLEAN;
    signal metaWritten_load_reg_436 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op75_write_state2 : BOOLEAN;
    signal ap_predicate_op77_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal header_ready : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal header_idx : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal header_header_V : STD_LOGIC_VECTOR (159 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000101";
    signal metaWritten : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal myIpAddress_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ipDataFifo_blk_n : STD_LOGIC;
    signal ipDataMetaFifo_blk_n : STD_LOGIC;
    signal validIpAddressFifo_blk_n : STD_LOGIC;
    signal ipv4ProtocolFifo_blk_n : STD_LOGIC;
    signal myIpAddress_read_reg_408 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ipDataFifo_read_reg_417 : STD_LOGIC_VECTOR (576 downto 0);
    signal header_ready_load_load_fu_190_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_305_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal metaWritten_load_load_fu_317_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_header_ready_flag_0_i_phi_fu_144_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_header_ready_flag_0_i_reg_141 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_header_idx_new_0_i_phi_fu_155_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_fu_214_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_header_idx_new_0_i_reg_152 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_metaWritten_flag_0_i_phi_fu_165_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_metaWritten_flag_0_i_reg_162 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_p_Val2_7_reg_173 : STD_LOGIC_VECTOR (159 downto 0);
    signal ap_phi_reg_pp0_iter1_p_Val2_7_reg_173 : STD_LOGIC_VECTOR (159 downto 0);
    signal xor_ln162_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln162_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln162_fu_333_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln162_1_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln_fu_202_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln414_fu_227_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal st_fu_231_p3 : STD_LOGIC_VECTOR (159 downto 0);
    signal tmp_72_fu_210_p1 : STD_LOGIC_VECTOR (159 downto 0);
    signal select_ln414_fu_239_p3 : STD_LOGIC_VECTOR (159 downto 0);
    signal tmp_fu_247_p4 : STD_LOGIC_VECTOR (159 downto 0);
    signal select_ln414_2_fu_265_p3 : STD_LOGIC_VECTOR (159 downto 0);
    signal select_ln414_3_fu_273_p3 : STD_LOGIC_VECTOR (159 downto 0);
    signal or_ln414_fu_281_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal select_ln414_1_fu_257_p3 : STD_LOGIC_VECTOR (159 downto 0);
    signal xor_ln414_fu_287_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal and_ln414_fu_293_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal and_ln414_1_fu_299_p2 : STD_LOGIC_VECTOR (159 downto 0);
    signal tmp_last_V_fu_182_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal dstIpAddress_V_fu_369_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1065_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_1_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_168 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_p_Val2_7_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_168)) then
                if (((tmp_i_nbreadreq_fu_106_p3 = ap_const_lv1_1) and (header_ready_load_load_fu_190_p1 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_p_Val2_7_reg_173 <= p_Result_s_fu_305_p2;
                elsif (((tmp_i_nbreadreq_fu_106_p3 = ap_const_lv1_1) and (header_ready_load_load_fu_190_p1 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_p_Val2_7_reg_173 <= header_header_V;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_p_Val2_7_reg_173 <= ap_phi_reg_pp0_iter0_p_Val2_7_reg_173;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_nbreadreq_fu_106_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (header_ready_load_load_fu_190_p1 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                header_header_V <= p_Result_s_fu_305_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_nbreadreq_fu_106_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln162_fu_321_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                header_idx <= select_ln162_fu_333_p3;
                header_ready <= xor_ln162_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_nbreadreq_fu_106_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                header_ready_load_reg_422 <= header_ready;
                ipDataFifo_read_reg_417 <= ipDataFifo_dout;
                metaWritten_load_reg_436 <= metaWritten;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_nbreadreq_fu_106_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln162_1_fu_341_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                metaWritten <= xor_ln162_fu_327_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                myIpAddress_read_reg_408 <= myIpAddress_dout;
                tmp_i_reg_413 <= tmp_i_nbreadreq_fu_106_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln67_fu_214_p2 <= std_logic_vector(unsigned(header_idx) + unsigned(ap_const_lv16_1));
    and_ln414_1_fu_299_p2 <= (xor_ln414_fu_287_p2 and select_ln414_1_fu_257_p3);
    and_ln414_fu_293_p2 <= (or_ln414_fu_281_p2 and header_header_V);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, myIpAddress_empty_n, ipDataFifo_empty_n, tmp_i_nbreadreq_fu_106_p3, ap_done_reg, ipDataMetaFifo_full_n, ap_predicate_op68_write_state2, ap_predicate_op69_write_state2, validIpAddressFifo_full_n, ap_predicate_op75_write_state2, ipv4ProtocolFifo_full_n, ap_predicate_op77_write_state2)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or (myIpAddress_empty_n = ap_const_logic_0) or ((tmp_i_nbreadreq_fu_106_p3 = ap_const_lv1_1) and (ipDataFifo_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op77_write_state2 = ap_const_boolean_1) and (ipv4ProtocolFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op75_write_state2 = ap_const_boolean_1) and (validIpAddressFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op69_write_state2 = ap_const_boolean_1) and (ipDataMetaFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op68_write_state2 = ap_const_boolean_1) and (ipDataMetaFifo_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, myIpAddress_empty_n, ipDataFifo_empty_n, tmp_i_nbreadreq_fu_106_p3, ap_done_reg, ipDataMetaFifo_full_n, ap_predicate_op68_write_state2, ap_predicate_op69_write_state2, validIpAddressFifo_full_n, ap_predicate_op75_write_state2, ipv4ProtocolFifo_full_n, ap_predicate_op77_write_state2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or (myIpAddress_empty_n = ap_const_logic_0) or ((tmp_i_nbreadreq_fu_106_p3 = ap_const_lv1_1) and (ipDataFifo_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op77_write_state2 = ap_const_boolean_1) and (ipv4ProtocolFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op75_write_state2 = ap_const_boolean_1) and (validIpAddressFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op69_write_state2 = ap_const_boolean_1) and (ipDataMetaFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op68_write_state2 = ap_const_boolean_1) and (ipDataMetaFifo_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, myIpAddress_empty_n, ipDataFifo_empty_n, tmp_i_nbreadreq_fu_106_p3, ap_done_reg, ipDataMetaFifo_full_n, ap_predicate_op68_write_state2, ap_predicate_op69_write_state2, validIpAddressFifo_full_n, ap_predicate_op75_write_state2, ipv4ProtocolFifo_full_n, ap_predicate_op77_write_state2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or (myIpAddress_empty_n = ap_const_logic_0) or ((tmp_i_nbreadreq_fu_106_p3 = ap_const_lv1_1) and (ipDataFifo_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op77_write_state2 = ap_const_boolean_1) and (ipv4ProtocolFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op75_write_state2 = ap_const_boolean_1) and (validIpAddressFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op69_write_state2 = ap_const_boolean_1) and (ipDataMetaFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op68_write_state2 = ap_const_boolean_1) and (ipDataMetaFifo_full_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(myIpAddress_empty_n, ipDataFifo_empty_n, tmp_i_nbreadreq_fu_106_p3, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or (myIpAddress_empty_n = ap_const_logic_0) or ((tmp_i_nbreadreq_fu_106_p3 = ap_const_lv1_1) and (ipDataFifo_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(ipDataMetaFifo_full_n, ap_predicate_op68_write_state2, ap_predicate_op69_write_state2, validIpAddressFifo_full_n, ap_predicate_op75_write_state2, ipv4ProtocolFifo_full_n, ap_predicate_op77_write_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((ap_predicate_op77_write_state2 = ap_const_boolean_1) and (ipv4ProtocolFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op75_write_state2 = ap_const_boolean_1) and (validIpAddressFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op69_write_state2 = ap_const_boolean_1) and (ipDataMetaFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op68_write_state2 = ap_const_boolean_1) and (ipDataMetaFifo_full_n = ap_const_logic_0)));
    end process;


    ap_condition_168_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_168 <= ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_header_idx_new_0_i_phi_fu_155_p4_assign_proc : process(tmp_i_nbreadreq_fu_106_p3, header_ready_load_load_fu_190_p1, add_ln67_fu_214_p2, ap_phi_reg_pp0_iter0_header_idx_new_0_i_reg_152)
    begin
        if (((tmp_i_nbreadreq_fu_106_p3 = ap_const_lv1_1) and (header_ready_load_load_fu_190_p1 = ap_const_lv1_0))) then 
            ap_phi_mux_header_idx_new_0_i_phi_fu_155_p4 <= add_ln67_fu_214_p2;
        else 
            ap_phi_mux_header_idx_new_0_i_phi_fu_155_p4 <= ap_phi_reg_pp0_iter0_header_idx_new_0_i_reg_152;
        end if; 
    end process;


    ap_phi_mux_header_ready_flag_0_i_phi_fu_144_p4_assign_proc : process(tmp_i_nbreadreq_fu_106_p3, header_ready_load_load_fu_190_p1, ap_phi_reg_pp0_iter0_header_ready_flag_0_i_reg_141)
    begin
        if ((tmp_i_nbreadreq_fu_106_p3 = ap_const_lv1_1)) then
            if ((header_ready_load_load_fu_190_p1 = ap_const_lv1_0)) then 
                ap_phi_mux_header_ready_flag_0_i_phi_fu_144_p4 <= ap_const_lv1_1;
            elsif ((header_ready_load_load_fu_190_p1 = ap_const_lv1_1)) then 
                ap_phi_mux_header_ready_flag_0_i_phi_fu_144_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_header_ready_flag_0_i_phi_fu_144_p4 <= ap_phi_reg_pp0_iter0_header_ready_flag_0_i_reg_141;
            end if;
        else 
            ap_phi_mux_header_ready_flag_0_i_phi_fu_144_p4 <= ap_phi_reg_pp0_iter0_header_ready_flag_0_i_reg_141;
        end if; 
    end process;


    ap_phi_mux_metaWritten_flag_0_i_phi_fu_165_p4_assign_proc : process(tmp_i_nbreadreq_fu_106_p3, metaWritten_load_load_fu_317_p1, ap_phi_reg_pp0_iter0_metaWritten_flag_0_i_reg_162)
    begin
        if ((tmp_i_nbreadreq_fu_106_p3 = ap_const_lv1_1)) then
            if ((metaWritten_load_load_fu_317_p1 = ap_const_lv1_0)) then 
                ap_phi_mux_metaWritten_flag_0_i_phi_fu_165_p4 <= ap_const_lv1_1;
            elsif ((metaWritten_load_load_fu_317_p1 = ap_const_lv1_1)) then 
                ap_phi_mux_metaWritten_flag_0_i_phi_fu_165_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_metaWritten_flag_0_i_phi_fu_165_p4 <= ap_phi_reg_pp0_iter0_metaWritten_flag_0_i_reg_162;
            end if;
        else 
            ap_phi_mux_metaWritten_flag_0_i_phi_fu_165_p4 <= ap_phi_reg_pp0_iter0_metaWritten_flag_0_i_reg_162;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_header_idx_new_0_i_reg_152 <= "XXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_header_ready_flag_0_i_reg_141 <= "X";
    ap_phi_reg_pp0_iter0_metaWritten_flag_0_i_reg_162 <= "X";
    ap_phi_reg_pp0_iter0_p_Val2_7_reg_173 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op68_write_state2_assign_proc : process(tmp_i_reg_413, header_ready_load_reg_422)
    begin
                ap_predicate_op68_write_state2 <= ((header_ready_load_reg_422 = ap_const_lv1_0) and (tmp_i_reg_413 = ap_const_lv1_1));
    end process;


    ap_predicate_op69_write_state2_assign_proc : process(tmp_i_reg_413, header_ready_load_reg_422)
    begin
                ap_predicate_op69_write_state2 <= ((header_ready_load_reg_422 = ap_const_lv1_1) and (tmp_i_reg_413 = ap_const_lv1_1));
    end process;


    ap_predicate_op75_write_state2_assign_proc : process(tmp_i_reg_413, metaWritten_load_reg_436)
    begin
                ap_predicate_op75_write_state2 <= ((metaWritten_load_reg_436 = ap_const_lv1_0) and (tmp_i_reg_413 = ap_const_lv1_1));
    end process;


    ap_predicate_op77_write_state2_assign_proc : process(tmp_i_reg_413, metaWritten_load_reg_436)
    begin
                ap_predicate_op77_write_state2 <= ((metaWritten_load_reg_436 = ap_const_lv1_0) and (tmp_i_reg_413 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    dstIpAddress_V_fu_369_p4 <= ap_phi_reg_pp0_iter1_p_Val2_7_reg_173(159 downto 128);
    header_ready_load_load_fu_190_p1 <= header_ready;
    icmp_ln1065_1_fu_384_p2 <= "1" when (dstIpAddress_V_fu_369_p4 = ap_const_lv32_FFFFFFFF) else "0";
    icmp_ln1065_fu_379_p2 <= "1" when (dstIpAddress_V_fu_369_p4 = myIpAddress_read_reg_408) else "0";
    icmp_ln414_fu_221_p2 <= "1" when (unsigned(shl_ln_fu_202_p3) > unsigned(ap_const_lv25_9F)) else "0";

    ipDataFifo_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ipDataFifo_empty_n, tmp_i_nbreadreq_fu_106_p3, ap_done_reg, ap_block_pp0_stage0)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (tmp_i_nbreadreq_fu_106_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ipDataFifo_blk_n <= ipDataFifo_empty_n;
        else 
            ipDataFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ipDataFifo_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, tmp_i_nbreadreq_fu_106_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_i_nbreadreq_fu_106_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ipDataFifo_read <= ap_const_logic_1;
        else 
            ipDataFifo_read <= ap_const_logic_0;
        end if; 
    end process;


    ipDataMetaFifo_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ipDataMetaFifo_full_n, ap_predicate_op68_write_state2, ap_predicate_op69_write_state2, ap_block_pp0_stage0)
    begin
        if ((((ap_predicate_op69_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_predicate_op68_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            ipDataMetaFifo_blk_n <= ipDataMetaFifo_full_n;
        else 
            ipDataMetaFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ipDataMetaFifo_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ipDataFifo_read_reg_417),1024));

    ipDataMetaFifo_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op68_write_state2, ap_predicate_op69_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_predicate_op69_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_predicate_op68_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            ipDataMetaFifo_write <= ap_const_logic_1;
        else 
            ipDataMetaFifo_write <= ap_const_logic_0;
        end if; 
    end process;


    ipv4ProtocolFifo_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ipv4ProtocolFifo_full_n, ap_predicate_op77_write_state2, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op77_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ipv4ProtocolFifo_blk_n <= ipv4ProtocolFifo_full_n;
        else 
            ipv4ProtocolFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ipv4ProtocolFifo_din <= ap_phi_reg_pp0_iter1_p_Val2_7_reg_173(79 downto 72);

    ipv4ProtocolFifo_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op77_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op77_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ipv4ProtocolFifo_write <= ap_const_logic_1;
        else 
            ipv4ProtocolFifo_write <= ap_const_logic_0;
        end if; 
    end process;

    metaWritten_load_load_fu_317_p1 <= metaWritten;

    myIpAddress_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, myIpAddress_empty_n, ap_done_reg, ap_block_pp0_stage0)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            myIpAddress_blk_n <= myIpAddress_empty_n;
        else 
            myIpAddress_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    myIpAddress_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            myIpAddress_read <= ap_const_logic_1;
        else 
            myIpAddress_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln162_1_fu_341_p2 <= (tmp_last_V_fu_182_p3 or ap_phi_mux_metaWritten_flag_0_i_phi_fu_165_p4);
    or_ln162_fu_321_p2 <= (tmp_last_V_fu_182_p3 or ap_phi_mux_header_ready_flag_0_i_phi_fu_144_p4);
    or_ln414_fu_281_p2 <= (select_ln414_3_fu_273_p3 or select_ln414_2_fu_265_p3);
    p_Result_s_fu_305_p2 <= (and_ln414_fu_293_p2 or and_ln414_1_fu_299_p2);
    select_ln162_fu_333_p3 <= 
        ap_const_lv16_0 when (tmp_last_V_fu_182_p3(0) = '1') else 
        ap_phi_mux_header_idx_new_0_i_phi_fu_155_p4;
    select_ln414_1_fu_257_p3 <= 
        tmp_fu_247_p4 when (icmp_ln414_fu_221_p2(0) = '1') else 
        tmp_72_fu_210_p1;
    select_ln414_2_fu_265_p3 <= 
        ap_const_lv160_lc_4 when (icmp_ln414_fu_221_p2(0) = '1') else 
        ap_const_lv160_lc_2;
    select_ln414_3_fu_273_p3 <= 
        ap_const_lv160_lc_5 when (icmp_ln414_fu_221_p2(0) = '1') else 
        ap_const_lv160_lc_2;
    select_ln414_fu_239_p3 <= 
        st_fu_231_p3 when (icmp_ln414_fu_221_p2(0) = '1') else 
        tmp_72_fu_210_p1;
    shl_ln_fu_202_p3 <= (header_idx & ap_const_lv9_0);
    st_fu_231_p3 <= (trunc_ln414_fu_227_p1 & ap_const_lv159_lc_2);
    tmp_72_fu_210_p1 <= ipDataFifo_dout(160 - 1 downto 0);
    
    tmp_fu_247_p4_proc : process(select_ln414_fu_239_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(160+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(160+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(160 - 1 downto 0);
    variable tmp_fu_247_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(160 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(160 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(160 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_9F(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_0(8 - 1 downto 0);
        v0_cpy := select_ln414_fu_239_p3;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(160-1-unsigned(ap_const_lv32_0(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(160-1-unsigned(ap_const_lv32_9F(8-1 downto 0)));
            for tmp_fu_247_p4_i in 0 to 160-1 loop
                v0_cpy(tmp_fu_247_p4_i) := select_ln414_fu_239_p3(160-1-tmp_fu_247_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(160-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_247_p4 <= resvalue(160-1 downto 0);
    end process;

    tmp_i_nbreadreq_fu_106_p3 <= (0=>(ipDataFifo_empty_n), others=>'-');
    tmp_last_V_fu_182_p3 <= ipDataFifo_dout(576 downto 576);
    trunc_ln414_fu_227_p1 <= ipDataFifo_dout(1 - 1 downto 0);

    validIpAddressFifo_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, validIpAddressFifo_full_n, ap_predicate_op75_write_state2, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op75_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            validIpAddressFifo_blk_n <= validIpAddressFifo_full_n;
        else 
            validIpAddressFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    validIpAddressFifo_din <= (icmp_ln1065_fu_379_p2 or icmp_ln1065_1_fu_384_p2);

    validIpAddressFifo_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op75_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op75_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            validIpAddressFifo_write <= ap_const_logic_1;
        else 
            validIpAddressFifo_write <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln162_fu_327_p2 <= (tmp_last_V_fu_182_p3 xor ap_const_lv1_1);
    xor_ln414_fu_287_p2 <= (or_ln414_fu_281_p2 xor ap_const_lv160_lc_6);
end behav;
