-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ip_handler_top_detect_ipv6_protocol_512_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ipv6DataFifo_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
    ipv6DataFifo_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    ipv6DataFifo_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    ipv6DataFifo_empty_n : IN STD_LOGIC;
    ipv6DataFifo_read : OUT STD_LOGIC;
    m_axis_ipv6udp_internal_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
    m_axis_ipv6udp_internal_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axis_ipv6udp_internal_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axis_ipv6udp_internal_full_n : IN STD_LOGIC;
    m_axis_ipv6udp_internal_write : OUT STD_LOGIC;
    m_axis_icmpv6_internal_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
    m_axis_icmpv6_internal_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axis_icmpv6_internal_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axis_icmpv6_internal_full_n : IN STD_LOGIC;
    m_axis_icmpv6_internal_write : OUT STD_LOGIC );
end;


architecture behav of ip_handler_top_detect_ipv6_protocol_512_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";
    constant ap_const_lv8_3A : STD_LOGIC_VECTOR (7 downto 0) := "00111010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1024_lc_1 : STD_LOGIC_VECTOR (1023 downto
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal tmp_i_nbreadreq_fu_48_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op20_read_state1 : BOOLEAN;
    signal ap_predicate_op32_read_state1 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal state_V_load_reg_126 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_130 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_58_reg_137 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_predicate_op42_write_state2 : BOOLEAN;
    signal ap_predicate_op44_write_state2 : BOOLEAN;
    signal nextHeader_V_load_reg_144 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_predicate_op46_write_state2 : BOOLEAN;
    signal ap_predicate_op48_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal state_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal nextHeader_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ipv6DataFifo_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal m_axis_icmpv6_internal_blk_n : STD_LOGIC;
    signal m_axis_ipv6udp_internal_blk_n : STD_LOGIC;
    signal reg_84 : STD_LOGIC_VECTOR (1023 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_76_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_222 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    state_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_222)) then
                if (((state_V = ap_const_lv1_1) and (grp_fu_76_p3 = ap_const_lv1_1))) then 
                    state_V <= ap_const_lv1_0;
                elsif (((state_V = ap_const_lv1_0) and (grp_fu_76_p3 = ap_const_lv1_0))) then 
                    state_V <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_nbreadreq_fu_48_p3 = ap_const_lv1_1) and (state_V = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                nextHeader_V <= ipv6DataFifo_dout(55 downto 48);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_nbreadreq_fu_48_p3 = ap_const_lv1_1) and (state_V = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                nextHeader_V_load_reg_144 <= nextHeader_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_predicate_op32_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_predicate_op20_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_84 <= ipv6DataFifo_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                state_V_load_reg_126 <= state_V;
                tmp_i_reg_130 <= tmp_i_nbreadreq_fu_48_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_nbreadreq_fu_48_p3 = ap_const_lv1_1) and (state_V = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_i_58_reg_137 <= ipv6DataFifo_dout(55 downto 48);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ipv6DataFifo_empty_n, ap_predicate_op20_read_state1, ap_predicate_op32_read_state1, ap_done_reg, m_axis_ipv6udp_internal_full_n, ap_predicate_op42_write_state2, m_axis_icmpv6_internal_full_n, ap_predicate_op44_write_state2, ap_predicate_op46_write_state2, ap_predicate_op48_write_state2)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op32_read_state1 = ap_const_boolean_1) and (ipv6DataFifo_empty_n = ap_const_logic_0)) or ((ap_predicate_op20_read_state1 = ap_const_boolean_1) and (ipv6DataFifo_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op46_write_state2 = ap_const_boolean_1) and (m_axis_ipv6udp_internal_full_n = ap_const_logic_0)) or ((ap_predicate_op44_write_state2 = ap_const_boolean_1) and (m_axis_icmpv6_internal_full_n = ap_const_logic_0)) or ((m_axis_icmpv6_internal_full_n = ap_const_logic_0) and (ap_predicate_op48_write_state2 = ap_const_boolean_1)) or ((ap_predicate_op42_write_state2 = ap_const_boolean_1) and (m_axis_ipv6udp_internal_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ipv6DataFifo_empty_n, ap_predicate_op20_read_state1, ap_predicate_op32_read_state1, ap_done_reg, m_axis_ipv6udp_internal_full_n, ap_predicate_op42_write_state2, m_axis_icmpv6_internal_full_n, ap_predicate_op44_write_state2, ap_predicate_op46_write_state2, ap_predicate_op48_write_state2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op32_read_state1 = ap_const_boolean_1) and (ipv6DataFifo_empty_n = ap_const_logic_0)) or ((ap_predicate_op20_read_state1 = ap_const_boolean_1) and (ipv6DataFifo_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op46_write_state2 = ap_const_boolean_1) and (m_axis_ipv6udp_internal_full_n = ap_const_logic_0)) or ((ap_predicate_op44_write_state2 = ap_const_boolean_1) and (m_axis_icmpv6_internal_full_n = ap_const_logic_0)) or ((m_axis_icmpv6_internal_full_n = ap_const_logic_0) and (ap_predicate_op48_write_state2 = ap_const_boolean_1)) or ((ap_predicate_op42_write_state2 = ap_const_boolean_1) and (m_axis_ipv6udp_internal_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ipv6DataFifo_empty_n, ap_predicate_op20_read_state1, ap_predicate_op32_read_state1, ap_done_reg, m_axis_ipv6udp_internal_full_n, ap_predicate_op42_write_state2, m_axis_icmpv6_internal_full_n, ap_predicate_op44_write_state2, ap_predicate_op46_write_state2, ap_predicate_op48_write_state2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op32_read_state1 = ap_const_boolean_1) and (ipv6DataFifo_empty_n = ap_const_logic_0)) or ((ap_predicate_op20_read_state1 = ap_const_boolean_1) and (ipv6DataFifo_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op46_write_state2 = ap_const_boolean_1) and (m_axis_ipv6udp_internal_full_n = ap_const_logic_0)) or ((ap_predicate_op44_write_state2 = ap_const_boolean_1) and (m_axis_icmpv6_internal_full_n = ap_const_logic_0)) or ((m_axis_icmpv6_internal_full_n = ap_const_logic_0) and (ap_predicate_op48_write_state2 = ap_const_boolean_1)) or ((ap_predicate_op42_write_state2 = ap_const_boolean_1) and (m_axis_ipv6udp_internal_full_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ipv6DataFifo_empty_n, ap_predicate_op20_read_state1, ap_predicate_op32_read_state1, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op32_read_state1 = ap_const_boolean_1) and (ipv6DataFifo_empty_n = ap_const_logic_0)) or ((ap_predicate_op20_read_state1 = ap_const_boolean_1) and (ipv6DataFifo_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axis_ipv6udp_internal_full_n, ap_predicate_op42_write_state2, m_axis_icmpv6_internal_full_n, ap_predicate_op44_write_state2, ap_predicate_op46_write_state2, ap_predicate_op48_write_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((ap_predicate_op46_write_state2 = ap_const_boolean_1) and (m_axis_ipv6udp_internal_full_n = ap_const_logic_0)) or ((ap_predicate_op44_write_state2 = ap_const_boolean_1) and (m_axis_icmpv6_internal_full_n = ap_const_logic_0)) or ((m_axis_icmpv6_internal_full_n = ap_const_logic_0) and (ap_predicate_op48_write_state2 = ap_const_boolean_1)) or ((ap_predicate_op42_write_state2 = ap_const_boolean_1) and (m_axis_ipv6udp_internal_full_n = ap_const_logic_0)));
    end process;


    ap_condition_222_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, tmp_i_nbreadreq_fu_48_p3, ap_block_pp0_stage0_11001)
    begin
                ap_condition_222 <= ((tmp_i_nbreadreq_fu_48_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op20_read_state1_assign_proc : process(tmp_i_nbreadreq_fu_48_p3, state_V)
    begin
                ap_predicate_op20_read_state1 <= ((tmp_i_nbreadreq_fu_48_p3 = ap_const_lv1_1) and (state_V = ap_const_lv1_0));
    end process;


    ap_predicate_op32_read_state1_assign_proc : process(tmp_i_nbreadreq_fu_48_p3, state_V)
    begin
                ap_predicate_op32_read_state1 <= ((tmp_i_nbreadreq_fu_48_p3 = ap_const_lv1_1) and (state_V = ap_const_lv1_1));
    end process;


    ap_predicate_op42_write_state2_assign_proc : process(state_V_load_reg_126, tmp_i_reg_130, tmp_i_58_reg_137)
    begin
                ap_predicate_op42_write_state2 <= ((tmp_i_58_reg_137 = ap_const_lv8_11) and (tmp_i_reg_130 = ap_const_lv1_1) and (state_V_load_reg_126 = ap_const_lv1_0));
    end process;


    ap_predicate_op44_write_state2_assign_proc : process(state_V_load_reg_126, tmp_i_reg_130, tmp_i_58_reg_137)
    begin
                ap_predicate_op44_write_state2 <= ((tmp_i_58_reg_137 = ap_const_lv8_3A) and (tmp_i_reg_130 = ap_const_lv1_1) and (state_V_load_reg_126 = ap_const_lv1_0));
    end process;


    ap_predicate_op46_write_state2_assign_proc : process(state_V_load_reg_126, tmp_i_reg_130, nextHeader_V_load_reg_144)
    begin
                ap_predicate_op46_write_state2 <= ((nextHeader_V_load_reg_144 = ap_const_lv8_11) and (tmp_i_reg_130 = ap_const_lv1_1) and (state_V_load_reg_126 = ap_const_lv1_1));
    end process;


    ap_predicate_op48_write_state2_assign_proc : process(state_V_load_reg_126, tmp_i_reg_130, nextHeader_V_load_reg_144)
    begin
                ap_predicate_op48_write_state2 <= ((nextHeader_V_load_reg_144 = ap_const_lv8_3A) and (tmp_i_reg_130 = ap_const_lv1_1) and (state_V_load_reg_126 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_76_p3 <= ipv6DataFifo_dout(576 downto 576);

    ipv6DataFifo_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ipv6DataFifo_empty_n, ap_predicate_op20_read_state1, ap_predicate_op32_read_state1, ap_done_reg, ap_block_pp0_stage0)
    begin
        if ((((ap_done_reg = ap_const_logic_0) and (ap_predicate_op32_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_done_reg = ap_const_logic_0) and (ap_predicate_op20_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            ipv6DataFifo_blk_n <= ipv6DataFifo_empty_n;
        else 
            ipv6DataFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ipv6DataFifo_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op20_read_state1, ap_predicate_op32_read_state1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_predicate_op32_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_predicate_op20_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            ipv6DataFifo_read <= ap_const_logic_1;
        else 
            ipv6DataFifo_read <= ap_const_logic_0;
        end if; 
    end process;


    m_axis_icmpv6_internal_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axis_icmpv6_internal_full_n, ap_predicate_op44_write_state2, ap_predicate_op48_write_state2, ap_block_pp0_stage0)
    begin
        if ((((ap_predicate_op44_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op48_write_state2 = ap_const_boolean_1)))) then 
            m_axis_icmpv6_internal_blk_n <= m_axis_icmpv6_internal_full_n;
        else 
            m_axis_icmpv6_internal_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_icmpv6_internal_din <= reg_84;

    m_axis_icmpv6_internal_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op44_write_state2, ap_predicate_op48_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_predicate_op44_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op48_write_state2 = ap_const_boolean_1)))) then 
            m_axis_icmpv6_internal_write <= ap_const_logic_1;
        else 
            m_axis_icmpv6_internal_write <= ap_const_logic_0;
        end if; 
    end process;


    m_axis_ipv6udp_internal_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axis_ipv6udp_internal_full_n, ap_predicate_op42_write_state2, ap_predicate_op46_write_state2, ap_block_pp0_stage0)
    begin
        if ((((ap_predicate_op46_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_predicate_op42_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            m_axis_ipv6udp_internal_blk_n <= m_axis_ipv6udp_internal_full_n;
        else 
            m_axis_ipv6udp_internal_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_ipv6udp_internal_din <= reg_84;

    m_axis_ipv6udp_internal_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op42_write_state2, ap_predicate_op46_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_predicate_op46_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_predicate_op42_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axis_ipv6udp_internal_write <= ap_const_logic_1;
        else 
            m_axis_ipv6udp_internal_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_i_nbreadreq_fu_48_p3 <= (0=>(ipv6DataFifo_empty_n), others=>'-');
end behav;
