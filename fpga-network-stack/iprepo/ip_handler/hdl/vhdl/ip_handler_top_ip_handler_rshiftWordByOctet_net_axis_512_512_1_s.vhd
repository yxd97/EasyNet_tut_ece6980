-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ip_handler_top_ip_handler_rshiftWordByOctet_net_axis_512_512_1_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ipv4ShiftFifo_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
    ipv4ShiftFifo_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    ipv4ShiftFifo_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    ipv4ShiftFifo_empty_n : IN STD_LOGIC;
    ipv4ShiftFifo_read : OUT STD_LOGIC;
    ipDataFifo_din : OUT STD_LOGIC_VECTOR (576 downto 0);
    ipDataFifo_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    ipDataFifo_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    ipDataFifo_full_n : IN STD_LOGIC;
    ipDataFifo_write : OUT STD_LOGIC );
end;


architecture behav of ip_handler_top_ip_handler_rshiftWordByOctet_net_axis_512_512_1_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111111";
    constant ap_const_lv1024_lc_1 : STD_LOGIC_VECTOR (1023 downto
    constant ap_const_lv32_20D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000001101";
    constant ap_const_lv32_20E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000001110";
    constant ap_const_lv50_0 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000000";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv112_0 : STD_LOGIC_VECTOR (111 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal fsmState_1_load_load_fu_136_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_nbreadreq_fu_76_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op18_read_state1 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal fsmState_1_load_reg_260 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_274 : STD_LOGIC_VECTOR (0 downto 0);
    signal rs_firstWord_1_load_reg_281 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op45_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal fsmState_1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal prevWord_data_V_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal prevWord_keep_V_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal rs_firstWord_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal ipv4ShiftFifo_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ipDataFifo_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_Val2_s_reg_264 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Val2_4_reg_269 : STD_LOGIC_VECTOR (63 downto 0);
    signal rs_firstWord_1_load_load_fu_170_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln674_fu_174_p1 : STD_LOGIC_VECTOR (111 downto 0);
    signal trunc_ln674_reg_285 : STD_LOGIC_VECTOR (111 downto 0);
    signal tmp_4_i7_reg_290 : STD_LOGIC_VECTOR (13 downto 0);
    signal sendWord_last_V_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sendWord_last_V_reg_295 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_sendWord_last_V_2_phi_fu_100_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_sendWord_last_V_2_reg_97 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_rs_firstWord_1_new_0_i_phi_fu_110_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_rs_firstWord_1_new_0_i_reg_107 : STD_LOGIC_VECTOR (0 downto 0);
    signal currWord_last_V_fu_162_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal currWord_data_V_fu_148_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_1_fu_235_p6 : STD_LOGIC_VECTOR (576 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_s_fu_247_p5 : STD_LOGIC_VECTOR (576 downto 0);
    signal tmp_5_i8_fu_188_p4 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_127_p4 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_118_p4 : STD_LOGIC_VECTOR (399 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_147 : BOOLEAN;
    signal ap_condition_132 : BOOLEAN;
    signal ap_condition_166 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    fsmState_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_132)) then
                if ((fsmState_1_load_load_fu_136_p1 = ap_const_lv1_1)) then 
                    fsmState_1 <= ap_const_lv1_0;
                elsif ((ap_const_boolean_1 = ap_condition_147)) then 
                    fsmState_1 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                fsmState_1_load_reg_260 <= fsmState_1;
                p_Val2_4_reg_269 <= prevWord_keep_V_1;
                p_Val2_s_reg_264 <= prevWord_data_V_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_i_nbreadreq_fu_76_p3 = ap_const_lv1_1) and (fsmState_1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                prevWord_data_V_1 <= currWord_data_V_fu_148_p1;
                prevWord_keep_V_1 <= ipv4ShiftFifo_dout(575 downto 512);
                rs_firstWord_1 <= ap_phi_mux_rs_firstWord_1_new_0_i_phi_fu_110_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_i_nbreadreq_fu_76_p3 = ap_const_lv1_1) and (fsmState_1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                rs_firstWord_1_load_reg_281 <= rs_firstWord_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_i_nbreadreq_fu_76_p3 = ap_const_lv1_1) and (fsmState_1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (rs_firstWord_1_load_load_fu_170_p1 = ap_const_lv1_0))) then
                sendWord_last_V_reg_295 <= sendWord_last_V_fu_198_p2;
                tmp_4_i7_reg_290 <= ipv4ShiftFifo_dout(525 downto 512);
                trunc_ln674_reg_285 <= trunc_ln674_fu_174_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (fsmState_1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_i_reg_274 <= tmp_i_nbreadreq_fu_76_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ipv4ShiftFifo_empty_n, ap_predicate_op18_read_state1, ap_done_reg, ipDataFifo_full_n, fsmState_1_load_reg_260, ap_predicate_op45_write_state2)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((fsmState_1_load_reg_260 = ap_const_lv1_1) and (ipDataFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op45_write_state2 = ap_const_boolean_1) and (ipDataFifo_full_n = ap_const_logic_0)))) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op18_read_state1 = ap_const_boolean_1) and (ipv4ShiftFifo_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ipv4ShiftFifo_empty_n, ap_predicate_op18_read_state1, ap_done_reg, ipDataFifo_full_n, fsmState_1_load_reg_260, ap_predicate_op45_write_state2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((fsmState_1_load_reg_260 = ap_const_lv1_1) and (ipDataFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op45_write_state2 = ap_const_boolean_1) and (ipDataFifo_full_n = ap_const_logic_0)))) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op18_read_state1 = ap_const_boolean_1) and (ipv4ShiftFifo_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ipv4ShiftFifo_empty_n, ap_predicate_op18_read_state1, ap_done_reg, ipDataFifo_full_n, fsmState_1_load_reg_260, ap_predicate_op45_write_state2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((fsmState_1_load_reg_260 = ap_const_lv1_1) and (ipDataFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op45_write_state2 = ap_const_boolean_1) and (ipDataFifo_full_n = ap_const_logic_0)))) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op18_read_state1 = ap_const_boolean_1) and (ipv4ShiftFifo_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ipv4ShiftFifo_empty_n, ap_predicate_op18_read_state1, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op18_read_state1 = ap_const_boolean_1) and (ipv4ShiftFifo_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(ipDataFifo_full_n, fsmState_1_load_reg_260, ap_predicate_op45_write_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((fsmState_1_load_reg_260 = ap_const_lv1_1) and (ipDataFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op45_write_state2 = ap_const_boolean_1) and (ipDataFifo_full_n = ap_const_logic_0)));
    end process;


    ap_condition_132_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_132 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_147_assign_proc : process(tmp_i_nbreadreq_fu_76_p3, fsmState_1, ap_phi_mux_sendWord_last_V_2_phi_fu_100_p4, currWord_last_V_fu_162_p3)
    begin
                ap_condition_147 <= ((tmp_i_nbreadreq_fu_76_p3 = ap_const_lv1_1) and (fsmState_1 = ap_const_lv1_0) and (currWord_last_V_fu_162_p3 = ap_const_lv1_1) and (ap_phi_mux_sendWord_last_V_2_phi_fu_100_p4 = ap_const_lv1_0));
    end process;


    ap_condition_166_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_01001)
    begin
                ap_condition_166 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_rs_firstWord_1_new_0_i_phi_fu_110_p4_assign_proc : process(tmp_i_nbreadreq_fu_76_p3, fsmState_1, ap_phi_reg_pp0_iter0_rs_firstWord_1_new_0_i_reg_107, currWord_last_V_fu_162_p3)
    begin
        if (((tmp_i_nbreadreq_fu_76_p3 = ap_const_lv1_1) and (fsmState_1 = ap_const_lv1_0))) then
            if ((currWord_last_V_fu_162_p3 = ap_const_lv1_0)) then 
                ap_phi_mux_rs_firstWord_1_new_0_i_phi_fu_110_p4 <= ap_const_lv1_0;
            elsif ((currWord_last_V_fu_162_p3 = ap_const_lv1_1)) then 
                ap_phi_mux_rs_firstWord_1_new_0_i_phi_fu_110_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_rs_firstWord_1_new_0_i_phi_fu_110_p4 <= ap_phi_reg_pp0_iter0_rs_firstWord_1_new_0_i_reg_107;
            end if;
        else 
            ap_phi_mux_rs_firstWord_1_new_0_i_phi_fu_110_p4 <= ap_phi_reg_pp0_iter0_rs_firstWord_1_new_0_i_reg_107;
        end if; 
    end process;


    ap_phi_mux_sendWord_last_V_2_phi_fu_100_p4_assign_proc : process(tmp_i_nbreadreq_fu_76_p3, fsmState_1, rs_firstWord_1_load_load_fu_170_p1, sendWord_last_V_fu_198_p2, ap_phi_reg_pp0_iter0_sendWord_last_V_2_reg_97)
    begin
        if (((tmp_i_nbreadreq_fu_76_p3 = ap_const_lv1_1) and (fsmState_1 = ap_const_lv1_0))) then
            if ((rs_firstWord_1_load_load_fu_170_p1 = ap_const_lv1_1)) then 
                ap_phi_mux_sendWord_last_V_2_phi_fu_100_p4 <= ap_const_lv1_0;
            elsif ((rs_firstWord_1_load_load_fu_170_p1 = ap_const_lv1_0)) then 
                ap_phi_mux_sendWord_last_V_2_phi_fu_100_p4 <= sendWord_last_V_fu_198_p2;
            else 
                ap_phi_mux_sendWord_last_V_2_phi_fu_100_p4 <= ap_phi_reg_pp0_iter0_sendWord_last_V_2_reg_97;
            end if;
        else 
            ap_phi_mux_sendWord_last_V_2_phi_fu_100_p4 <= ap_phi_reg_pp0_iter0_sendWord_last_V_2_reg_97;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_rs_firstWord_1_new_0_i_reg_107 <= "X";
    ap_phi_reg_pp0_iter0_sendWord_last_V_2_reg_97 <= "X";

    ap_predicate_op18_read_state1_assign_proc : process(tmp_i_nbreadreq_fu_76_p3, fsmState_1)
    begin
                ap_predicate_op18_read_state1 <= ((tmp_i_nbreadreq_fu_76_p3 = ap_const_lv1_1) and (fsmState_1 = ap_const_lv1_0));
    end process;


    ap_predicate_op45_write_state2_assign_proc : process(fsmState_1_load_reg_260, tmp_i_reg_274, rs_firstWord_1_load_reg_281)
    begin
                ap_predicate_op45_write_state2 <= ((rs_firstWord_1_load_reg_281 = ap_const_lv1_0) and (tmp_i_reg_274 = ap_const_lv1_1) and (fsmState_1_load_reg_260 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    currWord_data_V_fu_148_p1 <= ipv4ShiftFifo_dout(512 - 1 downto 0);
    currWord_last_V_fu_162_p3 <= ipv4ShiftFifo_dout(576 downto 576);
    fsmState_1_load_load_fu_136_p1 <= fsmState_1;
    grp_fu_118_p4 <= p_Val2_s_reg_264(511 downto 112);
    grp_fu_127_p4 <= p_Val2_4_reg_269(63 downto 14);

    ipDataFifo_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ipDataFifo_full_n, fsmState_1_load_reg_260, ap_predicate_op45_write_state2, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (fsmState_1_load_reg_260 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op45_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ipDataFifo_blk_n <= ipDataFifo_full_n;
        else 
            ipDataFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ipDataFifo_din_assign_proc : process(fsmState_1_load_reg_260, ap_predicate_op45_write_state2, p_1_fu_235_p6, p_s_fu_247_p5, ap_condition_166)
    begin
        if ((ap_const_boolean_1 = ap_condition_166)) then
            if ((fsmState_1_load_reg_260 = ap_const_lv1_1)) then 
                ipDataFifo_din <= p_s_fu_247_p5;
            elsif ((ap_predicate_op45_write_state2 = ap_const_boolean_1)) then 
                ipDataFifo_din <= p_1_fu_235_p6;
            else 
                ipDataFifo_din
            end if;
        else 
            ipDataFifo_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ipDataFifo_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, fsmState_1_load_reg_260, ap_predicate_op45_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (fsmState_1_load_reg_260 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op45_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ipDataFifo_write <= ap_const_logic_1;
        else 
            ipDataFifo_write <= ap_const_logic_0;
        end if; 
    end process;


    ipv4ShiftFifo_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ipv4ShiftFifo_empty_n, ap_predicate_op18_read_state1, ap_done_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_done_reg = ap_const_logic_0) and (ap_predicate_op18_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ipv4ShiftFifo_blk_n <= ipv4ShiftFifo_empty_n;
        else 
            ipv4ShiftFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ipv4ShiftFifo_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op18_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op18_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ipv4ShiftFifo_read <= ap_const_logic_1;
        else 
            ipv4ShiftFifo_read <= ap_const_logic_0;
        end if; 
    end process;

    p_1_fu_235_p6 <= ((((sendWord_last_V_reg_295 & tmp_4_i7_reg_290) & grp_fu_127_p4) & trunc_ln674_reg_285) & grp_fu_118_p4);
    p_s_fu_247_p5 <= (((ap_const_lv15_4000 & grp_fu_127_p4) & ap_const_lv112_0) & grp_fu_118_p4);
    rs_firstWord_1_load_load_fu_170_p1 <= rs_firstWord_1;
    sendWord_last_V_fu_198_p2 <= "1" when (tmp_5_i8_fu_188_p4 = ap_const_lv50_0) else "0";
    tmp_5_i8_fu_188_p4 <= ipv4ShiftFifo_dout(575 downto 526);
    tmp_i_nbreadreq_fu_76_p3 <= (0=>(ipv4ShiftFifo_empty_n), others=>'-');
    trunc_ln674_fu_174_p1 <= ipv4ShiftFifo_dout(112 - 1 downto 0);
end behav;
