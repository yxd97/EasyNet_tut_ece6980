// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module toe_top_toe_duplicate_stream_net_axis_512_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        txDataReq_internal_dout,
        txDataReq_internal_num_data_valid,
        txDataReq_internal_fifo_cap,
        txDataReq_internal_empty_n,
        txDataReq_internal_read,
        tasi_dataFifo_din,
        tasi_dataFifo_num_data_valid,
        tasi_dataFifo_fifo_cap,
        tasi_dataFifo_full_n,
        tasi_dataFifo_write,
        txApp2txEng_data_stream_din,
        txApp2txEng_data_stream_num_data_valid,
        txApp2txEng_data_stream_fifo_cap,
        txApp2txEng_data_stream_full_n,
        txApp2txEng_data_stream_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [1023:0] txDataReq_internal_dout;
input  [1:0] txDataReq_internal_num_data_valid;
input  [1:0] txDataReq_internal_fifo_cap;
input   txDataReq_internal_empty_n;
output   txDataReq_internal_read;
output  [576:0] tasi_dataFifo_din;
input  [10:0] tasi_dataFifo_num_data_valid;
input  [10:0] tasi_dataFifo_fifo_cap;
input   tasi_dataFifo_full_n;
output   tasi_dataFifo_write;
output  [1023:0] txApp2txEng_data_stream_din;
input  [10:0] txApp2txEng_data_stream_num_data_valid;
input  [10:0] txApp2txEng_data_stream_fifo_cap;
input   txApp2txEng_data_stream_full_n;
output   txApp2txEng_data_stream_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg txDataReq_internal_read;
reg tasi_dataFifo_write;
reg txApp2txEng_data_stream_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [0:0] tmp_i_nbreadreq_fu_28_p3;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] tmp_i_reg_60;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    txDataReq_internal_blk_n;
wire    ap_block_pp0_stage0;
reg    tasi_dataFifo_blk_n;
reg    txApp2txEng_data_stream_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [1023:0] tmp_reg_64;
wire   [576:0] trunc_ln174_fu_56_p1;
reg   [576:0] trunc_ln174_reg_69;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_i_reg_60 <= tmp_i_nbreadreq_fu_28_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_nbreadreq_fu_28_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_64 <= txDataReq_internal_dout;
        trunc_ln174_reg_69 <= trunc_ln174_fu_56_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_i_reg_60 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tasi_dataFifo_blk_n = tasi_dataFifo_full_n;
    end else begin
        tasi_dataFifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_reg_60 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tasi_dataFifo_write = 1'b1;
    end else begin
        tasi_dataFifo_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_i_reg_60 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        txApp2txEng_data_stream_blk_n = txApp2txEng_data_stream_full_n;
    end else begin
        txApp2txEng_data_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_reg_60 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        txApp2txEng_data_stream_write = 1'b1;
    end else begin
        txApp2txEng_data_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (tmp_i_nbreadreq_fu_28_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        txDataReq_internal_blk_n = txDataReq_internal_empty_n;
    end else begin
        txDataReq_internal_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_i_nbreadreq_fu_28_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        txDataReq_internal_read = 1'b1;
    end else begin
        txDataReq_internal_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((txApp2txEng_data_stream_full_n == 1'b0) & (tmp_i_reg_60 == 1'd1)) | ((tmp_i_reg_60 == 1'd1) & (tasi_dataFifo_full_n == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_28_p3 == 1'd1) & (txDataReq_internal_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((txApp2txEng_data_stream_full_n == 1'b0) & (tmp_i_reg_60 == 1'd1)) | ((tmp_i_reg_60 == 1'd1) & (tasi_dataFifo_full_n == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_28_p3 == 1'd1) & (txDataReq_internal_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((txApp2txEng_data_stream_full_n == 1'b0) & (tmp_i_reg_60 == 1'd1)) | ((tmp_i_reg_60 == 1'd1) & (tasi_dataFifo_full_n == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_28_p3 == 1'd1) & (txDataReq_internal_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_28_p3 == 1'd1) & (txDataReq_internal_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((txApp2txEng_data_stream_full_n == 1'b0) & (tmp_i_reg_60 == 1'd1)) | ((tmp_i_reg_60 == 1'd1) & (tasi_dataFifo_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign tasi_dataFifo_din = trunc_ln174_reg_69;

assign tmp_i_nbreadreq_fu_28_p3 = txDataReq_internal_empty_n;

assign trunc_ln174_fu_56_p1 = txDataReq_internal_dout[576:0];

assign txApp2txEng_data_stream_din = tmp_reg_64;

endmodule //toe_top_toe_duplicate_stream_net_axis_512_s
