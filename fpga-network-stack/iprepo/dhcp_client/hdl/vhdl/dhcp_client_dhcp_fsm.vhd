-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dhcp_client_dhcp_fsm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inputIpAddress_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    inputIpAddress_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    inputIpAddress_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    inputIpAddress_empty_n : IN STD_LOGIC;
    inputIpAddress_read : OUT STD_LOGIC;
    dhcpEnable_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    dhcpEnable_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    dhcpEnable_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    dhcpEnable_empty_n : IN STD_LOGIC;
    dhcpEnable_read : OUT STD_LOGIC;
    dhcp_replyMetaFifo_dout : IN STD_LOGIC_VECTOR (103 downto 0);
    dhcp_replyMetaFifo_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    dhcp_replyMetaFifo_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    dhcp_replyMetaFifo_empty_n : IN STD_LOGIC;
    dhcp_replyMetaFifo_read : OUT STD_LOGIC;
    portOpen_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    portOpen_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    portOpen_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    portOpen_empty_n : IN STD_LOGIC;
    portOpen_read : OUT STD_LOGIC;
    dhcp_requestMetaFifo_din : OUT STD_LOGIC_VECTOR (71 downto 0);
    dhcp_requestMetaFifo_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    dhcp_requestMetaFifo_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    dhcp_requestMetaFifo_full_n : IN STD_LOGIC;
    dhcp_requestMetaFifo_write : OUT STD_LOGIC;
    dhcpIpAddressOut : OUT STD_LOGIC_VECTOR (31 downto 0);
    dhcpIpAddressOut_ap_vld : OUT STD_LOGIC );
end;


architecture behav of dhcp_client_dhcp_fsm is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_1_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_1_2 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_1_3 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_1_4 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_2CBF8C1E_5 : STD_LOGIC_VECTOR (31 downto 0) := "00101100101111111000110000011110";
    constant ap_const_lv32_2CBF8C1E_6 : STD_LOGIC_VECTOR (31 downto 0) := "00101100101111111000110000011110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv96_300000000 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal grp_nbreadreq_fu_128_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op20_read_state1 : BOOLEAN;
    signal ap_predicate_op43_read_state1 : BOOLEAN;
    signal ap_predicate_op73_read_state1 : BOOLEAN;
    signal tmp_i_nbreadreq_fu_142_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op81_read_state1 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal state_load_reg_500 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_i_26_reg_530 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_6_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_10_reg_547 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op112_write_state2 : BOOLEAN;
    signal dhcpEnable_read_reg_496 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_reg_551 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op116_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal myIpAddress_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal state : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal time_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    signal randomValue_V : STD_LOGIC_VECTOR (31 downto 0) := "00110100101010101101001101001011";
    signal myIdentity_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal IpAddressBuffer_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal dhcpEnable_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal inputIpAddress_blk_n : STD_LOGIC;
    signal portOpen_blk_n : STD_LOGIC;
    signal dhcp_requestMetaFifo_blk_n : STD_LOGIC;
    signal dhcp_replyMetaFifo_blk_n : STD_LOGIC;
    signal inputIpAddress_read_reg_490 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal dhcpEnable_read_read_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal randomValue_V_load_reg_504 : STD_LOGIC_VECTOR (31 downto 0);
    signal myIdentity_V_load_reg_509 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_i_reg_515 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_8_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_8_reg_522 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_11_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_11_reg_526 : STD_LOGIC_VECTOR (0 downto 0);
    signal reply_assignedIpAddress_V_reg_537 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1065_6_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_10_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_storemerge_i_phi_fu_173_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge_i_reg_170 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_storemerge1_i_phi_fu_184_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge1_i_reg_181 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_randomValue_V_loc_2_i_phi_fu_195_p14 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_randomValue_V_loc_2_i_reg_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln232_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln290_fu_333_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln886_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_fu_458_p4 : STD_LOGIC_VECTOR (71 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln174_fu_480_p1 : STD_LOGIC_VECTOR (71 downto 0);
    signal dhcpIpAddressOut_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reply_identifier_V_1_fu_267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_221_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal reply_identifier_V_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln232_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln174_8_i_fu_424_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal or_ln174_fu_432_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_7_i8_fu_448_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i7_fu_438_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln_fu_473_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_222 : BOOLEAN;
    signal ap_condition_213 : BOOLEAN;
    signal ap_condition_343 : BOOLEAN;
    signal ap_condition_298 : BOOLEAN;
    signal ap_condition_303 : BOOLEAN;
    signal ap_condition_254 : BOOLEAN;
    signal ap_condition_95 : BOOLEAN;
    signal ap_condition_205 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    dhcpIpAddressOut_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dhcpIpAddressOut_preg <= ap_const_lv32_0;
            else
                if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
                    dhcpIpAddressOut_preg <= myIpAddress_V;
                end if; 
            end if;
        end if;
    end process;


    myIpAddress_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((state_load_reg_500 = ap_const_lv3_4)) and not((state_load_reg_500 = ap_const_lv3_3)) and not((state_load_reg_500 = ap_const_lv3_1)) and not((state_load_reg_500 = ap_const_lv3_2)) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (state_load_reg_500 = ap_const_lv3_1)))) then 
                myIpAddress_V <= inputIpAddress_read_reg_490;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1065_11_reg_526 = ap_const_lv1_1) and (icmp_ln1065_8_reg_522 = ap_const_lv1_1) and (tmp_13_i_reg_515 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (state_load_reg_500 = ap_const_lv3_3))) then 
                myIpAddress_V <= IpAddressBuffer_V;
            end if; 
        end if;
    end process;

    state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_205)) then
                if ((ap_const_boolean_1 = ap_condition_95)) then 
                    state <= ap_const_lv3_1_4;
                elsif (((state = ap_const_lv3_4) and (dhcpEnable_read_read_fu_122_p2 = ap_const_lv1_0))) then 
                    state <= ap_const_lv3_1_3;
                elsif ((ap_const_boolean_1 = ap_condition_254)) then 
                    state <= ap_const_lv3_2;
                elsif ((ap_const_boolean_1 = ap_condition_222)) then 
                    state <= zext_ln290_fu_333_p1;
                elsif ((ap_const_boolean_1 = ap_condition_303)) then 
                    state <= ap_const_lv3_1_2;
                elsif ((ap_const_boolean_1 = ap_condition_213)) then 
                    state <= ap_phi_mux_storemerge_i_phi_fu_173_p4;
                elsif ((ap_const_boolean_1 = ap_condition_298)) then 
                    state <= ap_const_lv3_1_1;
                end if;
            end if; 
        end if;
    end process;

    time_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((state = ap_const_lv3_1) and (grp_fu_211_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (dhcpEnable_read_read_fu_122_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                time_V <= ap_const_lv32_2CBF8C1E_6;
            elsif (((grp_nbreadreq_fu_128_p3 = ap_const_lv1_1) and (state = ap_const_lv3_2) and (icmp_ln1065_10_fu_321_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (icmp_ln1065_6_fu_315_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                time_V <= ap_const_lv32_2CBF8C1E_5;
            elsif ((((state = ap_const_lv3_1) and (grp_fu_211_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (dhcpEnable_read_read_fu_122_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((grp_nbreadreq_fu_128_p3 = ap_const_lv1_0) and (state = ap_const_lv3_2) and (grp_fu_211_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((grp_nbreadreq_fu_128_p3 = ap_const_lv1_0) and (state = ap_const_lv3_3) and (grp_fu_211_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                time_V <= grp_fu_216_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1065_10_reg_547 = ap_const_lv1_1) and (icmp_ln1065_6_reg_543 = ap_const_lv1_1) and (tmp_i_26_reg_530 = ap_const_lv1_1) and (state_load_reg_500 = ap_const_lv3_2))) then
                IpAddressBuffer_V <= reply_assignedIpAddress_V_reg_537;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                dhcpEnable_read_reg_496 <= dhcpEnable_dout;
                inputIpAddress_read_reg_490 <= inputIpAddress_dout;
                myIdentity_V_load_reg_509 <= myIdentity_V;
                randomValue_V_load_reg_504 <= randomValue_V;
                state_load_reg_500 <= state;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nbreadreq_fu_128_p3 = ap_const_lv1_1) and (state = ap_const_lv3_2) and (icmp_ln1065_6_fu_315_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1065_10_reg_547 <= icmp_ln1065_10_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nbreadreq_fu_128_p3 = ap_const_lv1_1) and (state = ap_const_lv3_3) and (icmp_ln1065_8_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1065_11_reg_526 <= icmp_ln1065_11_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nbreadreq_fu_128_p3 = ap_const_lv1_1) and (state = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1065_6_reg_543 <= icmp_ln1065_6_fu_315_p2;
                reply_assignedIpAddress_V_reg_537 <= dhcp_replyMetaFifo_dout(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nbreadreq_fu_128_p3 = ap_const_lv1_1) and (state = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1065_8_reg_522 <= icmp_ln1065_8_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((state = ap_const_lv3_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (dhcpEnable_read_read_fu_122_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln1065_reg_551 <= grp_fu_211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((state = ap_const_lv3_1) and (grp_fu_211_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (dhcpEnable_read_read_fu_122_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                myIdentity_V <= randomValue_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                randomValue_V <= add_ln886_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((state = ap_const_lv3_3) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_13_i_reg_515 <= grp_nbreadreq_fu_128_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((state = ap_const_lv3_2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_i_26_reg_530 <= grp_nbreadreq_fu_128_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln886_fu_392_p2 <= std_logic_vector(unsigned(ap_phi_mux_randomValue_V_loc_2_i_phi_fu_195_p14) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, inputIpAddress_empty_n, dhcpEnable_empty_n, dhcp_replyMetaFifo_empty_n, ap_predicate_op20_read_state1, ap_predicate_op43_read_state1, ap_predicate_op73_read_state1, portOpen_empty_n, ap_predicate_op81_read_state1, ap_done_reg, dhcp_requestMetaFifo_full_n, ap_predicate_op112_write_state2, ap_predicate_op116_write_state2)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op116_write_state2 = ap_const_boolean_1) and (dhcp_requestMetaFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op112_write_state2 = ap_const_boolean_1) and (dhcp_requestMetaFifo_full_n = ap_const_logic_0)))) or ((ap_start = ap_const_logic_1) and ((dhcpEnable_empty_n = ap_const_logic_0) or (inputIpAddress_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ap_predicate_op81_read_state1 = ap_const_boolean_1) and (portOpen_empty_n = ap_const_logic_0)) or ((ap_predicate_op73_read_state1 = ap_const_boolean_1) and (dhcp_replyMetaFifo_empty_n = ap_const_logic_0)) or ((ap_predicate_op43_read_state1 = ap_const_boolean_1) and (dhcp_replyMetaFifo_empty_n = ap_const_logic_0)) or ((ap_predicate_op20_read_state1 = ap_const_boolean_1) and (dhcp_replyMetaFifo_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, inputIpAddress_empty_n, dhcpEnable_empty_n, dhcp_replyMetaFifo_empty_n, ap_predicate_op20_read_state1, ap_predicate_op43_read_state1, ap_predicate_op73_read_state1, portOpen_empty_n, ap_predicate_op81_read_state1, ap_done_reg, dhcp_requestMetaFifo_full_n, ap_predicate_op112_write_state2, ap_predicate_op116_write_state2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op116_write_state2 = ap_const_boolean_1) and (dhcp_requestMetaFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op112_write_state2 = ap_const_boolean_1) and (dhcp_requestMetaFifo_full_n = ap_const_logic_0)))) or ((ap_start = ap_const_logic_1) and ((dhcpEnable_empty_n = ap_const_logic_0) or (inputIpAddress_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ap_predicate_op81_read_state1 = ap_const_boolean_1) and (portOpen_empty_n = ap_const_logic_0)) or ((ap_predicate_op73_read_state1 = ap_const_boolean_1) and (dhcp_replyMetaFifo_empty_n = ap_const_logic_0)) or ((ap_predicate_op43_read_state1 = ap_const_boolean_1) and (dhcp_replyMetaFifo_empty_n = ap_const_logic_0)) or ((ap_predicate_op20_read_state1 = ap_const_boolean_1) and (dhcp_replyMetaFifo_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, inputIpAddress_empty_n, dhcpEnable_empty_n, dhcp_replyMetaFifo_empty_n, ap_predicate_op20_read_state1, ap_predicate_op43_read_state1, ap_predicate_op73_read_state1, portOpen_empty_n, ap_predicate_op81_read_state1, ap_done_reg, dhcp_requestMetaFifo_full_n, ap_predicate_op112_write_state2, ap_predicate_op116_write_state2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op116_write_state2 = ap_const_boolean_1) and (dhcp_requestMetaFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op112_write_state2 = ap_const_boolean_1) and (dhcp_requestMetaFifo_full_n = ap_const_logic_0)))) or ((ap_start = ap_const_logic_1) and ((dhcpEnable_empty_n = ap_const_logic_0) or (inputIpAddress_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ap_predicate_op81_read_state1 = ap_const_boolean_1) and (portOpen_empty_n = ap_const_logic_0)) or ((ap_predicate_op73_read_state1 = ap_const_boolean_1) and (dhcp_replyMetaFifo_empty_n = ap_const_logic_0)) or ((ap_predicate_op43_read_state1 = ap_const_boolean_1) and (dhcp_replyMetaFifo_empty_n = ap_const_logic_0)) or ((ap_predicate_op20_read_state1 = ap_const_boolean_1) and (dhcp_replyMetaFifo_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(inputIpAddress_empty_n, dhcpEnable_empty_n, dhcp_replyMetaFifo_empty_n, ap_predicate_op20_read_state1, ap_predicate_op43_read_state1, ap_predicate_op73_read_state1, portOpen_empty_n, ap_predicate_op81_read_state1, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((dhcpEnable_empty_n = ap_const_logic_0) or (inputIpAddress_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or ((ap_predicate_op81_read_state1 = ap_const_boolean_1) and (portOpen_empty_n = ap_const_logic_0)) or ((ap_predicate_op73_read_state1 = ap_const_boolean_1) and (dhcp_replyMetaFifo_empty_n = ap_const_logic_0)) or ((ap_predicate_op43_read_state1 = ap_const_boolean_1) and (dhcp_replyMetaFifo_empty_n = ap_const_logic_0)) or ((ap_predicate_op20_read_state1 = ap_const_boolean_1) and (dhcp_replyMetaFifo_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(dhcp_requestMetaFifo_full_n, ap_predicate_op112_write_state2, ap_predicate_op116_write_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((ap_predicate_op116_write_state2 = ap_const_boolean_1) and (dhcp_requestMetaFifo_full_n = ap_const_logic_0)) or ((ap_predicate_op112_write_state2 = ap_const_boolean_1) and (dhcp_requestMetaFifo_full_n = ap_const_logic_0)));
    end process;


    ap_condition_205_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_205 <= ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_213_assign_proc : process(grp_nbreadreq_fu_128_p3, state, icmp_ln1065_8_fu_271_p2)
    begin
                ap_condition_213 <= ((grp_nbreadreq_fu_128_p3 = ap_const_lv1_1) and (state = ap_const_lv3_3) and (icmp_ln1065_8_fu_271_p2 = ap_const_lv1_1));
    end process;


    ap_condition_222_assign_proc : process(grp_nbreadreq_fu_128_p3, state, icmp_ln1065_6_fu_315_p2)
    begin
                ap_condition_222 <= ((grp_nbreadreq_fu_128_p3 = ap_const_lv1_1) and (state = ap_const_lv3_2) and (icmp_ln1065_6_fu_315_p2 = ap_const_lv1_1));
    end process;


    ap_condition_254_assign_proc : process(state, dhcpEnable_read_read_fu_122_p2, grp_fu_211_p2)
    begin
                ap_condition_254 <= ((state = ap_const_lv3_1) and (grp_fu_211_p2 = ap_const_lv1_1) and (dhcpEnable_read_read_fu_122_p2 = ap_const_lv1_1));
    end process;


    ap_condition_298_assign_proc : process(grp_nbreadreq_fu_128_p3, state, grp_fu_211_p2)
    begin
                ap_condition_298 <= ((grp_nbreadreq_fu_128_p3 = ap_const_lv1_0) and (state = ap_const_lv3_3) and (grp_fu_211_p2 = ap_const_lv1_1));
    end process;


    ap_condition_303_assign_proc : process(grp_nbreadreq_fu_128_p3, state, grp_fu_211_p2)
    begin
                ap_condition_303 <= ((grp_nbreadreq_fu_128_p3 = ap_const_lv1_0) and (state = ap_const_lv3_2) and (grp_fu_211_p2 = ap_const_lv1_1));
    end process;


    ap_condition_343_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_01001)
    begin
                ap_condition_343 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001));
    end process;


    ap_condition_95_assign_proc : process(tmp_i_nbreadreq_fu_142_p3, state)
    begin
                ap_condition_95 <= (not((state = ap_const_lv3_1)) and not((state = ap_const_lv3_4)) and not((state = ap_const_lv3_2)) and not((state = ap_const_lv3_3)) and (tmp_i_nbreadreq_fu_142_p3 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_randomValue_V_loc_2_i_phi_fu_195_p14_assign_proc : process(state, randomValue_V, dhcpEnable_read_read_fu_122_p2, grp_fu_211_p2, ap_phi_reg_pp0_iter0_randomValue_V_loc_2_i_reg_192, xor_ln232_fu_361_p2)
    begin
        if (((state = ap_const_lv3_1) and (grp_fu_211_p2 = ap_const_lv1_1) and (dhcpEnable_read_read_fu_122_p2 = ap_const_lv1_1))) then 
            ap_phi_mux_randomValue_V_loc_2_i_phi_fu_195_p14 <= xor_ln232_fu_361_p2;
        elsif (((state = ap_const_lv3_4) or (state = ap_const_lv3_2) or (state = ap_const_lv3_3) or (not((state = ap_const_lv3_1)) and not((state = ap_const_lv3_4)) and not((state = ap_const_lv3_2)) and not((state = ap_const_lv3_3))) or ((state = ap_const_lv3_1) and (grp_fu_211_p2 = ap_const_lv1_0) and (dhcpEnable_read_read_fu_122_p2 = ap_const_lv1_1)) or ((state = ap_const_lv3_1) and (dhcpEnable_read_read_fu_122_p2 = ap_const_lv1_0)))) then 
            ap_phi_mux_randomValue_V_loc_2_i_phi_fu_195_p14 <= randomValue_V;
        else 
            ap_phi_mux_randomValue_V_loc_2_i_phi_fu_195_p14 <= ap_phi_reg_pp0_iter0_randomValue_V_loc_2_i_reg_192;
        end if; 
    end process;


    ap_phi_mux_storemerge1_i_phi_fu_184_p4_assign_proc : process(icmp_ln1065_10_fu_321_p2, ap_phi_reg_pp0_iter0_storemerge1_i_reg_181, ap_condition_222)
    begin
        if ((ap_const_boolean_1 = ap_condition_222)) then
            if ((icmp_ln1065_10_fu_321_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge1_i_phi_fu_184_p4 <= ap_const_lv2_1;
            elsif ((icmp_ln1065_10_fu_321_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge1_i_phi_fu_184_p4 <= ap_const_lv2_3;
            else 
                ap_phi_mux_storemerge1_i_phi_fu_184_p4 <= ap_phi_reg_pp0_iter0_storemerge1_i_reg_181;
            end if;
        else 
            ap_phi_mux_storemerge1_i_phi_fu_184_p4 <= ap_phi_reg_pp0_iter0_storemerge1_i_reg_181;
        end if; 
    end process;


    ap_phi_mux_storemerge_i_phi_fu_173_p4_assign_proc : process(icmp_ln1065_11_fu_277_p2, ap_phi_reg_pp0_iter0_storemerge_i_reg_170, ap_condition_213)
    begin
        if ((ap_const_boolean_1 = ap_condition_213)) then
            if ((icmp_ln1065_11_fu_277_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge_i_phi_fu_173_p4 <= ap_const_lv3_1;
            elsif ((icmp_ln1065_11_fu_277_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge_i_phi_fu_173_p4 <= ap_const_lv3_4;
            else 
                ap_phi_mux_storemerge_i_phi_fu_173_p4 <= ap_phi_reg_pp0_iter0_storemerge_i_reg_170;
            end if;
        else 
            ap_phi_mux_storemerge_i_phi_fu_173_p4 <= ap_phi_reg_pp0_iter0_storemerge_i_reg_170;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_randomValue_V_loc_2_i_reg_192 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_storemerge1_i_reg_181 <= "XX";
    ap_phi_reg_pp0_iter0_storemerge_i_reg_170 <= "XXX";

    ap_predicate_op112_write_state2_assign_proc : process(state_load_reg_500, tmp_i_26_reg_530, icmp_ln1065_6_reg_543, icmp_ln1065_10_reg_547)
    begin
                ap_predicate_op112_write_state2 <= ((icmp_ln1065_10_reg_547 = ap_const_lv1_1) and (icmp_ln1065_6_reg_543 = ap_const_lv1_1) and (tmp_i_26_reg_530 = ap_const_lv1_1) and (state_load_reg_500 = ap_const_lv3_2));
    end process;


    ap_predicate_op116_write_state2_assign_proc : process(state_load_reg_500, dhcpEnable_read_reg_496, icmp_ln1065_reg_551)
    begin
                ap_predicate_op116_write_state2 <= ((icmp_ln1065_reg_551 = ap_const_lv1_1) and (dhcpEnable_read_reg_496 = ap_const_lv1_1) and (state_load_reg_500 = ap_const_lv3_1));
    end process;


    ap_predicate_op20_read_state1_assign_proc : process(grp_nbreadreq_fu_128_p3, state)
    begin
                ap_predicate_op20_read_state1 <= ((grp_nbreadreq_fu_128_p3 = ap_const_lv1_1) and (state = ap_const_lv3_3));
    end process;


    ap_predicate_op43_read_state1_assign_proc : process(grp_nbreadreq_fu_128_p3, state)
    begin
                ap_predicate_op43_read_state1 <= ((grp_nbreadreq_fu_128_p3 = ap_const_lv1_1) and (state = ap_const_lv3_2));
    end process;


    ap_predicate_op73_read_state1_assign_proc : process(grp_nbreadreq_fu_128_p3, state)
    begin
                ap_predicate_op73_read_state1 <= ((grp_nbreadreq_fu_128_p3 = ap_const_lv1_1) and (state = ap_const_lv3_4));
    end process;


    ap_predicate_op81_read_state1_assign_proc : process(tmp_i_nbreadreq_fu_142_p3, state)
    begin
                ap_predicate_op81_read_state1 <= (not((state = ap_const_lv3_1)) and not((state = ap_const_lv3_4)) and not((state = ap_const_lv3_2)) and not((state = ap_const_lv3_3)) and (tmp_i_nbreadreq_fu_142_p3 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    dhcpEnable_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, dhcpEnable_empty_n, ap_done_reg, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_done_reg = ap_const_logic_0))) then 
            dhcpEnable_blk_n <= dhcpEnable_empty_n;
        else 
            dhcpEnable_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dhcpEnable_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dhcpEnable_read <= ap_const_logic_1;
        else 
            dhcpEnable_read <= ap_const_logic_0;
        end if; 
    end process;

    dhcpEnable_read_read_fu_122_p2 <= dhcpEnable_dout;

    dhcpIpAddressOut_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, myIpAddress_V, ap_block_pp0_stage0_01001, dhcpIpAddressOut_preg)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            dhcpIpAddressOut <= myIpAddress_V;
        else 
            dhcpIpAddressOut <= dhcpIpAddressOut_preg;
        end if; 
    end process;


    dhcpIpAddressOut_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dhcpIpAddressOut_ap_vld <= ap_const_logic_1;
        else 
            dhcpIpAddressOut_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dhcp_replyMetaFifo_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, dhcp_replyMetaFifo_empty_n, ap_predicate_op20_read_state1, ap_predicate_op43_read_state1, ap_predicate_op73_read_state1, ap_done_reg, ap_block_pp0_stage0)
    begin
        if ((((ap_predicate_op73_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_done_reg = ap_const_logic_0)) or ((ap_predicate_op43_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_done_reg = ap_const_logic_0)) or ((ap_predicate_op20_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_done_reg = ap_const_logic_0)))) then 
            dhcp_replyMetaFifo_blk_n <= dhcp_replyMetaFifo_empty_n;
        else 
            dhcp_replyMetaFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dhcp_replyMetaFifo_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op20_read_state1, ap_predicate_op43_read_state1, ap_predicate_op73_read_state1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_predicate_op73_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_predicate_op43_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_predicate_op20_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            dhcp_replyMetaFifo_read <= ap_const_logic_1;
        else 
            dhcp_replyMetaFifo_read <= ap_const_logic_0;
        end if; 
    end process;


    dhcp_requestMetaFifo_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, dhcp_requestMetaFifo_full_n, ap_predicate_op112_write_state2, ap_predicate_op116_write_state2, ap_block_pp0_stage0)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op116_write_state2 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op112_write_state2 = ap_const_boolean_1)))) then 
            dhcp_requestMetaFifo_blk_n <= dhcp_requestMetaFifo_full_n;
        else 
            dhcp_requestMetaFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dhcp_requestMetaFifo_din_assign_proc : process(ap_predicate_op112_write_state2, ap_predicate_op116_write_state2, p_s_fu_458_p4, zext_ln174_fu_480_p1, ap_condition_343)
    begin
        if ((ap_const_boolean_1 = ap_condition_343)) then
            if ((ap_predicate_op116_write_state2 = ap_const_boolean_1)) then 
                dhcp_requestMetaFifo_din <= zext_ln174_fu_480_p1;
            elsif ((ap_predicate_op112_write_state2 = ap_const_boolean_1)) then 
                dhcp_requestMetaFifo_din <= p_s_fu_458_p4;
            else 
                dhcp_requestMetaFifo_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            dhcp_requestMetaFifo_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dhcp_requestMetaFifo_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op112_write_state2, ap_predicate_op116_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op116_write_state2 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op112_write_state2 = ap_const_boolean_1)))) then 
            dhcp_requestMetaFifo_write <= ap_const_logic_1;
        else 
            dhcp_requestMetaFifo_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_211_p2 <= "1" when (time_V = ap_const_lv32_0) else "0";
    grp_fu_216_p2 <= std_logic_vector(unsigned(time_V) + unsigned(ap_const_lv32_FFFFFFFF));
    grp_fu_221_p4 <= dhcp_replyMetaFifo_dout(103 downto 96);
    grp_nbreadreq_fu_128_p3 <= (0=>(dhcp_replyMetaFifo_empty_n), others=>'-');
    icmp_ln1065_10_fu_321_p2 <= "1" when (grp_fu_221_p4 = ap_const_lv8_2) else "0";
    icmp_ln1065_11_fu_277_p2 <= "1" when (grp_fu_221_p4 = ap_const_lv8_5) else "0";
    icmp_ln1065_6_fu_315_p2 <= "1" when (reply_identifier_V_fu_301_p1 = myIdentity_V) else "0";
    icmp_ln1065_8_fu_271_p2 <= "1" when (reply_identifier_V_1_fu_267_p1 = myIdentity_V) else "0";

    inputIpAddress_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, inputIpAddress_empty_n, ap_done_reg, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_done_reg = ap_const_logic_0))) then 
            inputIpAddress_blk_n <= inputIpAddress_empty_n;
        else 
            inputIpAddress_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inputIpAddress_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            inputIpAddress_read <= ap_const_logic_1;
        else 
            inputIpAddress_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln174_8_i_fu_424_p4 <= ((reply_assignedIpAddress_V_reg_537 & ap_const_lv32_0) & myIdentity_V_load_reg_509);
    or_ln174_fu_432_p2 <= (or_ln174_8_i_fu_424_p4 or ap_const_lv96_300000000);
    p_s_fu_458_p4 <= ((tmp_7_i8_fu_448_p4 & tmp_6_i7_fu_438_p4) & myIdentity_V_load_reg_509);

    portOpen_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, portOpen_empty_n, ap_predicate_op81_read_state1, ap_done_reg, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op81_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_done_reg = ap_const_logic_0))) then 
            portOpen_blk_n <= portOpen_empty_n;
        else 
            portOpen_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    portOpen_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op81_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op81_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            portOpen_read <= ap_const_logic_1;
        else 
            portOpen_read <= ap_const_logic_0;
        end if; 
    end process;

    reply_identifier_V_1_fu_267_p1 <= dhcp_replyMetaFifo_dout(32 - 1 downto 0);
    reply_identifier_V_fu_301_p1 <= dhcp_replyMetaFifo_dout(32 - 1 downto 0);
    shl_ln232_fu_355_p2 <= std_logic_vector(shift_left(unsigned(randomValue_V),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    tmp_6_i7_fu_438_p4 <= or_ln174_fu_432_p2(39 downto 32);
    tmp_7_i8_fu_448_p4 <= or_ln174_fu_432_p2(95 downto 64);
    tmp_i_nbreadreq_fu_142_p3 <= (0=>(portOpen_empty_n), others=>'-');
    xor_ln232_fu_361_p2 <= (shl_ln232_fu_355_p2 xor randomValue_V);
    zext_ln174_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln_fu_473_p3),72));
    zext_ln290_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_storemerge1_i_phi_fu_184_p4),3));
    zext_ln_fu_473_p3 <= (ap_const_lv1_1 & randomValue_V_load_reg_504);
end behav;
