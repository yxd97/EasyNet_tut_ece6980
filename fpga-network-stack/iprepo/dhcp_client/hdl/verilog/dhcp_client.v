// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dhcp_client_dhcp_client,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.200000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=2.601714,HLS_SYN_LAT=7,HLS_SYN_TPT=2,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=671,HLS_SYN_LUT=1495,HLS_VERSION=2022_1}" *)

module dhcp_client (
        m_axis_open_port_TDATA,
        s_axis_open_port_status_TDATA,
        s_axis_rx_metadata_TDATA,
        s_axis_rx_data_TDATA,
        s_axis_rx_data_TKEEP,
        s_axis_rx_data_TSTRB,
        s_axis_rx_data_TLAST,
        m_axis_tx_metadata_TDATA,
        m_axis_tx_length_TDATA,
        m_axis_tx_data_TDATA,
        m_axis_tx_data_TKEEP,
        m_axis_tx_data_TSTRB,
        m_axis_tx_data_TLAST,
        dhcpEnable,
        inputIpAddress,
        dhcpIpAddressOut,
        myMacAddress,
        ap_clk,
        ap_rst_n,
        m_axis_open_port_TVALID,
        m_axis_open_port_TREADY,
        s_axis_open_port_status_TVALID,
        s_axis_open_port_status_TREADY,
        s_axis_rx_metadata_TVALID,
        s_axis_rx_metadata_TREADY,
        s_axis_rx_data_TVALID,
        s_axis_rx_data_TREADY,
        m_axis_tx_metadata_TVALID,
        m_axis_tx_metadata_TREADY,
        m_axis_tx_length_TVALID,
        m_axis_tx_length_TREADY,
        m_axis_tx_data_TVALID,
        m_axis_tx_data_TREADY
);


output  [15:0] m_axis_open_port_TDATA;
input  [7:0] s_axis_open_port_status_TDATA;
input  [127:0] s_axis_rx_metadata_TDATA;
input  [63:0] s_axis_rx_data_TDATA;
input  [7:0] s_axis_rx_data_TKEEP;
input  [7:0] s_axis_rx_data_TSTRB;
input  [0:0] s_axis_rx_data_TLAST;
output  [95:0] m_axis_tx_metadata_TDATA;
output  [15:0] m_axis_tx_length_TDATA;
output  [63:0] m_axis_tx_data_TDATA;
output  [7:0] m_axis_tx_data_TKEEP;
output  [7:0] m_axis_tx_data_TSTRB;
output  [0:0] m_axis_tx_data_TLAST;
input  [0:0] dhcpEnable;
input  [31:0] inputIpAddress;
output  [31:0] dhcpIpAddressOut;
input  [47:0] myMacAddress;
input   ap_clk;
input   ap_rst_n;
output   m_axis_open_port_TVALID;
input   m_axis_open_port_TREADY;
input   s_axis_open_port_status_TVALID;
output   s_axis_open_port_status_TREADY;
input   s_axis_rx_metadata_TVALID;
output   s_axis_rx_metadata_TREADY;
input   s_axis_rx_data_TVALID;
output   s_axis_rx_data_TREADY;
output   m_axis_tx_metadata_TVALID;
input   m_axis_tx_metadata_TREADY;
output   m_axis_tx_length_TVALID;
input   m_axis_tx_length_TREADY;
output   m_axis_tx_data_TVALID;
input   m_axis_tx_data_TREADY;

 reg    ap_rst_n_inv;
wire    entry_proc_U0_ap_start;
wire    entry_proc_U0_ap_done;
wire    entry_proc_U0_ap_continue;
wire    entry_proc_U0_ap_idle;
wire    entry_proc_U0_ap_ready;
wire   [0:0] entry_proc_U0_dhcpEnable_c_din;
wire    entry_proc_U0_dhcpEnable_c_write;
wire   [31:0] entry_proc_U0_inputIpAddress_c_din;
wire    entry_proc_U0_inputIpAddress_c_write;
wire    open_dhcp_port_U0_ap_start;
wire    open_dhcp_port_U0_ap_done;
wire    open_dhcp_port_U0_ap_continue;
wire    open_dhcp_port_U0_ap_idle;
wire    open_dhcp_port_U0_ap_ready;
wire   [15:0] open_dhcp_port_U0_m_axis_open_port_TDATA;
wire    open_dhcp_port_U0_m_axis_open_port_TVALID;
wire    open_dhcp_port_U0_s_axis_open_port_status_TREADY;
wire   [0:0] open_dhcp_port_U0_portOpen_din;
wire    open_dhcp_port_U0_portOpen_write;
wire    receive_message_U0_ap_start;
wire    receive_message_U0_ap_done;
wire    receive_message_U0_ap_continue;
wire    receive_message_U0_ap_idle;
wire    receive_message_U0_ap_ready;
wire   [47:0] receive_message_U0_myMacAddress_c_din;
wire    receive_message_U0_myMacAddress_c_write;
wire   [103:0] receive_message_U0_dhcp_replyMetaFifo_din;
wire    receive_message_U0_dhcp_replyMetaFifo_write;
wire    receive_message_U0_s_axis_rx_metadata_TREADY;
wire    receive_message_U0_s_axis_rx_data_TREADY;
wire    dhcp_fsm_U0_ap_start;
wire    dhcp_fsm_U0_ap_done;
wire    dhcp_fsm_U0_ap_continue;
wire    dhcp_fsm_U0_ap_idle;
wire    dhcp_fsm_U0_ap_ready;
wire    dhcp_fsm_U0_inputIpAddress_read;
wire    dhcp_fsm_U0_dhcpEnable_read;
wire    dhcp_fsm_U0_dhcp_replyMetaFifo_read;
wire    dhcp_fsm_U0_portOpen_read;
wire   [71:0] dhcp_fsm_U0_dhcp_requestMetaFifo_din;
wire    dhcp_fsm_U0_dhcp_requestMetaFifo_write;
wire   [31:0] dhcp_fsm_U0_dhcpIpAddressOut;
wire    dhcp_fsm_U0_dhcpIpAddressOut_ap_vld;
wire    send_message_U0_ap_start;
wire    send_message_U0_ap_done;
wire    send_message_U0_ap_continue;
wire    send_message_U0_ap_idle;
wire    send_message_U0_ap_ready;
wire    send_message_U0_dhcp_requestMetaFifo_read;
wire    send_message_U0_myMacAddress_read;
wire   [95:0] send_message_U0_m_axis_tx_metadata_TDATA;
wire    send_message_U0_m_axis_tx_metadata_TVALID;
wire   [15:0] send_message_U0_m_axis_tx_length_TDATA;
wire    send_message_U0_m_axis_tx_length_TVALID;
wire   [63:0] send_message_U0_m_axis_tx_data_TDATA;
wire    send_message_U0_m_axis_tx_data_TVALID;
wire   [7:0] send_message_U0_m_axis_tx_data_TKEEP;
wire   [7:0] send_message_U0_m_axis_tx_data_TSTRB;
wire   [0:0] send_message_U0_m_axis_tx_data_TLAST;
wire    dhcpEnable_c_full_n;
wire   [0:0] dhcpEnable_c_dout;
wire   [2:0] dhcpEnable_c_num_data_valid;
wire   [2:0] dhcpEnable_c_fifo_cap;
wire    dhcpEnable_c_empty_n;
wire    inputIpAddress_c_full_n;
wire   [31:0] inputIpAddress_c_dout;
wire   [2:0] inputIpAddress_c_num_data_valid;
wire   [2:0] inputIpAddress_c_fifo_cap;
wire    inputIpAddress_c_empty_n;
wire    portOpen_full_n;
wire   [0:0] portOpen_dout;
wire   [1:0] portOpen_num_data_valid;
wire   [1:0] portOpen_fifo_cap;
wire    portOpen_empty_n;
wire    myMacAddress_c_full_n;
wire   [47:0] myMacAddress_c_dout;
wire   [2:0] myMacAddress_c_num_data_valid;
wire   [2:0] myMacAddress_c_fifo_cap;
wire    myMacAddress_c_empty_n;
wire    dhcp_replyMetaFifo_full_n;
wire   [103:0] dhcp_replyMetaFifo_dout;
wire   [2:0] dhcp_replyMetaFifo_num_data_valid;
wire   [2:0] dhcp_replyMetaFifo_fifo_cap;
wire    dhcp_replyMetaFifo_empty_n;
wire    dhcp_requestMetaFifo_full_n;
wire   [71:0] dhcp_requestMetaFifo_dout;
wire   [2:0] dhcp_requestMetaFifo_num_data_valid;
wire   [2:0] dhcp_requestMetaFifo_fifo_cap;
wire    dhcp_requestMetaFifo_empty_n;

dhcp_client_entry_proc entry_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(entry_proc_U0_ap_start),
    .ap_done(entry_proc_U0_ap_done),
    .ap_continue(entry_proc_U0_ap_continue),
    .ap_idle(entry_proc_U0_ap_idle),
    .ap_ready(entry_proc_U0_ap_ready),
    .dhcpEnable(dhcpEnable),
    .dhcpEnable_c_din(entry_proc_U0_dhcpEnable_c_din),
    .dhcpEnable_c_num_data_valid(dhcpEnable_c_num_data_valid),
    .dhcpEnable_c_fifo_cap(dhcpEnable_c_fifo_cap),
    .dhcpEnable_c_full_n(dhcpEnable_c_full_n),
    .dhcpEnable_c_write(entry_proc_U0_dhcpEnable_c_write),
    .inputIpAddress(inputIpAddress),
    .inputIpAddress_c_din(entry_proc_U0_inputIpAddress_c_din),
    .inputIpAddress_c_num_data_valid(inputIpAddress_c_num_data_valid),
    .inputIpAddress_c_fifo_cap(inputIpAddress_c_fifo_cap),
    .inputIpAddress_c_full_n(inputIpAddress_c_full_n),
    .inputIpAddress_c_write(entry_proc_U0_inputIpAddress_c_write)
);

dhcp_client_open_dhcp_port open_dhcp_port_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(open_dhcp_port_U0_ap_start),
    .ap_done(open_dhcp_port_U0_ap_done),
    .ap_continue(open_dhcp_port_U0_ap_continue),
    .ap_idle(open_dhcp_port_U0_ap_idle),
    .ap_ready(open_dhcp_port_U0_ap_ready),
    .m_axis_open_port_TREADY(m_axis_open_port_TREADY),
    .s_axis_open_port_status_TVALID(s_axis_open_port_status_TVALID),
    .m_axis_open_port_TDATA(open_dhcp_port_U0_m_axis_open_port_TDATA),
    .m_axis_open_port_TVALID(open_dhcp_port_U0_m_axis_open_port_TVALID),
    .s_axis_open_port_status_TDATA(s_axis_open_port_status_TDATA),
    .s_axis_open_port_status_TREADY(open_dhcp_port_U0_s_axis_open_port_status_TREADY),
    .portOpen_din(open_dhcp_port_U0_portOpen_din),
    .portOpen_num_data_valid(portOpen_num_data_valid),
    .portOpen_fifo_cap(portOpen_fifo_cap),
    .portOpen_full_n(portOpen_full_n),
    .portOpen_write(open_dhcp_port_U0_portOpen_write)
);

dhcp_client_receive_message receive_message_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(receive_message_U0_ap_start),
    .ap_done(receive_message_U0_ap_done),
    .ap_continue(receive_message_U0_ap_continue),
    .ap_idle(receive_message_U0_ap_idle),
    .ap_ready(receive_message_U0_ap_ready),
    .myMacAddress_c_din(receive_message_U0_myMacAddress_c_din),
    .myMacAddress_c_num_data_valid(myMacAddress_c_num_data_valid),
    .myMacAddress_c_fifo_cap(myMacAddress_c_fifo_cap),
    .myMacAddress_c_full_n(myMacAddress_c_full_n),
    .myMacAddress_c_write(receive_message_U0_myMacAddress_c_write),
    .s_axis_rx_data_TVALID(s_axis_rx_data_TVALID),
    .s_axis_rx_metadata_TVALID(s_axis_rx_metadata_TVALID),
    .dhcp_replyMetaFifo_din(receive_message_U0_dhcp_replyMetaFifo_din),
    .dhcp_replyMetaFifo_num_data_valid(dhcp_replyMetaFifo_num_data_valid),
    .dhcp_replyMetaFifo_fifo_cap(dhcp_replyMetaFifo_fifo_cap),
    .dhcp_replyMetaFifo_full_n(dhcp_replyMetaFifo_full_n),
    .dhcp_replyMetaFifo_write(receive_message_U0_dhcp_replyMetaFifo_write),
    .s_axis_rx_metadata_TDATA(s_axis_rx_metadata_TDATA),
    .s_axis_rx_metadata_TREADY(receive_message_U0_s_axis_rx_metadata_TREADY),
    .s_axis_rx_data_TDATA(s_axis_rx_data_TDATA),
    .s_axis_rx_data_TREADY(receive_message_U0_s_axis_rx_data_TREADY),
    .s_axis_rx_data_TKEEP(s_axis_rx_data_TKEEP),
    .s_axis_rx_data_TSTRB(s_axis_rx_data_TSTRB),
    .s_axis_rx_data_TLAST(s_axis_rx_data_TLAST),
    .myMacAddress(myMacAddress)
);

dhcp_client_dhcp_fsm dhcp_fsm_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(dhcp_fsm_U0_ap_start),
    .ap_done(dhcp_fsm_U0_ap_done),
    .ap_continue(dhcp_fsm_U0_ap_continue),
    .ap_idle(dhcp_fsm_U0_ap_idle),
    .ap_ready(dhcp_fsm_U0_ap_ready),
    .inputIpAddress_dout(inputIpAddress_c_dout),
    .inputIpAddress_num_data_valid(inputIpAddress_c_num_data_valid),
    .inputIpAddress_fifo_cap(inputIpAddress_c_fifo_cap),
    .inputIpAddress_empty_n(inputIpAddress_c_empty_n),
    .inputIpAddress_read(dhcp_fsm_U0_inputIpAddress_read),
    .dhcpEnable_dout(dhcpEnable_c_dout),
    .dhcpEnable_num_data_valid(dhcpEnable_c_num_data_valid),
    .dhcpEnable_fifo_cap(dhcpEnable_c_fifo_cap),
    .dhcpEnable_empty_n(dhcpEnable_c_empty_n),
    .dhcpEnable_read(dhcp_fsm_U0_dhcpEnable_read),
    .dhcp_replyMetaFifo_dout(dhcp_replyMetaFifo_dout),
    .dhcp_replyMetaFifo_num_data_valid(dhcp_replyMetaFifo_num_data_valid),
    .dhcp_replyMetaFifo_fifo_cap(dhcp_replyMetaFifo_fifo_cap),
    .dhcp_replyMetaFifo_empty_n(dhcp_replyMetaFifo_empty_n),
    .dhcp_replyMetaFifo_read(dhcp_fsm_U0_dhcp_replyMetaFifo_read),
    .portOpen_dout(portOpen_dout),
    .portOpen_num_data_valid(portOpen_num_data_valid),
    .portOpen_fifo_cap(portOpen_fifo_cap),
    .portOpen_empty_n(portOpen_empty_n),
    .portOpen_read(dhcp_fsm_U0_portOpen_read),
    .dhcp_requestMetaFifo_din(dhcp_fsm_U0_dhcp_requestMetaFifo_din),
    .dhcp_requestMetaFifo_num_data_valid(dhcp_requestMetaFifo_num_data_valid),
    .dhcp_requestMetaFifo_fifo_cap(dhcp_requestMetaFifo_fifo_cap),
    .dhcp_requestMetaFifo_full_n(dhcp_requestMetaFifo_full_n),
    .dhcp_requestMetaFifo_write(dhcp_fsm_U0_dhcp_requestMetaFifo_write),
    .dhcpIpAddressOut(dhcp_fsm_U0_dhcpIpAddressOut),
    .dhcpIpAddressOut_ap_vld(dhcp_fsm_U0_dhcpIpAddressOut_ap_vld)
);

dhcp_client_send_message send_message_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(send_message_U0_ap_start),
    .ap_done(send_message_U0_ap_done),
    .ap_continue(send_message_U0_ap_continue),
    .ap_idle(send_message_U0_ap_idle),
    .ap_ready(send_message_U0_ap_ready),
    .dhcp_requestMetaFifo_dout(dhcp_requestMetaFifo_dout),
    .dhcp_requestMetaFifo_num_data_valid(dhcp_requestMetaFifo_num_data_valid),
    .dhcp_requestMetaFifo_fifo_cap(dhcp_requestMetaFifo_fifo_cap),
    .dhcp_requestMetaFifo_empty_n(dhcp_requestMetaFifo_empty_n),
    .dhcp_requestMetaFifo_read(send_message_U0_dhcp_requestMetaFifo_read),
    .myMacAddress_dout(myMacAddress_c_dout),
    .myMacAddress_num_data_valid(myMacAddress_c_num_data_valid),
    .myMacAddress_fifo_cap(myMacAddress_c_fifo_cap),
    .myMacAddress_empty_n(myMacAddress_c_empty_n),
    .myMacAddress_read(send_message_U0_myMacAddress_read),
    .m_axis_tx_data_TREADY(m_axis_tx_data_TREADY),
    .m_axis_tx_metadata_TREADY(m_axis_tx_metadata_TREADY),
    .m_axis_tx_length_TREADY(m_axis_tx_length_TREADY),
    .m_axis_tx_metadata_TDATA(send_message_U0_m_axis_tx_metadata_TDATA),
    .m_axis_tx_metadata_TVALID(send_message_U0_m_axis_tx_metadata_TVALID),
    .m_axis_tx_length_TDATA(send_message_U0_m_axis_tx_length_TDATA),
    .m_axis_tx_length_TVALID(send_message_U0_m_axis_tx_length_TVALID),
    .m_axis_tx_data_TDATA(send_message_U0_m_axis_tx_data_TDATA),
    .m_axis_tx_data_TVALID(send_message_U0_m_axis_tx_data_TVALID),
    .m_axis_tx_data_TKEEP(send_message_U0_m_axis_tx_data_TKEEP),
    .m_axis_tx_data_TSTRB(send_message_U0_m_axis_tx_data_TSTRB),
    .m_axis_tx_data_TLAST(send_message_U0_m_axis_tx_data_TLAST)
);

dhcp_client_fifo_w1_d3_S dhcpEnable_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_dhcpEnable_c_din),
    .if_full_n(dhcpEnable_c_full_n),
    .if_write(entry_proc_U0_dhcpEnable_c_write),
    .if_dout(dhcpEnable_c_dout),
    .if_num_data_valid(dhcpEnable_c_num_data_valid),
    .if_fifo_cap(dhcpEnable_c_fifo_cap),
    .if_empty_n(dhcpEnable_c_empty_n),
    .if_read(dhcp_fsm_U0_dhcpEnable_read)
);

dhcp_client_fifo_w32_d3_S inputIpAddress_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_inputIpAddress_c_din),
    .if_full_n(inputIpAddress_c_full_n),
    .if_write(entry_proc_U0_inputIpAddress_c_write),
    .if_dout(inputIpAddress_c_dout),
    .if_num_data_valid(inputIpAddress_c_num_data_valid),
    .if_fifo_cap(inputIpAddress_c_fifo_cap),
    .if_empty_n(inputIpAddress_c_empty_n),
    .if_read(dhcp_fsm_U0_inputIpAddress_read)
);

dhcp_client_fifo_w1_d2_S portOpen_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(open_dhcp_port_U0_portOpen_din),
    .if_full_n(portOpen_full_n),
    .if_write(open_dhcp_port_U0_portOpen_write),
    .if_dout(portOpen_dout),
    .if_num_data_valid(portOpen_num_data_valid),
    .if_fifo_cap(portOpen_fifo_cap),
    .if_empty_n(portOpen_empty_n),
    .if_read(dhcp_fsm_U0_portOpen_read)
);

dhcp_client_fifo_w48_d3_S myMacAddress_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(receive_message_U0_myMacAddress_c_din),
    .if_full_n(myMacAddress_c_full_n),
    .if_write(receive_message_U0_myMacAddress_c_write),
    .if_dout(myMacAddress_c_dout),
    .if_num_data_valid(myMacAddress_c_num_data_valid),
    .if_fifo_cap(myMacAddress_c_fifo_cap),
    .if_empty_n(myMacAddress_c_empty_n),
    .if_read(send_message_U0_myMacAddress_read)
);

dhcp_client_fifo_w104_d4_S dhcp_replyMetaFifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(receive_message_U0_dhcp_replyMetaFifo_din),
    .if_full_n(dhcp_replyMetaFifo_full_n),
    .if_write(receive_message_U0_dhcp_replyMetaFifo_write),
    .if_dout(dhcp_replyMetaFifo_dout),
    .if_num_data_valid(dhcp_replyMetaFifo_num_data_valid),
    .if_fifo_cap(dhcp_replyMetaFifo_fifo_cap),
    .if_empty_n(dhcp_replyMetaFifo_empty_n),
    .if_read(dhcp_fsm_U0_dhcp_replyMetaFifo_read)
);

dhcp_client_fifo_w72_d4_S dhcp_requestMetaFifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(dhcp_fsm_U0_dhcp_requestMetaFifo_din),
    .if_full_n(dhcp_requestMetaFifo_full_n),
    .if_write(dhcp_fsm_U0_dhcp_requestMetaFifo_write),
    .if_dout(dhcp_requestMetaFifo_dout),
    .if_num_data_valid(dhcp_requestMetaFifo_num_data_valid),
    .if_fifo_cap(dhcp_requestMetaFifo_fifo_cap),
    .if_empty_n(dhcp_requestMetaFifo_empty_n),
    .if_read(send_message_U0_dhcp_requestMetaFifo_read)
);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign dhcpIpAddressOut = dhcp_fsm_U0_dhcpIpAddressOut;

assign dhcp_fsm_U0_ap_continue = 1'b1;

assign dhcp_fsm_U0_ap_start = 1'b1;

assign entry_proc_U0_ap_continue = 1'b1;

assign entry_proc_U0_ap_start = 1'b1;

assign m_axis_open_port_TDATA = open_dhcp_port_U0_m_axis_open_port_TDATA;

assign m_axis_open_port_TVALID = open_dhcp_port_U0_m_axis_open_port_TVALID;

assign m_axis_tx_data_TDATA = send_message_U0_m_axis_tx_data_TDATA;

assign m_axis_tx_data_TKEEP = send_message_U0_m_axis_tx_data_TKEEP;

assign m_axis_tx_data_TLAST = send_message_U0_m_axis_tx_data_TLAST;

assign m_axis_tx_data_TSTRB = send_message_U0_m_axis_tx_data_TSTRB;

assign m_axis_tx_data_TVALID = send_message_U0_m_axis_tx_data_TVALID;

assign m_axis_tx_length_TDATA = send_message_U0_m_axis_tx_length_TDATA;

assign m_axis_tx_length_TVALID = send_message_U0_m_axis_tx_length_TVALID;

assign m_axis_tx_metadata_TDATA = send_message_U0_m_axis_tx_metadata_TDATA;

assign m_axis_tx_metadata_TVALID = send_message_U0_m_axis_tx_metadata_TVALID;

assign open_dhcp_port_U0_ap_continue = 1'b1;

assign open_dhcp_port_U0_ap_start = 1'b1;

assign receive_message_U0_ap_continue = 1'b1;

assign receive_message_U0_ap_start = 1'b1;

assign s_axis_open_port_status_TREADY = open_dhcp_port_U0_s_axis_open_port_status_TREADY;

assign s_axis_rx_data_TREADY = receive_message_U0_s_axis_rx_data_TREADY;

assign s_axis_rx_metadata_TREADY = receive_message_U0_s_axis_rx_metadata_TREADY;

assign send_message_U0_ap_continue = 1'b1;

assign send_message_U0_ap_start = 1'b1;


reg find_df_deadlock = 0;
// synthesis translate_off
`include "dhcp_client_hls_deadlock_detector.vh"
// synthesis translate_on

reg find_kernel_block = 0;
// synthesis translate_off
`include "dhcp_client_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //dhcp_client

