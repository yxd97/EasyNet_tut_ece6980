// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dhcp_client_open_dhcp_port (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axis_open_port_TREADY,
        s_axis_open_port_status_TVALID,
        m_axis_open_port_TDATA,
        m_axis_open_port_TVALID,
        s_axis_open_port_status_TDATA,
        s_axis_open_port_status_TREADY,
        portOpen_din,
        portOpen_num_data_valid,
        portOpen_fifo_cap,
        portOpen_full_n,
        portOpen_write
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   m_axis_open_port_TREADY;
input   s_axis_open_port_status_TVALID;
output  [15:0] m_axis_open_port_TDATA;
output   m_axis_open_port_TVALID;
input  [7:0] s_axis_open_port_status_TDATA;
output   s_axis_open_port_status_TREADY;
output  [0:0] portOpen_din;
input  [1:0] portOpen_num_data_valid;
input  [1:0] portOpen_fifo_cap;
input   portOpen_full_n;
output   portOpen_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg portOpen_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln1065_reg_139;
reg   [0:0] or_ln46_reg_148;
wire   [0:0] grp_nbwritereq_fu_44_p3;
reg    ap_predicate_op24_write_state2;
wire   [0:0] and_ln50_fu_124_p2;
reg    ap_predicate_op29_read_state2;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_state2_io;
reg    ap_done_reg;
reg    ap_block_pp0_stage1_subdone;
reg   [31:0] openPortWaitTime_V;
reg   [0:0] odp_listenDone;
reg   [0:0] odp_waitListenStatus;
reg    m_axis_open_port_TDATA_blk_n;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_i_reg_152;
reg    s_axis_open_port_status_TDATA_blk_n;
reg    portOpen_blk_n;
reg   [0:0] and_ln50_reg_156;
wire   [0:0] icmp_ln1065_fu_86_p2;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_predicate_op32_write_state3;
reg    ap_predicate_op34_write_state3;
wire    regslice_both_m_axis_open_port_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] odp_waitListenStatus_load_reg_143;
wire   [0:0] or_ln46_fu_112_p2;
reg    ap_block_pp0_stage1_11001;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
wire   [31:0] add_ln887_fu_92_p2;
wire   [0:0] trunc_ln145_fu_129_p1;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] tmp_i_25_nbreadreq_fu_60_p3;
reg    ap_block_pp0_stage0_01001;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
reg    m_axis_open_port_TVALID_int_regslice;
wire    m_axis_open_port_TREADY_int_regslice;
wire    regslice_both_m_axis_open_port_U_vld_out;
wire    regslice_both_s_axis_open_port_status_U_apdone_blk;
wire   [7:0] s_axis_open_port_status_TDATA_int_regslice;
wire    s_axis_open_port_status_TVALID_int_regslice;
reg    s_axis_open_port_status_TREADY_int_regslice;
wire    regslice_both_s_axis_open_port_status_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 openPortWaitTime_V = 32'd750750750;
#0 odp_listenDone = 1'd0;
#0 odp_waitListenStatus = 1'd0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

dhcp_client_regslice_both #(
    .DataWidth( 16 ))
regslice_both_m_axis_open_port_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(16'd68),
    .vld_in(m_axis_open_port_TVALID_int_regslice),
    .ack_in(m_axis_open_port_TREADY_int_regslice),
    .data_out(m_axis_open_port_TDATA),
    .vld_out(regslice_both_m_axis_open_port_U_vld_out),
    .ack_out(m_axis_open_port_TREADY),
    .apdone_blk(regslice_both_m_axis_open_port_U_apdone_blk)
);

dhcp_client_regslice_both #(
    .DataWidth( 8 ))
regslice_both_s_axis_open_port_status_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_open_port_status_TDATA),
    .vld_in(s_axis_open_port_status_TVALID),
    .ack_in(regslice_both_s_axis_open_port_status_U_ack_in),
    .data_out(s_axis_open_port_status_TDATA_int_regslice),
    .vld_out(s_axis_open_port_status_TVALID_int_regslice),
    .ack_out(s_axis_open_port_status_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_open_port_status_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (((or_ln46_reg_148 == 1'd1) & (icmp_ln1065_reg_139 == 1'd1)) | ((grp_nbwritereq_fu_44_p3 == 1'd0) & (icmp_ln1065_reg_139 == 1'd1))))) begin
        and_ln50_reg_156 <= and_ln50_fu_124_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1065_reg_139 <= icmp_ln1065_fu_86_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (((or_ln46_reg_148 == 1'd1) & (1'd1 == and_ln50_fu_124_p2) & (icmp_ln1065_reg_139 == 1'd1)) | ((grp_nbwritereq_fu_44_p3 == 1'd0) & (1'd1 == and_ln50_fu_124_p2) & (icmp_ln1065_reg_139 == 1'd1))))) begin
        odp_listenDone <= trunc_ln145_fu_129_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (grp_nbwritereq_fu_44_p3 == 1'd1) & (or_ln46_reg_148 == 1'd0) & (icmp_ln1065_reg_139 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        odp_waitListenStatus <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1065_fu_86_p2 == 1'd1))) begin
        odp_waitListenStatus_load_reg_143 <= odp_waitListenStatus;
        or_ln46_reg_148 <= or_ln46_fu_112_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1065_fu_86_p2 == 1'd0))) begin
        openPortWaitTime_V <= add_ln887_fu_92_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (or_ln46_reg_148 == 1'd0) & (icmp_ln1065_reg_139 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_i_reg_152 <= m_axis_open_port_TREADY_int_regslice;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (ap_predicate_op24_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (or_ln46_reg_148 == 1'd0) & (icmp_ln1065_reg_139 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_i_reg_152 == 1'd1)))) begin
        m_axis_open_port_TDATA_blk_n = m_axis_open_port_TREADY_int_regslice;
    end else begin
        m_axis_open_port_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op24_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_axis_open_port_TVALID_int_regslice = 1'b1;
    end else begin
        m_axis_open_port_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (((or_ln46_reg_148 == 1'd1) & (1'd1 == and_ln50_reg_156) & (icmp_ln1065_reg_139 == 1'd1)) | ((1'd1 == and_ln50_reg_156) & (icmp_ln1065_reg_139 == 1'd1) & (tmp_i_reg_152 == 1'd0))))) begin
        portOpen_blk_n = portOpen_full_n;
    end else begin
        portOpen_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op34_write_state3 == 1'b1))) begin
        portOpen_write = 1'b1;
    end else begin
        portOpen_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_predicate_op29_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        s_axis_open_port_status_TDATA_blk_n = s_axis_open_port_status_TVALID_int_regslice;
    end else begin
        s_axis_open_port_status_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op29_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        s_axis_open_port_status_TREADY_int_regslice = 1'b1;
    end else begin
        s_axis_open_port_status_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln887_fu_92_p2 = ($signed(openPortWaitTime_V) + $signed(32'd4294967295));

assign and_ln50_fu_124_p2 = (tmp_i_25_nbreadreq_fu_60_p3 & odp_waitListenStatus_load_reg_143);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_done_reg == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_m_axis_open_port_U_apdone_blk == 1'b1) | ((m_axis_open_port_TREADY_int_regslice == 1'b0) & (ap_predicate_op32_write_state3 == 1'b1)) | ((portOpen_full_n == 1'b0) & (ap_predicate_op34_write_state3 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_done_reg == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | (regslice_both_m_axis_open_port_U_apdone_blk == 1'b1) | ((m_axis_open_port_TREADY_int_regslice == 1'b0) & (ap_predicate_op32_write_state3 == 1'b1)) | ((portOpen_full_n == 1'b0) & (ap_predicate_op34_write_state3 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_done_reg == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | (regslice_both_m_axis_open_port_U_apdone_blk == 1'b1) | ((m_axis_open_port_TREADY_int_regslice == 1'b0) & (ap_predicate_op32_write_state3 == 1'b1)) | ((portOpen_full_n == 1'b0) & (ap_predicate_op34_write_state3 == 1'b1)))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((ap_predicate_op29_read_state2 == 1'b1) & (s_axis_open_port_status_TVALID_int_regslice == 1'b0)) | ((ap_predicate_op24_write_state2 == 1'b1) & (m_axis_open_port_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((ap_predicate_op29_read_state2 == 1'b1) & (s_axis_open_port_status_TVALID_int_regslice == 1'b0)) | ((ap_predicate_op24_write_state2 == 1'b1) & (m_axis_open_port_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((ap_predicate_op29_read_state2 == 1'b1) & (s_axis_open_port_status_TVALID_int_regslice == 1'b0)) | ((ap_predicate_op24_write_state2 == 1'b1) & (m_axis_open_port_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_io = ((ap_predicate_op24_write_state2 == 1'b1) & (m_axis_open_port_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (((ap_predicate_op29_read_state2 == 1'b1) & (s_axis_open_port_status_TVALID_int_regslice == 1'b0)) | ((ap_predicate_op24_write_state2 == 1'b1) & (m_axis_open_port_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state3_io = ((m_axis_open_port_TREADY_int_regslice == 1'b0) & (ap_predicate_op32_write_state3 == 1'b1));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((regslice_both_m_axis_open_port_U_apdone_blk == 1'b1) | ((m_axis_open_port_TREADY_int_regslice == 1'b0) & (ap_predicate_op32_write_state3 == 1'b1)) | ((portOpen_full_n == 1'b0) & (ap_predicate_op34_write_state3 == 1'b1)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op24_write_state2 = ((grp_nbwritereq_fu_44_p3 == 1'd1) & (or_ln46_reg_148 == 1'd0) & (icmp_ln1065_reg_139 == 1'd1));
end

always @ (*) begin
    ap_predicate_op29_read_state2 = (((or_ln46_reg_148 == 1'd1) & (1'd1 == and_ln50_fu_124_p2) & (icmp_ln1065_reg_139 == 1'd1)) | ((grp_nbwritereq_fu_44_p3 == 1'd0) & (1'd1 == and_ln50_fu_124_p2) & (icmp_ln1065_reg_139 == 1'd1)));
end

always @ (*) begin
    ap_predicate_op32_write_state3 = ((or_ln46_reg_148 == 1'd0) & (icmp_ln1065_reg_139 == 1'd1) & (tmp_i_reg_152 == 1'd1));
end

always @ (*) begin
    ap_predicate_op34_write_state3 = (((or_ln46_reg_148 == 1'd1) & (1'd1 == and_ln50_reg_156) & (icmp_ln1065_reg_139 == 1'd1)) | ((1'd1 == and_ln50_reg_156) & (icmp_ln1065_reg_139 == 1'd1) & (tmp_i_reg_152 == 1'd0)));
end

assign grp_nbwritereq_fu_44_p3 = m_axis_open_port_TREADY_int_regslice;

assign icmp_ln1065_fu_86_p2 = ((openPortWaitTime_V == 32'd0) ? 1'b1 : 1'b0);

assign m_axis_open_port_TVALID = regslice_both_m_axis_open_port_U_vld_out;

assign or_ln46_fu_112_p2 = (odp_waitListenStatus | odp_listenDone);

assign portOpen_din = 1'd1;

assign s_axis_open_port_status_TREADY = regslice_both_s_axis_open_port_status_U_ack_in;

assign tmp_i_25_nbreadreq_fu_60_p3 = s_axis_open_port_status_TVALID_int_regslice;

assign trunc_ln145_fu_129_p1 = s_axis_open_port_status_TDATA_int_regslice[0:0];

endmodule //dhcp_client_open_dhcp_port
