-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity iperf_client_clock is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    timeInCycles_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    timeInCycles_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    timeInCycles_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    timeInCycles_empty_n : IN STD_LOGIC;
    timeInCycles_read : OUT STD_LOGIC;
    startSignalFifo_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    startSignalFifo_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    startSignalFifo_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    startSignalFifo_empty_n : IN STD_LOGIC;
    startSignalFifo_read : OUT STD_LOGIC;
    stopSignalFifo_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    stopSignalFifo_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    stopSignalFifo_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    stopSignalFifo_full_n : IN STD_LOGIC;
    stopSignalFifo_write : OUT STD_LOGIC );
end;


architecture behav of iperf_client_clock is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv48_1 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal sw_state_load_load_fu_78_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_nbreadreq_fu_56_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op20_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal sw_state_load_reg_130 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_reg_137 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op32_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal sw_state : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal time_V : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal timeInCycles_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal startSignalFifo_blk_n : STD_LOGIC;
    signal stopSignalFifo_blk_n : STD_LOGIC;
    signal timeInCycles_read_reg_125 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1065_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln886_fu_98_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln1065_fu_110_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_120 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    sw_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_120)) then
                if (((sw_state_load_load_fu_78_p1 = ap_const_lv1_1) and (icmp_ln1065_fu_114_p2 = ap_const_lv1_1))) then 
                    sw_state <= ap_const_lv1_0;
                elsif (((tmp_i_nbreadreq_fu_56_p3 = ap_const_lv1_1) and (sw_state = ap_const_lv1_0))) then 
                    sw_state <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    time_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_120)) then
                if ((sw_state_load_load_fu_78_p1 = ap_const_lv1_1)) then 
                    time_V <= add_ln886_fu_98_p2;
                elsif (((tmp_i_nbreadreq_fu_56_p3 = ap_const_lv1_1) and (sw_state = ap_const_lv1_0))) then 
                    time_V <= ap_const_lv48_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (sw_state_load_load_fu_78_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1065_reg_137 <= icmp_ln1065_fu_114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sw_state_load_reg_130 <= sw_state;
                timeInCycles_read_reg_125 <= timeInCycles_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln886_fu_98_p2 <= std_logic_vector(unsigned(time_V) + unsigned(ap_const_lv48_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, timeInCycles_empty_n, ap_done_reg, startSignalFifo_empty_n, ap_predicate_op20_read_state2, stopSignalFifo_full_n, ap_predicate_op32_write_state3)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op32_write_state3 = ap_const_boolean_1) and (stopSignalFifo_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_predicate_op20_read_state2 = ap_const_boolean_1) and (startSignalFifo_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or (timeInCycles_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, timeInCycles_empty_n, ap_done_reg, startSignalFifo_empty_n, ap_predicate_op20_read_state2, stopSignalFifo_full_n, ap_predicate_op32_write_state3)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op32_write_state3 = ap_const_boolean_1) and (stopSignalFifo_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_predicate_op20_read_state2 = ap_const_boolean_1) and (startSignalFifo_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or (timeInCycles_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, timeInCycles_empty_n, ap_done_reg, startSignalFifo_empty_n, ap_predicate_op20_read_state2, stopSignalFifo_full_n, ap_predicate_op32_write_state3)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op32_write_state3 = ap_const_boolean_1) and (stopSignalFifo_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_predicate_op20_read_state2 = ap_const_boolean_1) and (startSignalFifo_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or (timeInCycles_empty_n = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(timeInCycles_empty_n, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or (timeInCycles_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(startSignalFifo_empty_n, ap_predicate_op20_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op20_read_state2 = ap_const_boolean_1) and (startSignalFifo_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(stopSignalFifo_full_n, ap_predicate_op32_write_state3)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((ap_predicate_op32_write_state3 = ap_const_boolean_1) and (stopSignalFifo_full_n = ap_const_logic_0));
    end process;


    ap_condition_120_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_120 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op20_read_state2_assign_proc : process(tmp_i_nbreadreq_fu_56_p3, sw_state)
    begin
                ap_predicate_op20_read_state2 <= ((tmp_i_nbreadreq_fu_56_p3 = ap_const_lv1_1) and (sw_state = ap_const_lv1_0));
    end process;


    ap_predicate_op32_write_state3_assign_proc : process(sw_state_load_reg_130, icmp_ln1065_reg_137)
    begin
                ap_predicate_op32_write_state3 <= ((icmp_ln1065_reg_137 = ap_const_lv1_1) and (sw_state_load_reg_130 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1065_fu_114_p2 <= "1" when (zext_ln1065_fu_110_p1 = timeInCycles_read_reg_125) else "0";

    startSignalFifo_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, startSignalFifo_empty_n, ap_predicate_op20_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op20_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            startSignalFifo_blk_n <= startSignalFifo_empty_n;
        else 
            startSignalFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    startSignalFifo_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op20_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op20_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            startSignalFifo_read <= ap_const_logic_1;
        else 
            startSignalFifo_read <= ap_const_logic_0;
        end if; 
    end process;


    stopSignalFifo_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, stopSignalFifo_full_n, ap_predicate_op32_write_state3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op32_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            stopSignalFifo_blk_n <= stopSignalFifo_full_n;
        else 
            stopSignalFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stopSignalFifo_din <= ap_const_lv1_1;

    stopSignalFifo_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op32_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op32_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            stopSignalFifo_write <= ap_const_logic_1;
        else 
            stopSignalFifo_write <= ap_const_logic_0;
        end if; 
    end process;

    sw_state_load_load_fu_78_p1 <= sw_state;

    timeInCycles_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, timeInCycles_empty_n, ap_done_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_done_reg = ap_const_logic_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            timeInCycles_blk_n <= timeInCycles_empty_n;
        else 
            timeInCycles_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    timeInCycles_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            timeInCycles_read <= ap_const_logic_1;
        else 
            timeInCycles_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_i_nbreadreq_fu_56_p3 <= (0=>(startSignalFifo_empty_n), others=>'-');
    zext_ln1065_fu_110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln886_fu_98_p2),64));
end behav;
