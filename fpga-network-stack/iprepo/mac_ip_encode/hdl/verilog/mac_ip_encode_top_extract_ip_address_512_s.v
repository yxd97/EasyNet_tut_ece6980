// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mac_ip_encode_top_extract_ip_address_512_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        dataIn_internal_dout,
        dataIn_internal_num_data_valid,
        dataIn_internal_fifo_cap,
        dataIn_internal_empty_n,
        dataIn_internal_read,
        regDefaultGateway_dout,
        regDefaultGateway_num_data_valid,
        regDefaultGateway_fifo_cap,
        regDefaultGateway_empty_n,
        regDefaultGateway_read,
        regSubNetMask_dout,
        regSubNetMask_num_data_valid,
        regSubNetMask_fifo_cap,
        regSubNetMask_empty_n,
        regSubNetMask_read,
        dataStreamBuffer0_din,
        dataStreamBuffer0_num_data_valid,
        dataStreamBuffer0_fifo_cap,
        dataStreamBuffer0_full_n,
        dataStreamBuffer0_write,
        m_axis_arp_lookup_request_TREADY,
        m_axis_arp_lookup_request_TDATA,
        m_axis_arp_lookup_request_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [1023:0] dataIn_internal_dout;
input  [1:0] dataIn_internal_num_data_valid;
input  [1:0] dataIn_internal_fifo_cap;
input   dataIn_internal_empty_n;
output   dataIn_internal_read;
input  [31:0] regDefaultGateway_dout;
input  [2:0] regDefaultGateway_num_data_valid;
input  [2:0] regDefaultGateway_fifo_cap;
input   regDefaultGateway_empty_n;
output   regDefaultGateway_read;
input  [31:0] regSubNetMask_dout;
input  [2:0] regSubNetMask_num_data_valid;
input  [2:0] regSubNetMask_fifo_cap;
input   regSubNetMask_empty_n;
output   regSubNetMask_read;
output  [576:0] dataStreamBuffer0_din;
input  [1:0] dataStreamBuffer0_num_data_valid;
input  [1:0] dataStreamBuffer0_fifo_cap;
input   dataStreamBuffer0_full_n;
output   dataStreamBuffer0_write;
input   m_axis_arp_lookup_request_TREADY;
output  [31:0] m_axis_arp_lookup_request_TDATA;
output   m_axis_arp_lookup_request_TVALID;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dataIn_internal_read;
reg regDefaultGateway_read;
reg regSubNetMask_read;
reg dataStreamBuffer0_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire   [0:0] tmp_i_nbreadreq_fu_96_p3;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] tmp_i_reg_392;
reg   [0:0] header_ready_load_reg_396;
reg    ap_predicate_op65_write_state2;
reg    ap_predicate_op66_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] tmp_i_reg_392_pp0_iter1_reg;
reg   [0:0] metaWritten_load_reg_415;
reg   [0:0] metaWritten_load_reg_415_pp0_iter1_reg;
reg   [0:0] icmp_ln1065_reg_435;
reg    ap_predicate_op73_write_state3;
reg    ap_predicate_op74_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg   [0:0] tmp_i_reg_392_pp0_iter2_reg;
reg   [0:0] metaWritten_load_reg_415_pp0_iter2_reg;
reg   [0:0] icmp_ln1065_reg_435_pp0_iter2_reg;
reg    ap_predicate_op75_write_state4;
reg    ap_predicate_op77_write_state4;
wire    regslice_both_m_axis_arp_lookup_request_U_apdone_blk;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] header_ready;
reg   [15:0] header_idx;
reg   [159:0] header_header_V;
reg   [0:0] metaWritten;
reg    m_axis_arp_lookup_request_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    regSubNetMask_blk_n;
reg    regDefaultGateway_blk_n;
reg    dataIn_internal_blk_n;
reg    dataStreamBuffer0_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] header_ready_load_load_fu_185_p1;
wire   [576:0] trunc_ln174_fu_189_p1;
reg   [576:0] trunc_ln174_reg_400;
wire   [159:0] p_Result_s_fu_304_p2;
wire   [0:0] metaWritten_load_load_fu_316_p1;
reg   [31:0] lhs_V_1_reg_425;
wire   [31:0] dstIpAddress_V_fu_364_p4;
reg   [31:0] dstIpAddress_V_reg_430;
wire   [0:0] icmp_ln1065_fu_386_p2;
reg   [0:0] ap_phi_mux_header_ready_flag_0_i_phi_fu_139_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_header_ready_flag_0_i_reg_136;
reg   [15:0] ap_phi_mux_header_idx_new_0_i_phi_fu_150_p4;
wire   [15:0] add_ln67_fu_213_p2;
wire   [15:0] ap_phi_reg_pp0_iter0_header_idx_new_0_i_reg_147;
reg   [0:0] ap_phi_mux_metaWritten_flag_0_i_phi_fu_160_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_metaWritten_flag_0_i_reg_157;
wire   [159:0] ap_phi_reg_pp0_iter0_p_Val2_6_reg_168;
reg   [159:0] ap_phi_reg_pp0_iter1_p_Val2_6_reg_168;
wire   [0:0] xor_ln67_fu_326_p2;
wire   [0:0] or_ln67_fu_320_p2;
wire   [15:0] select_ln67_fu_332_p3;
wire   [0:0] or_ln67_1_fu_340_p2;
reg    ap_block_pp0_stage0_01001;
wire   [24:0] shl_ln_fu_201_p3;
wire   [0:0] trunc_ln414_fu_226_p1;
wire   [0:0] icmp_ln414_fu_220_p2;
wire   [159:0] st_fu_230_p3;
wire   [159:0] tmp_99_fu_209_p1;
wire   [159:0] select_ln414_fu_238_p3;
reg   [159:0] tmp_fu_246_p4;
wire   [159:0] select_ln414_2_fu_264_p3;
wire   [159:0] select_ln414_3_fu_272_p3;
wire   [159:0] or_ln414_fu_280_p2;
wire   [159:0] select_ln414_1_fu_256_p3;
wire   [159:0] xor_ln414_fu_286_p2;
wire   [159:0] and_ln414_fu_292_p2;
wire   [159:0] and_ln414_1_fu_298_p2;
wire   [0:0] tmp_last_V_fu_177_p3;
wire   [31:0] xor_ln1065_fu_374_p2;
wire   [31:0] and_ln1065_fu_380_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg   [31:0] m_axis_arp_lookup_request_TDATA_int_regslice;
reg    m_axis_arp_lookup_request_TVALID_int_regslice;
wire    m_axis_arp_lookup_request_TREADY_int_regslice;
wire    regslice_both_m_axis_arp_lookup_request_U_vld_out;
reg    ap_condition_232;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 header_ready = 1'd0;
#0 header_idx = 16'd0;
#0 header_header_V = 160'd1180591620717411303493;
#0 metaWritten = 1'd0;
end

mac_ip_encode_top_regslice_both #(
    .DataWidth( 32 ))
regslice_both_m_axis_arp_lookup_request_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(m_axis_arp_lookup_request_TDATA_int_regslice),
    .vld_in(m_axis_arp_lookup_request_TVALID_int_regslice),
    .ack_in(m_axis_arp_lookup_request_TREADY_int_regslice),
    .data_out(m_axis_arp_lookup_request_TDATA),
    .vld_out(regslice_both_m_axis_arp_lookup_request_U_vld_out),
    .ack_out(m_axis_arp_lookup_request_TREADY),
    .apdone_blk(regslice_both_m_axis_arp_lookup_request_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_232)) begin
        if (((tmp_i_nbreadreq_fu_96_p3 == 1'd1) & (header_ready_load_load_fu_185_p1 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_p_Val2_6_reg_168 <= p_Result_s_fu_304_p2;
        end else if (((tmp_i_nbreadreq_fu_96_p3 == 1'd1) & (header_ready_load_load_fu_185_p1 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_p_Val2_6_reg_168 <= header_header_V;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_p_Val2_6_reg_168 <= ap_phi_reg_pp0_iter0_p_Val2_6_reg_168;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((metaWritten_load_reg_415 == 1'd0) & (tmp_i_reg_392 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dstIpAddress_V_reg_430 <= {{ap_phi_reg_pp0_iter1_p_Val2_6_reg_168[159:128]}};
        icmp_ln1065_reg_435 <= icmp_ln1065_fu_386_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_nbreadreq_fu_96_p3 == 1'd1) & (ap_start == 1'b1) & (header_ready_load_load_fu_185_p1 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        header_header_V <= p_Result_s_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_nbreadreq_fu_96_p3 == 1'd1) & (or_ln67_fu_320_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        header_idx <= select_ln67_fu_332_p3;
        header_ready <= xor_ln67_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_nbreadreq_fu_96_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        header_ready_load_reg_396 <= header_ready;
        metaWritten_load_reg_415 <= metaWritten;
        trunc_ln174_reg_400 <= trunc_ln174_fu_189_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln1065_reg_435_pp0_iter2_reg <= icmp_ln1065_reg_435;
        metaWritten_load_reg_415_pp0_iter2_reg <= metaWritten_load_reg_415_pp0_iter1_reg;
        tmp_i_reg_392_pp0_iter2_reg <= tmp_i_reg_392_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lhs_V_1_reg_425 <= regDefaultGateway_dout;
        metaWritten_load_reg_415_pp0_iter1_reg <= metaWritten_load_reg_415;
        tmp_i_reg_392 <= tmp_i_nbreadreq_fu_96_p3;
        tmp_i_reg_392_pp0_iter1_reg <= tmp_i_reg_392;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_nbreadreq_fu_96_p3 == 1'd1) & (or_ln67_1_fu_340_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        metaWritten <= xor_ln67_fu_326_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_nbreadreq_fu_96_p3 == 1'd1) & (header_ready_load_load_fu_185_p1 == 1'd0))) begin
        ap_phi_mux_header_idx_new_0_i_phi_fu_150_p4 = add_ln67_fu_213_p2;
    end else begin
        ap_phi_mux_header_idx_new_0_i_phi_fu_150_p4 = ap_phi_reg_pp0_iter0_header_idx_new_0_i_reg_147;
    end
end

always @ (*) begin
    if ((tmp_i_nbreadreq_fu_96_p3 == 1'd1)) begin
        if ((header_ready_load_load_fu_185_p1 == 1'd0)) begin
            ap_phi_mux_header_ready_flag_0_i_phi_fu_139_p4 = 1'd1;
        end else if ((header_ready_load_load_fu_185_p1 == 1'd1)) begin
            ap_phi_mux_header_ready_flag_0_i_phi_fu_139_p4 = 1'd0;
        end else begin
            ap_phi_mux_header_ready_flag_0_i_phi_fu_139_p4 = ap_phi_reg_pp0_iter0_header_ready_flag_0_i_reg_136;
        end
    end else begin
        ap_phi_mux_header_ready_flag_0_i_phi_fu_139_p4 = ap_phi_reg_pp0_iter0_header_ready_flag_0_i_reg_136;
    end
end

always @ (*) begin
    if ((tmp_i_nbreadreq_fu_96_p3 == 1'd1)) begin
        if ((metaWritten_load_load_fu_316_p1 == 1'd0)) begin
            ap_phi_mux_metaWritten_flag_0_i_phi_fu_160_p4 = 1'd1;
        end else if ((metaWritten_load_load_fu_316_p1 == 1'd1)) begin
            ap_phi_mux_metaWritten_flag_0_i_phi_fu_160_p4 = 1'd0;
        end else begin
            ap_phi_mux_metaWritten_flag_0_i_phi_fu_160_p4 = ap_phi_reg_pp0_iter0_metaWritten_flag_0_i_reg_157;
        end
    end else begin
        ap_phi_mux_metaWritten_flag_0_i_phi_fu_160_p4 = ap_phi_reg_pp0_iter0_metaWritten_flag_0_i_reg_157;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b0) & (tmp_i_nbreadreq_fu_96_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        dataIn_internal_blk_n = dataIn_internal_empty_n;
    end else begin
        dataIn_internal_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_i_nbreadreq_fu_96_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dataIn_internal_read = 1'b1;
    end else begin
        dataIn_internal_read = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op66_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_predicate_op65_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        dataStreamBuffer0_blk_n = dataStreamBuffer0_full_n;
    end else begin
        dataStreamBuffer0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_predicate_op66_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_predicate_op65_write_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        dataStreamBuffer0_write = 1'b1;
    end else begin
        dataStreamBuffer0_write = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op77_write_state4 == 1'b1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op75_write_state4 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op74_write_state3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op73_write_state3 == 1'b1)))) begin
        m_axis_arp_lookup_request_TDATA_blk_n = m_axis_arp_lookup_request_TREADY_int_regslice;
    end else begin
        m_axis_arp_lookup_request_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((ap_predicate_op74_write_state3 == 1'b1)) begin
            m_axis_arp_lookup_request_TDATA_int_regslice = dstIpAddress_V_reg_430;
        end else if ((ap_predicate_op73_write_state3 == 1'b1)) begin
            m_axis_arp_lookup_request_TDATA_int_regslice = lhs_V_1_reg_425;
        end else begin
            m_axis_arp_lookup_request_TDATA_int_regslice = 'bx;
        end
    end else begin
        m_axis_arp_lookup_request_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op74_write_state3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op73_write_state3 == 1'b1)))) begin
        m_axis_arp_lookup_request_TVALID_int_regslice = 1'b1;
    end else begin
        m_axis_arp_lookup_request_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        regDefaultGateway_blk_n = regDefaultGateway_empty_n;
    end else begin
        regDefaultGateway_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        regDefaultGateway_read = 1'b1;
    end else begin
        regDefaultGateway_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        regSubNetMask_blk_n = regSubNetMask_empty_n;
    end else begin
        regSubNetMask_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        regSubNetMask_read = 1'b1;
    end else begin
        regSubNetMask_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln67_fu_213_p2 = (header_idx + 16'd1);

assign and_ln1065_fu_380_p2 = (xor_ln1065_fu_374_p2 & regSubNetMask_dout);

assign and_ln414_1_fu_298_p2 = (xor_ln414_fu_286_p2 & select_ln414_1_fu_256_p3);

assign and_ln414_fu_292_p2 = (or_ln414_fu_280_p2 & header_header_V);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((regSubNetMask_empty_n == 1'b0) | (regDefaultGateway_empty_n == 1'b0) | ((ap_predicate_op66_write_state2 == 1'b1) & (dataStreamBuffer0_full_n == 1'b0)) | ((ap_predicate_op65_write_state2 == 1'b1) & (dataStreamBuffer0_full_n == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_96_p3 == 1'd1) & (dataIn_internal_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((regslice_both_m_axis_arp_lookup_request_U_apdone_blk == 1'b1) | ((m_axis_arp_lookup_request_TREADY_int_regslice == 1'b0) & (ap_predicate_op77_write_state4 == 1'b1)) | ((m_axis_arp_lookup_request_TREADY_int_regslice == 1'b0) & (ap_predicate_op75_write_state4 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((m_axis_arp_lookup_request_TREADY_int_regslice == 1'b0) & (ap_predicate_op74_write_state3 == 1'b1)) | ((m_axis_arp_lookup_request_TREADY_int_regslice == 1'b0) & (ap_predicate_op73_write_state3 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((regSubNetMask_empty_n == 1'b0) | (regDefaultGateway_empty_n == 1'b0) | ((ap_predicate_op66_write_state2 == 1'b1) & (dataStreamBuffer0_full_n == 1'b0)) | ((ap_predicate_op65_write_state2 == 1'b1) & (dataStreamBuffer0_full_n == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_96_p3 == 1'd1) & (dataIn_internal_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state4_io) | (regslice_both_m_axis_arp_lookup_request_U_apdone_blk == 1'b1) | ((m_axis_arp_lookup_request_TREADY_int_regslice == 1'b0) & (ap_predicate_op77_write_state4 == 1'b1)) | ((m_axis_arp_lookup_request_TREADY_int_regslice == 1'b0) & (ap_predicate_op75_write_state4 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((m_axis_arp_lookup_request_TREADY_int_regslice == 1'b0) & (ap_predicate_op74_write_state3 == 1'b1)) | ((m_axis_arp_lookup_request_TREADY_int_regslice == 1'b0) & (ap_predicate_op73_write_state3 == 1'b1)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((regSubNetMask_empty_n == 1'b0) | (regDefaultGateway_empty_n == 1'b0) | ((ap_predicate_op66_write_state2 == 1'b1) & (dataStreamBuffer0_full_n == 1'b0)) | ((ap_predicate_op65_write_state2 == 1'b1) & (dataStreamBuffer0_full_n == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_96_p3 == 1'd1) & (dataIn_internal_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state4_io) | (regslice_both_m_axis_arp_lookup_request_U_apdone_blk == 1'b1) | ((m_axis_arp_lookup_request_TREADY_int_regslice == 1'b0) & (ap_predicate_op77_write_state4 == 1'b1)) | ((m_axis_arp_lookup_request_TREADY_int_regslice == 1'b0) & (ap_predicate_op75_write_state4 == 1'b1)))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((m_axis_arp_lookup_request_TREADY_int_regslice == 1'b0) & (ap_predicate_op74_write_state3 == 1'b1)) | ((m_axis_arp_lookup_request_TREADY_int_regslice == 1'b0) & (ap_predicate_op73_write_state3 == 1'b1)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((tmp_i_nbreadreq_fu_96_p3 == 1'd1) & (dataIn_internal_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((regSubNetMask_empty_n == 1'b0) | (regDefaultGateway_empty_n == 1'b0) | ((ap_predicate_op66_write_state2 == 1'b1) & (dataStreamBuffer0_full_n == 1'b0)) | ((ap_predicate_op65_write_state2 == 1'b1) & (dataStreamBuffer0_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state3_io = (((m_axis_arp_lookup_request_TREADY_int_regslice == 1'b0) & (ap_predicate_op74_write_state3 == 1'b1)) | ((m_axis_arp_lookup_request_TREADY_int_regslice == 1'b0) & (ap_predicate_op73_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((m_axis_arp_lookup_request_TREADY_int_regslice == 1'b0) & (ap_predicate_op74_write_state3 == 1'b1)) | ((m_axis_arp_lookup_request_TREADY_int_regslice == 1'b0) & (ap_predicate_op73_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state4_io = (((m_axis_arp_lookup_request_TREADY_int_regslice == 1'b0) & (ap_predicate_op77_write_state4 == 1'b1)) | ((m_axis_arp_lookup_request_TREADY_int_regslice == 1'b0) & (ap_predicate_op75_write_state4 == 1'b1)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((regslice_both_m_axis_arp_lookup_request_U_apdone_blk == 1'b1) | ((m_axis_arp_lookup_request_TREADY_int_regslice == 1'b0) & (ap_predicate_op77_write_state4 == 1'b1)) | ((m_axis_arp_lookup_request_TREADY_int_regslice == 1'b0) & (ap_predicate_op75_write_state4 == 1'b1)));
end

always @ (*) begin
    ap_condition_232 = ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_header_idx_new_0_i_reg_147 = 'bx;

assign ap_phi_reg_pp0_iter0_header_ready_flag_0_i_reg_136 = 'bx;

assign ap_phi_reg_pp0_iter0_metaWritten_flag_0_i_reg_157 = 'bx;

assign ap_phi_reg_pp0_iter0_p_Val2_6_reg_168 = 'bx;

always @ (*) begin
    ap_predicate_op65_write_state2 = ((header_ready_load_reg_396 == 1'd0) & (tmp_i_reg_392 == 1'd1));
end

always @ (*) begin
    ap_predicate_op66_write_state2 = ((header_ready_load_reg_396 == 1'd1) & (tmp_i_reg_392 == 1'd1));
end

always @ (*) begin
    ap_predicate_op73_write_state3 = ((tmp_i_reg_392_pp0_iter1_reg == 1'd1) & (icmp_ln1065_reg_435 == 1'd0) & (metaWritten_load_reg_415_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op74_write_state3 = ((tmp_i_reg_392_pp0_iter1_reg == 1'd1) & (icmp_ln1065_reg_435 == 1'd1) & (metaWritten_load_reg_415_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op75_write_state4 = ((icmp_ln1065_reg_435_pp0_iter2_reg == 1'd0) & (metaWritten_load_reg_415_pp0_iter2_reg == 1'd0) & (tmp_i_reg_392_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op77_write_state4 = ((icmp_ln1065_reg_435_pp0_iter2_reg == 1'd1) & (metaWritten_load_reg_415_pp0_iter2_reg == 1'd0) & (tmp_i_reg_392_pp0_iter2_reg == 1'd1));
end

assign dataStreamBuffer0_din = trunc_ln174_reg_400;

assign dstIpAddress_V_fu_364_p4 = {{ap_phi_reg_pp0_iter1_p_Val2_6_reg_168[159:128]}};

assign header_ready_load_load_fu_185_p1 = header_ready;

assign icmp_ln1065_fu_386_p2 = ((and_ln1065_fu_380_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_220_p2 = ((shl_ln_fu_201_p3 > 25'd159) ? 1'b1 : 1'b0);

assign m_axis_arp_lookup_request_TVALID = regslice_both_m_axis_arp_lookup_request_U_vld_out;

assign metaWritten_load_load_fu_316_p1 = metaWritten;

assign or_ln414_fu_280_p2 = (select_ln414_3_fu_272_p3 | select_ln414_2_fu_264_p3);

assign or_ln67_1_fu_340_p2 = (tmp_last_V_fu_177_p3 | ap_phi_mux_metaWritten_flag_0_i_phi_fu_160_p4);

assign or_ln67_fu_320_p2 = (tmp_last_V_fu_177_p3 | ap_phi_mux_header_ready_flag_0_i_phi_fu_139_p4);

assign p_Result_s_fu_304_p2 = (and_ln414_fu_292_p2 | and_ln414_1_fu_298_p2);

assign select_ln414_1_fu_256_p3 = ((icmp_ln414_fu_220_p2[0:0] == 1'b1) ? tmp_fu_246_p4 : tmp_99_fu_209_p1);

assign select_ln414_2_fu_264_p3 = ((icmp_ln414_fu_220_p2[0:0] == 1'b1) ? 160'd730750818665451459101842416358141509827966271487 : 160'd0);

assign select_ln414_3_fu_272_p3 = ((icmp_ln414_fu_220_p2[0:0] == 1'b1) ? 160'd1461501637330902918203684832716283019655932542974 : 160'd0);

assign select_ln414_fu_238_p3 = ((icmp_ln414_fu_220_p2[0:0] == 1'b1) ? st_fu_230_p3 : tmp_99_fu_209_p1);

assign select_ln67_fu_332_p3 = ((tmp_last_V_fu_177_p3[0:0] == 1'b1) ? 16'd0 : ap_phi_mux_header_idx_new_0_i_phi_fu_150_p4);

assign shl_ln_fu_201_p3 = {{header_idx}, {9'd0}};

assign st_fu_230_p3 = {{trunc_ln414_fu_226_p1}, {159'd0}};

assign tmp_99_fu_209_p1 = dataIn_internal_dout[159:0];

integer ap_tvar_int_0;

always @ (select_ln414_fu_238_p3) begin
    for (ap_tvar_int_0 = 160 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 159 - 0) begin
            tmp_fu_246_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_fu_246_p4[ap_tvar_int_0] = select_ln414_fu_238_p3[159 - ap_tvar_int_0];
        end
    end
end

assign tmp_i_nbreadreq_fu_96_p3 = dataIn_internal_empty_n;

assign tmp_last_V_fu_177_p3 = dataIn_internal_dout[1024'd576];

assign trunc_ln174_fu_189_p1 = dataIn_internal_dout[576:0];

assign trunc_ln414_fu_226_p1 = dataIn_internal_dout[0:0];

assign xor_ln1065_fu_374_p2 = (regDefaultGateway_dout ^ dstIpAddress_V_fu_364_p4);

assign xor_ln414_fu_286_p2 = (or_ln414_fu_280_p2 ^ 160'd1461501637330902918203684832716283019655932542975);

assign xor_ln67_fu_326_p2 = (tmp_last_V_fu_177_p3 ^ 1'd1);

endmodule //mac_ip_encode_top_extract_ip_address_512_s
