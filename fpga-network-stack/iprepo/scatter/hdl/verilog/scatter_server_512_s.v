// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module scatter_server_512_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        usePort_dout,
        usePort_num_data_valid,
        usePort_fifo_cap,
        usePort_empty_n,
        usePort_read,
        regBasePort_dout,
        regBasePort_num_data_valid,
        regBasePort_fifo_cap,
        regBasePort_empty_n,
        regBasePort_read,
        runExperiment_dout,
        runExperiment_num_data_valid,
        runExperiment_fifo_cap,
        runExperiment_empty_n,
        runExperiment_read,
        s_axis_listen_port_status_TVALID,
        s_axis_notifications_TVALID,
        s_axis_rx_metadata_TVALID,
        rxDataBuffer_dout,
        rxDataBuffer_num_data_valid,
        rxDataBuffer_fifo_cap,
        rxDataBuffer_empty_n,
        rxDataBuffer_read,
        m_axis_listen_port_TREADY,
        m_axis_read_package_TREADY,
        m_axis_listen_port_TDATA,
        m_axis_listen_port_TVALID,
        s_axis_listen_port_status_TDATA,
        s_axis_listen_port_status_TREADY,
        s_axis_notifications_TDATA,
        s_axis_notifications_TREADY,
        m_axis_read_package_TDATA,
        m_axis_read_package_TVALID,
        s_axis_rx_metadata_TDATA,
        s_axis_rx_metadata_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] usePort_dout;
input  [2:0] usePort_num_data_valid;
input  [2:0] usePort_fifo_cap;
input   usePort_empty_n;
output   usePort_read;
input  [15:0] regBasePort_dout;
input  [2:0] regBasePort_num_data_valid;
input  [2:0] regBasePort_fifo_cap;
input   regBasePort_empty_n;
output   regBasePort_read;
input  [0:0] runExperiment_dout;
input  [2:0] runExperiment_num_data_valid;
input  [2:0] runExperiment_fifo_cap;
input   runExperiment_empty_n;
output   runExperiment_read;
input   s_axis_listen_port_status_TVALID;
input   s_axis_notifications_TVALID;
input   s_axis_rx_metadata_TVALID;
input  [1023:0] rxDataBuffer_dout;
input  [9:0] rxDataBuffer_num_data_valid;
input  [9:0] rxDataBuffer_fifo_cap;
input   rxDataBuffer_empty_n;
output   rxDataBuffer_read;
input   m_axis_listen_port_TREADY;
input   m_axis_read_package_TREADY;
output  [15:0] m_axis_listen_port_TDATA;
output   m_axis_listen_port_TVALID;
input  [7:0] s_axis_listen_port_status_TDATA;
output   s_axis_listen_port_status_TREADY;
input  [87:0] s_axis_notifications_TDATA;
output   s_axis_notifications_TREADY;
output  [31:0] m_axis_read_package_TDATA;
output   m_axis_read_package_TVALID;
input  [15:0] s_axis_rx_metadata_TDATA;
output   s_axis_rx_metadata_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg usePort_read;
reg regBasePort_read;
reg runExperiment_read;
reg rxDataBuffer_read;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [1:0] listenState_load_load_fu_268_p1;
wire   [0:0] tmp_i_nbreadreq_fu_124_p3;
reg    ap_predicate_op27_read_state1;
wire   [0:0] tmp_i_23_nbreadreq_fu_138_p3;
wire   [0:0] tmp_6_i_nbreadreq_fu_152_p3;
wire   [0:0] grp_nbreadreq_fu_160_p3;
reg    ap_predicate_op65_read_state1;
reg    ap_predicate_op66_read_state1;
reg    ap_predicate_op75_read_state1;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [1:0] listenState_load_reg_406;
reg   [0:0] tmp_i_23_reg_418;
reg   [0:0] icmp_ln1069_reg_422;
reg    ap_predicate_op83_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg   [1:0] listenState_load_reg_406_pp0_iter1_reg;
reg   [0:0] tmp_i_23_reg_418_pp0_iter1_reg;
reg   [0:0] icmp_ln1069_reg_422_pp0_iter1_reg;
reg    ap_predicate_op85_write_state3;
wire    regslice_both_m_axis_listen_port_U_apdone_blk;
wire    regslice_both_m_axis_read_package_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_subdone;
reg   [1:0] listenState;
reg   [15:0] currentPort_V;
reg   [15:0] openedPort_V;
reg   [0:0] serverFsmState;
reg    m_axis_listen_port_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    s_axis_listen_port_status_TDATA_blk_n;
reg    s_axis_notifications_TDATA_blk_n;
reg    m_axis_read_package_TDATA_blk_n;
reg    s_axis_rx_metadata_TDATA_blk_n;
reg    runExperiment_blk_n;
reg    usePort_blk_n;
reg    regBasePort_blk_n;
reg    rxDataBuffer_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] currentPort_V_load_reg_410;
wire   [0:0] icmp_ln1069_fu_377_p2;
wire   [31:0] trunc_ln174_fu_383_p1;
reg   [31:0] trunc_ln174_reg_426;
reg   [0:0] ap_phi_mux_currentPort_V_flag_4_i_phi_fu_197_p12;
wire   [0:0] ap_phi_reg_pp0_iter0_currentPort_V_flag_4_i_reg_194;
wire   [0:0] runExperiment_read_read_fu_118_p2;
wire   [0:0] tmp_fu_280_p1;
reg   [15:0] ap_phi_mux_currentPort_V_new_4_i_phi_fu_219_p12;
wire   [15:0] ap_phi_reg_pp0_iter0_currentPort_V_new_4_i_reg_216;
wire   [15:0] select_ln435_fu_303_p3;
reg   [15:0] ap_phi_mux_openedPort_V_new_3_i_phi_fu_241_p12;
wire   [15:0] ap_phi_reg_pp0_iter0_openedPort_V_new_3_i_reg_238;
wire   [15:0] select_ln435_1_fu_312_p3;
wire   [1:0] zext_ln427_fu_333_p1;
wire   [0:0] grp_fu_260_p3;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] add_ln886_1_fu_291_p2;
wire   [0:0] icmp_ln1065_fu_297_p2;
wire   [15:0] add_ln886_fu_285_p2;
wire   [0:0] and_ln145_fu_321_p2;
wire   [0:0] xor_ln145_fu_327_p2;
wire   [15:0] tmp_length_V_fu_367_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg    m_axis_listen_port_TVALID_int_regslice;
wire    m_axis_listen_port_TREADY_int_regslice;
wire    regslice_both_m_axis_listen_port_U_vld_out;
wire    regslice_both_s_axis_listen_port_status_U_apdone_blk;
wire   [7:0] s_axis_listen_port_status_TDATA_int_regslice;
wire    s_axis_listen_port_status_TVALID_int_regslice;
reg    s_axis_listen_port_status_TREADY_int_regslice;
wire    regslice_both_s_axis_listen_port_status_U_ack_in;
wire    regslice_both_s_axis_notifications_U_apdone_blk;
wire   [87:0] s_axis_notifications_TDATA_int_regslice;
wire    s_axis_notifications_TVALID_int_regslice;
reg    s_axis_notifications_TREADY_int_regslice;
wire    regslice_both_s_axis_notifications_U_ack_in;
reg    m_axis_read_package_TVALID_int_regslice;
wire    m_axis_read_package_TREADY_int_regslice;
wire    regslice_both_m_axis_read_package_U_vld_out;
wire    regslice_both_s_axis_rx_metadata_U_apdone_blk;
wire   [15:0] s_axis_rx_metadata_TDATA_int_regslice;
wire    s_axis_rx_metadata_TVALID_int_regslice;
reg    s_axis_rx_metadata_TREADY_int_regslice;
wire    regslice_both_s_axis_rx_metadata_U_ack_in;
reg    ap_condition_249;
reg    ap_condition_489;
reg    ap_condition_488;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 listenState = 2'd0;
#0 currentPort_V = 16'd0;
#0 openedPort_V = 16'd0;
#0 serverFsmState = 1'd0;
end

scatter_regslice_both #(
    .DataWidth( 16 ))
regslice_both_m_axis_listen_port_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(currentPort_V_load_reg_410),
    .vld_in(m_axis_listen_port_TVALID_int_regslice),
    .ack_in(m_axis_listen_port_TREADY_int_regslice),
    .data_out(m_axis_listen_port_TDATA),
    .vld_out(regslice_both_m_axis_listen_port_U_vld_out),
    .ack_out(m_axis_listen_port_TREADY),
    .apdone_blk(regslice_both_m_axis_listen_port_U_apdone_blk)
);

scatter_regslice_both #(
    .DataWidth( 8 ))
regslice_both_s_axis_listen_port_status_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_listen_port_status_TDATA),
    .vld_in(s_axis_listen_port_status_TVALID),
    .ack_in(regslice_both_s_axis_listen_port_status_U_ack_in),
    .data_out(s_axis_listen_port_status_TDATA_int_regslice),
    .vld_out(s_axis_listen_port_status_TVALID_int_regslice),
    .ack_out(s_axis_listen_port_status_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_listen_port_status_U_apdone_blk)
);

scatter_regslice_both #(
    .DataWidth( 88 ))
regslice_both_s_axis_notifications_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_notifications_TDATA),
    .vld_in(s_axis_notifications_TVALID),
    .ack_in(regslice_both_s_axis_notifications_U_ack_in),
    .data_out(s_axis_notifications_TDATA_int_regslice),
    .vld_out(s_axis_notifications_TVALID_int_regslice),
    .ack_out(s_axis_notifications_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_notifications_U_apdone_blk)
);

scatter_regslice_both #(
    .DataWidth( 32 ))
regslice_both_m_axis_read_package_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(trunc_ln174_reg_426),
    .vld_in(m_axis_read_package_TVALID_int_regslice),
    .ack_in(m_axis_read_package_TREADY_int_regslice),
    .data_out(m_axis_read_package_TDATA),
    .vld_out(regslice_both_m_axis_read_package_U_vld_out),
    .ack_out(m_axis_read_package_TREADY),
    .apdone_blk(regslice_both_m_axis_read_package_U_apdone_blk)
);

scatter_regslice_both #(
    .DataWidth( 16 ))
regslice_both_s_axis_rx_metadata_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(s_axis_rx_metadata_TDATA),
    .vld_in(s_axis_rx_metadata_TVALID),
    .ack_in(regslice_both_s_axis_rx_metadata_U_ack_in),
    .data_out(s_axis_rx_metadata_TDATA_int_regslice),
    .vld_out(s_axis_rx_metadata_TVALID_int_regslice),
    .ack_out(s_axis_rx_metadata_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_rx_metadata_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        listenState <= 2'd0;
    end else begin
        if ((1'b1 == ap_condition_249)) begin
            if (((listenState_load_load_fu_268_p1 == 2'd0) & (runExperiment_read_read_fu_118_p2 == 1'd1))) begin
                listenState <= 2'd1;
            end else if ((listenState_load_load_fu_268_p1 == 2'd1)) begin
                listenState <= 2'd2;
            end else if (((tmp_i_nbreadreq_fu_124_p3 == 1'd1) & (listenState == 2'd2))) begin
                listenState <= zext_ln427_fu_333_p1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_488)) begin
        if (((serverFsmState == 1'd1) & (grp_fu_260_p3 == 1'd1))) begin
            serverFsmState <= 1'd0;
        end else if ((1'b1 == ap_condition_489)) begin
            serverFsmState <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_currentPort_V_flag_4_i_phi_fu_197_p12 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        currentPort_V <= ap_phi_mux_currentPort_V_new_4_i_phi_fu_219_p12;
        openedPort_V <= ap_phi_mux_openedPort_V_new_3_i_phi_fu_241_p12;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        currentPort_V_load_reg_410 <= currentPort_V;
        icmp_ln1069_reg_422_pp0_iter1_reg <= icmp_ln1069_reg_422;
        listenState_load_reg_406 <= listenState;
        listenState_load_reg_406_pp0_iter1_reg <= listenState_load_reg_406;
        tmp_i_23_reg_418 <= tmp_i_23_nbreadreq_fu_138_p3;
        tmp_i_23_reg_418_pp0_iter1_reg <= tmp_i_23_reg_418;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_23_nbreadreq_fu_138_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln1069_reg_422 <= icmp_ln1069_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_23_nbreadreq_fu_138_p3 == 1'd1) & (icmp_ln1069_fu_377_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln174_reg_426 <= trunc_ln174_fu_383_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_nbreadreq_fu_124_p3 == 1'd1) & (listenState == 2'd2))) begin
        ap_phi_mux_currentPort_V_flag_4_i_phi_fu_197_p12 = tmp_fu_280_p1;
    end else if ((((listenState_load_load_fu_268_p1 == 2'd0) & (runExperiment_read_read_fu_118_p2 == 1'd0)) | ((listenState_load_load_fu_268_p1 == 2'd0) & (runExperiment_read_read_fu_118_p2 == 1'd1)))) begin
        ap_phi_mux_currentPort_V_flag_4_i_phi_fu_197_p12 = 1'd1;
    end else if (((listenState_load_load_fu_268_p1 == 2'd3) | (listenState_load_load_fu_268_p1 == 2'd1) | ((tmp_i_nbreadreq_fu_124_p3 == 1'd0) & (listenState == 2'd2)))) begin
        ap_phi_mux_currentPort_V_flag_4_i_phi_fu_197_p12 = 1'd0;
    end else begin
        ap_phi_mux_currentPort_V_flag_4_i_phi_fu_197_p12 = ap_phi_reg_pp0_iter0_currentPort_V_flag_4_i_reg_194;
    end
end

always @ (*) begin
    if (((tmp_i_nbreadreq_fu_124_p3 == 1'd1) & (listenState == 2'd2))) begin
        ap_phi_mux_currentPort_V_new_4_i_phi_fu_219_p12 = select_ln435_fu_303_p3;
    end else if (((listenState_load_load_fu_268_p1 == 2'd0) & (runExperiment_read_read_fu_118_p2 == 1'd0))) begin
        ap_phi_mux_currentPort_V_new_4_i_phi_fu_219_p12 = 16'd0;
    end else if (((listenState_load_load_fu_268_p1 == 2'd0) & (runExperiment_read_read_fu_118_p2 == 1'd1))) begin
        ap_phi_mux_currentPort_V_new_4_i_phi_fu_219_p12 = regBasePort_dout;
    end else begin
        ap_phi_mux_currentPort_V_new_4_i_phi_fu_219_p12 = ap_phi_reg_pp0_iter0_currentPort_V_new_4_i_reg_216;
    end
end

always @ (*) begin
    if (((tmp_i_nbreadreq_fu_124_p3 == 1'd1) & (listenState == 2'd2))) begin
        ap_phi_mux_openedPort_V_new_3_i_phi_fu_241_p12 = select_ln435_1_fu_312_p3;
    end else if ((((listenState_load_load_fu_268_p1 == 2'd0) & (runExperiment_read_read_fu_118_p2 == 1'd0)) | ((listenState_load_load_fu_268_p1 == 2'd0) & (runExperiment_read_read_fu_118_p2 == 1'd1)))) begin
        ap_phi_mux_openedPort_V_new_3_i_phi_fu_241_p12 = 16'd0;
    end else begin
        ap_phi_mux_openedPort_V_new_3_i_phi_fu_241_p12 = ap_phi_reg_pp0_iter0_openedPort_V_new_3_i_reg_238;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (listenState_load_reg_406_pp0_iter1_reg == 2'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (listenState_load_reg_406 == 2'd1)))) begin
        m_axis_listen_port_TDATA_blk_n = m_axis_listen_port_TREADY_int_regslice;
    end else begin
        m_axis_listen_port_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (listenState_load_reg_406 == 2'd1))) begin
        m_axis_listen_port_TVALID_int_regslice = 1'b1;
    end else begin
        m_axis_listen_port_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op85_write_state3 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op83_write_state2 == 1'b1)))) begin
        m_axis_read_package_TDATA_blk_n = m_axis_read_package_TREADY_int_regslice;
    end else begin
        m_axis_read_package_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op83_write_state2 == 1'b1))) begin
        m_axis_read_package_TVALID_int_regslice = 1'b1;
    end else begin
        m_axis_read_package_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0))) begin
        regBasePort_blk_n = regBasePort_empty_n;
    end else begin
        regBasePort_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        regBasePort_read = 1'b1;
    end else begin
        regBasePort_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0))) begin
        runExperiment_blk_n = runExperiment_empty_n;
    end else begin
        runExperiment_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        runExperiment_read = 1'b1;
    end else begin
        runExperiment_read = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op66_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (ap_predicate_op75_read_state1 == 1'b1)))) begin
        rxDataBuffer_blk_n = rxDataBuffer_empty_n;
    end else begin
        rxDataBuffer_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_predicate_op66_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op75_read_state1 == 1'b1)))) begin
        rxDataBuffer_read = 1'b1;
    end else begin
        rxDataBuffer_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op27_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0))) begin
        s_axis_listen_port_status_TDATA_blk_n = s_axis_listen_port_status_TVALID_int_regslice;
    end else begin
        s_axis_listen_port_status_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op27_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        s_axis_listen_port_status_TREADY_int_regslice = 1'b1;
    end else begin
        s_axis_listen_port_status_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_23_nbreadreq_fu_138_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0))) begin
        s_axis_notifications_TDATA_blk_n = s_axis_notifications_TVALID_int_regslice;
    end else begin
        s_axis_notifications_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_i_23_nbreadreq_fu_138_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        s_axis_notifications_TREADY_int_regslice = 1'b1;
    end else begin
        s_axis_notifications_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op65_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0))) begin
        s_axis_rx_metadata_TDATA_blk_n = s_axis_rx_metadata_TVALID_int_regslice;
    end else begin
        s_axis_rx_metadata_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op65_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        s_axis_rx_metadata_TREADY_int_regslice = 1'b1;
    end else begin
        s_axis_rx_metadata_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0))) begin
        usePort_blk_n = usePort_empty_n;
    end else begin
        usePort_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        usePort_read = 1'b1;
    end else begin
        usePort_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln886_1_fu_291_p2 = (openedPort_V + 16'd1);

assign add_ln886_fu_285_p2 = (currentPort_V + 16'd1);

assign and_ln145_fu_321_p2 = (tmp_fu_280_p1 & icmp_ln1065_fu_297_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_m_axis_read_package_U_apdone_blk == 1'b1) | (regslice_both_m_axis_listen_port_U_apdone_blk == 1'b1) | ((m_axis_read_package_TREADY_int_regslice == 1'b0) & (ap_predicate_op85_write_state3 == 1'b1)) | ((m_axis_listen_port_TREADY_int_regslice == 1'b0) & (listenState_load_reg_406_pp0_iter1_reg == 2'd1)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((m_axis_read_package_TREADY_int_regslice == 1'b0) & (ap_predicate_op83_write_state2 == 1'b1)) | ((m_axis_listen_port_TREADY_int_regslice == 1'b0) & (listenState_load_reg_406 == 2'd1)))) | ((ap_start == 1'b1) & ((runExperiment_empty_n == 1'b0) | (regBasePort_empty_n == 1'b0) | (usePort_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((ap_predicate_op66_read_state1 == 1'b1) & (rxDataBuffer_empty_n == 1'b0)) | ((rxDataBuffer_empty_n == 1'b0) & (ap_predicate_op75_read_state1 == 1'b1)) | ((ap_predicate_op65_read_state1 == 1'b1) & (s_axis_rx_metadata_TVALID_int_regslice == 1'b0)) | ((tmp_i_23_nbreadreq_fu_138_p3 == 1'd1) & (s_axis_notifications_TVALID_int_regslice == 1'b0)) | ((ap_predicate_op27_read_state1 == 1'b1) & (s_axis_listen_port_status_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (regslice_both_m_axis_read_package_U_apdone_blk == 1'b1) | (regslice_both_m_axis_listen_port_U_apdone_blk == 1'b1) | ((m_axis_read_package_TREADY_int_regslice == 1'b0) & (ap_predicate_op85_write_state3 == 1'b1)) | ((m_axis_listen_port_TREADY_int_regslice == 1'b0) & (listenState_load_reg_406_pp0_iter1_reg == 2'd1)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((m_axis_read_package_TREADY_int_regslice == 1'b0) & (ap_predicate_op83_write_state2 == 1'b1)) | ((m_axis_listen_port_TREADY_int_regslice == 1'b0) & (listenState_load_reg_406 == 2'd1)))) | ((ap_start == 1'b1) & ((runExperiment_empty_n == 1'b0) | (regBasePort_empty_n == 1'b0) | (usePort_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((ap_predicate_op66_read_state1 == 1'b1) & (rxDataBuffer_empty_n == 1'b0)) | ((rxDataBuffer_empty_n == 1'b0) & (ap_predicate_op75_read_state1 == 1'b1)) | ((ap_predicate_op65_read_state1 == 1'b1) & (s_axis_rx_metadata_TVALID_int_regslice == 1'b0)) | ((tmp_i_23_nbreadreq_fu_138_p3 == 1'd1) & (s_axis_notifications_TVALID_int_regslice == 1'b0)) | ((ap_predicate_op27_read_state1 == 1'b1) & (s_axis_listen_port_status_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state3_io) | (regslice_both_m_axis_read_package_U_apdone_blk == 1'b1) | (regslice_both_m_axis_listen_port_U_apdone_blk == 1'b1) | ((m_axis_read_package_TREADY_int_regslice == 1'b0) & (ap_predicate_op85_write_state3 == 1'b1)) | ((m_axis_listen_port_TREADY_int_regslice == 1'b0) & (listenState_load_reg_406_pp0_iter1_reg == 2'd1)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((m_axis_read_package_TREADY_int_regslice == 1'b0) & (ap_predicate_op83_write_state2 == 1'b1)) | ((m_axis_listen_port_TREADY_int_regslice == 1'b0) & (listenState_load_reg_406 == 2'd1)))) | ((ap_start == 1'b1) & ((runExperiment_empty_n == 1'b0) | (regBasePort_empty_n == 1'b0) | (usePort_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((ap_predicate_op66_read_state1 == 1'b1) & (rxDataBuffer_empty_n == 1'b0)) | ((rxDataBuffer_empty_n == 1'b0) & (ap_predicate_op75_read_state1 == 1'b1)) | ((ap_predicate_op65_read_state1 == 1'b1) & (s_axis_rx_metadata_TVALID_int_regslice == 1'b0)) | ((tmp_i_23_nbreadreq_fu_138_p3 == 1'd1) & (s_axis_notifications_TVALID_int_regslice == 1'b0)) | ((ap_predicate_op27_read_state1 == 1'b1) & (s_axis_listen_port_status_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((runExperiment_empty_n == 1'b0) | (regBasePort_empty_n == 1'b0) | (usePort_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((ap_predicate_op66_read_state1 == 1'b1) & (rxDataBuffer_empty_n == 1'b0)) | ((rxDataBuffer_empty_n == 1'b0) & (ap_predicate_op75_read_state1 == 1'b1)) | ((ap_predicate_op65_read_state1 == 1'b1) & (s_axis_rx_metadata_TVALID_int_regslice == 1'b0)) | ((tmp_i_23_nbreadreq_fu_138_p3 == 1'd1) & (s_axis_notifications_TVALID_int_regslice == 1'b0)) | ((ap_predicate_op27_read_state1 == 1'b1) & (s_axis_listen_port_status_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2_io = (((m_axis_read_package_TREADY_int_regslice == 1'b0) & (ap_predicate_op83_write_state2 == 1'b1)) | ((m_axis_listen_port_TREADY_int_regslice == 1'b0) & (listenState_load_reg_406 == 2'd1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((m_axis_read_package_TREADY_int_regslice == 1'b0) & (ap_predicate_op83_write_state2 == 1'b1)) | ((m_axis_listen_port_TREADY_int_regslice == 1'b0) & (listenState_load_reg_406 == 2'd1)));
end

always @ (*) begin
    ap_block_state3_io = (((m_axis_read_package_TREADY_int_regslice == 1'b0) & (ap_predicate_op85_write_state3 == 1'b1)) | ((m_axis_listen_port_TREADY_int_regslice == 1'b0) & (listenState_load_reg_406_pp0_iter1_reg == 2'd1)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((regslice_both_m_axis_read_package_U_apdone_blk == 1'b1) | (regslice_both_m_axis_listen_port_U_apdone_blk == 1'b1) | ((m_axis_read_package_TREADY_int_regslice == 1'b0) & (ap_predicate_op85_write_state3 == 1'b1)) | ((m_axis_listen_port_TREADY_int_regslice == 1'b0) & (listenState_load_reg_406_pp0_iter1_reg == 2'd1)));
end

always @ (*) begin
    ap_condition_249 = ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_488 = ((grp_nbreadreq_fu_160_p3 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_489 = ((tmp_6_i_nbreadreq_fu_152_p3 == 1'd1) & (serverFsmState == 1'd0) & (grp_fu_260_p3 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_currentPort_V_flag_4_i_reg_194 = 'bx;

assign ap_phi_reg_pp0_iter0_currentPort_V_new_4_i_reg_216 = 'bx;

assign ap_phi_reg_pp0_iter0_openedPort_V_new_3_i_reg_238 = 'bx;

always @ (*) begin
    ap_predicate_op27_read_state1 = ((tmp_i_nbreadreq_fu_124_p3 == 1'd1) & (listenState == 2'd2));
end

always @ (*) begin
    ap_predicate_op65_read_state1 = ((grp_nbreadreq_fu_160_p3 == 1'd1) & (tmp_6_i_nbreadreq_fu_152_p3 == 1'd1) & (serverFsmState == 1'd0));
end

always @ (*) begin
    ap_predicate_op66_read_state1 = ((grp_nbreadreq_fu_160_p3 == 1'd1) & (tmp_6_i_nbreadreq_fu_152_p3 == 1'd1) & (serverFsmState == 1'd0));
end

always @ (*) begin
    ap_predicate_op75_read_state1 = ((grp_nbreadreq_fu_160_p3 == 1'd1) & (serverFsmState == 1'd1));
end

always @ (*) begin
    ap_predicate_op83_write_state2 = ((icmp_ln1069_reg_422 == 1'd0) & (tmp_i_23_reg_418 == 1'd1));
end

always @ (*) begin
    ap_predicate_op85_write_state3 = ((icmp_ln1069_reg_422_pp0_iter1_reg == 1'd0) & (tmp_i_23_reg_418_pp0_iter1_reg == 1'd1));
end

assign grp_fu_260_p3 = rxDataBuffer_dout[1024'd576];

assign grp_nbreadreq_fu_160_p3 = rxDataBuffer_empty_n;

assign icmp_ln1065_fu_297_p2 = ((add_ln886_1_fu_291_p2 == usePort_dout) ? 1'b1 : 1'b0);

assign icmp_ln1069_fu_377_p2 = ((tmp_length_V_fu_367_p4 == 16'd0) ? 1'b1 : 1'b0);

assign listenState_load_load_fu_268_p1 = listenState;

assign m_axis_listen_port_TVALID = regslice_both_m_axis_listen_port_U_vld_out;

assign m_axis_read_package_TVALID = regslice_both_m_axis_read_package_U_vld_out;

assign runExperiment_read_read_fu_118_p2 = runExperiment_dout;

assign s_axis_listen_port_status_TREADY = regslice_both_s_axis_listen_port_status_U_ack_in;

assign s_axis_notifications_TREADY = regslice_both_s_axis_notifications_U_ack_in;

assign s_axis_rx_metadata_TREADY = regslice_both_s_axis_rx_metadata_U_ack_in;

assign select_ln435_1_fu_312_p3 = ((icmp_ln1065_fu_297_p2[0:0] == 1'b1) ? 16'd0 : add_ln886_1_fu_291_p2);

assign select_ln435_fu_303_p3 = ((icmp_ln1065_fu_297_p2[0:0] == 1'b1) ? 16'd0 : add_ln886_fu_285_p2);

assign tmp_6_i_nbreadreq_fu_152_p3 = s_axis_rx_metadata_TVALID_int_regslice;

assign tmp_fu_280_p1 = s_axis_listen_port_status_TDATA_int_regslice[0:0];

assign tmp_i_23_nbreadreq_fu_138_p3 = s_axis_notifications_TVALID_int_regslice;

assign tmp_i_nbreadreq_fu_124_p3 = s_axis_listen_port_status_TVALID_int_regslice;

assign tmp_length_V_fu_367_p4 = {{s_axis_notifications_TDATA_int_regslice[31:16]}};

assign trunc_ln174_fu_383_p1 = s_axis_notifications_TDATA_int_regslice[31:0];

assign xor_ln145_fu_327_p2 = (1'd1 ^ and_ln145_fu_321_p2);

assign zext_ln427_fu_333_p1 = xor_ln145_fu_327_p2;

endmodule //scatter_server_512_s
