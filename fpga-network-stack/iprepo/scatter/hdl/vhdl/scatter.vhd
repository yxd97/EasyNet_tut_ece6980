-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scatter is
port (
    m_axis_listen_port_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    s_axis_listen_port_status_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axis_notifications_TDATA : IN STD_LOGIC_VECTOR (87 downto 0);
    m_axis_read_package_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_axis_rx_metadata_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    s_axis_rx_data_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    s_axis_rx_data_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_rx_data_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_rx_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_open_connection_TDATA : OUT STD_LOGIC_VECTOR (47 downto 0);
    s_axis_open_status_TDATA : IN STD_LOGIC_VECTOR (71 downto 0);
    m_axis_close_connection_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axis_tx_metadata_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axis_tx_data_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axis_tx_data_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_tx_data_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_tx_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axis_tx_status_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    runExperiment : IN STD_LOGIC_VECTOR (0 downto 0);
    useConn : IN STD_LOGIC_VECTOR (15 downto 0);
    useIpAddr : IN STD_LOGIC_VECTOR (15 downto 0);
    pkgWordCount : IN STD_LOGIC_VECTOR (15 downto 0);
    regBasePort : IN STD_LOGIC_VECTOR (15 downto 0);
    usePort : IN STD_LOGIC_VECTOR (15 downto 0);
    expectedRespInKB : IN STD_LOGIC_VECTOR (15 downto 0);
    finishExperiment : IN STD_LOGIC_VECTOR (0 downto 0);
    clientPkgNum : IN STD_LOGIC_VECTOR (31 downto 0);
    regIpAddress0 : IN STD_LOGIC_VECTOR (31 downto 0);
    regIpAddress1 : IN STD_LOGIC_VECTOR (31 downto 0);
    regIpAddress2 : IN STD_LOGIC_VECTOR (31 downto 0);
    regIpAddress3 : IN STD_LOGIC_VECTOR (31 downto 0);
    regIpAddress4 : IN STD_LOGIC_VECTOR (31 downto 0);
    regIpAddress5 : IN STD_LOGIC_VECTOR (31 downto 0);
    regIpAddress6 : IN STD_LOGIC_VECTOR (31 downto 0);
    regIpAddress7 : IN STD_LOGIC_VECTOR (31 downto 0);
    regIpAddress8 : IN STD_LOGIC_VECTOR (31 downto 0);
    regIpAddress9 : IN STD_LOGIC_VECTOR (31 downto 0);
    regIpAddress10 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axis_open_status_TVALID : IN STD_LOGIC;
    s_axis_open_status_TREADY : OUT STD_LOGIC;
    s_axis_tx_status_TVALID : IN STD_LOGIC;
    s_axis_tx_status_TREADY : OUT STD_LOGIC;
    m_axis_tx_data_TVALID : OUT STD_LOGIC;
    m_axis_tx_data_TREADY : IN STD_LOGIC;
    s_axis_rx_data_TVALID : IN STD_LOGIC;
    s_axis_rx_data_TREADY : OUT STD_LOGIC;
    m_axis_open_connection_TVALID : OUT STD_LOGIC;
    m_axis_open_connection_TREADY : IN STD_LOGIC;
    m_axis_tx_metadata_TVALID : OUT STD_LOGIC;
    m_axis_tx_metadata_TREADY : IN STD_LOGIC;
    m_axis_close_connection_TVALID : OUT STD_LOGIC;
    m_axis_close_connection_TREADY : IN STD_LOGIC;
    m_axis_listen_port_TVALID : OUT STD_LOGIC;
    m_axis_listen_port_TREADY : IN STD_LOGIC;
    s_axis_listen_port_status_TVALID : IN STD_LOGIC;
    s_axis_listen_port_status_TREADY : OUT STD_LOGIC;
    s_axis_notifications_TVALID : IN STD_LOGIC;
    s_axis_notifications_TREADY : OUT STD_LOGIC;
    m_axis_read_package_TVALID : OUT STD_LOGIC;
    m_axis_read_package_TREADY : IN STD_LOGIC;
    s_axis_rx_metadata_TVALID : IN STD_LOGIC;
    s_axis_rx_metadata_TREADY : OUT STD_LOGIC );
end;


architecture behav of scatter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "scatter_scatter,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.200000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.079982,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=68,HLS_SYN_DSP=0,HLS_SYN_FF=7248,HLS_SYN_LUT=5568,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_runExperiment_c_din : STD_LOGIC_VECTOR (0 downto 0);
    signal entry_proc_U0_runExperiment_c_write : STD_LOGIC;
    signal entry_proc_U0_runExperiment_c40_din : STD_LOGIC_VECTOR (0 downto 0);
    signal entry_proc_U0_runExperiment_c40_write : STD_LOGIC;
    signal entry_proc_U0_useConn_c_din : STD_LOGIC_VECTOR (15 downto 0);
    signal entry_proc_U0_useConn_c_write : STD_LOGIC;
    signal entry_proc_U0_useIpAddr_c_din : STD_LOGIC_VECTOR (15 downto 0);
    signal entry_proc_U0_useIpAddr_c_write : STD_LOGIC;
    signal entry_proc_U0_pkgWordCount_c_din : STD_LOGIC_VECTOR (15 downto 0);
    signal entry_proc_U0_pkgWordCount_c_write : STD_LOGIC;
    signal entry_proc_U0_regBasePort_c_din : STD_LOGIC_VECTOR (15 downto 0);
    signal entry_proc_U0_regBasePort_c_write : STD_LOGIC;
    signal entry_proc_U0_regBasePort_c41_din : STD_LOGIC_VECTOR (15 downto 0);
    signal entry_proc_U0_regBasePort_c41_write : STD_LOGIC;
    signal entry_proc_U0_usePort_c_din : STD_LOGIC_VECTOR (15 downto 0);
    signal entry_proc_U0_usePort_c_write : STD_LOGIC;
    signal entry_proc_U0_expectedRespInKB_c_din : STD_LOGIC_VECTOR (15 downto 0);
    signal entry_proc_U0_expectedRespInKB_c_write : STD_LOGIC;
    signal entry_proc_U0_clientPkgNum_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_clientPkgNum_c_write : STD_LOGIC;
    signal entry_proc_U0_regIpAddress0_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_regIpAddress0_c_write : STD_LOGIC;
    signal entry_proc_U0_regIpAddress1_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_regIpAddress1_c_write : STD_LOGIC;
    signal entry_proc_U0_regIpAddress2_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_regIpAddress2_c_write : STD_LOGIC;
    signal entry_proc_U0_regIpAddress3_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_regIpAddress3_c_write : STD_LOGIC;
    signal entry_proc_U0_regIpAddress4_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_regIpAddress4_c_write : STD_LOGIC;
    signal entry_proc_U0_regIpAddress5_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_regIpAddress5_c_write : STD_LOGIC;
    signal entry_proc_U0_regIpAddress6_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_regIpAddress6_c_write : STD_LOGIC;
    signal entry_proc_U0_regIpAddress7_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_regIpAddress7_c_write : STD_LOGIC;
    signal entry_proc_U0_regIpAddress8_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_regIpAddress8_c_write : STD_LOGIC;
    signal entry_proc_U0_regIpAddress9_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_regIpAddress9_c_write : STD_LOGIC;
    signal entry_proc_U0_regIpAddress10_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_regIpAddress10_c_write : STD_LOGIC;
    signal openStatus_handler_U0_ap_start : STD_LOGIC;
    signal openStatus_handler_U0_ap_done : STD_LOGIC;
    signal openStatus_handler_U0_ap_continue : STD_LOGIC;
    signal openStatus_handler_U0_ap_idle : STD_LOGIC;
    signal openStatus_handler_U0_ap_ready : STD_LOGIC;
    signal openStatus_handler_U0_openConStatusBuffer_din : STD_LOGIC_VECTOR (95 downto 0);
    signal openStatus_handler_U0_openConStatusBuffer_write : STD_LOGIC;
    signal openStatus_handler_U0_s_axis_open_status_TREADY : STD_LOGIC;
    signal txStatus_handler_U0_ap_start : STD_LOGIC;
    signal txStatus_handler_U0_ap_done : STD_LOGIC;
    signal txStatus_handler_U0_ap_continue : STD_LOGIC;
    signal txStatus_handler_U0_ap_idle : STD_LOGIC;
    signal txStatus_handler_U0_ap_ready : STD_LOGIC;
    signal txStatus_handler_U0_txStatusBuffer_din : STD_LOGIC_VECTOR (95 downto 0);
    signal txStatus_handler_U0_txStatusBuffer_write : STD_LOGIC;
    signal txStatus_handler_U0_s_axis_tx_status_TREADY : STD_LOGIC;
    signal txDataBuffer_handler_512_U0_ap_start : STD_LOGIC;
    signal txDataBuffer_handler_512_U0_ap_done : STD_LOGIC;
    signal txDataBuffer_handler_512_U0_ap_continue : STD_LOGIC;
    signal txDataBuffer_handler_512_U0_ap_idle : STD_LOGIC;
    signal txDataBuffer_handler_512_U0_ap_ready : STD_LOGIC;
    signal txDataBuffer_handler_512_U0_txDataBuffer_read : STD_LOGIC;
    signal txDataBuffer_handler_512_U0_m_axis_tx_data_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal txDataBuffer_handler_512_U0_m_axis_tx_data_TVALID : STD_LOGIC;
    signal txDataBuffer_handler_512_U0_m_axis_tx_data_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal txDataBuffer_handler_512_U0_m_axis_tx_data_TSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal txDataBuffer_handler_512_U0_m_axis_tx_data_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal rxDataBuffer_handler_512_U0_ap_start : STD_LOGIC;
    signal rxDataBuffer_handler_512_U0_ap_done : STD_LOGIC;
    signal rxDataBuffer_handler_512_U0_ap_continue : STD_LOGIC;
    signal rxDataBuffer_handler_512_U0_ap_idle : STD_LOGIC;
    signal rxDataBuffer_handler_512_U0_ap_ready : STD_LOGIC;
    signal rxDataBuffer_handler_512_U0_rxDataBuffer_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal rxDataBuffer_handler_512_U0_rxDataBuffer_write : STD_LOGIC;
    signal rxDataBuffer_handler_512_U0_s_axis_rx_data_TREADY : STD_LOGIC;
    signal client_512_U0_ap_start : STD_LOGIC;
    signal client_512_U0_ap_done : STD_LOGIC;
    signal client_512_U0_ap_continue : STD_LOGIC;
    signal client_512_U0_ap_idle : STD_LOGIC;
    signal client_512_U0_ap_ready : STD_LOGIC;
    signal client_512_U0_regIpAddress10_read : STD_LOGIC;
    signal client_512_U0_regIpAddress9_read : STD_LOGIC;
    signal client_512_U0_regIpAddress8_read : STD_LOGIC;
    signal client_512_U0_regIpAddress7_read : STD_LOGIC;
    signal client_512_U0_regIpAddress6_read : STD_LOGIC;
    signal client_512_U0_regIpAddress5_read : STD_LOGIC;
    signal client_512_U0_regIpAddress4_read : STD_LOGIC;
    signal client_512_U0_regIpAddress3_read : STD_LOGIC;
    signal client_512_U0_regIpAddress2_read : STD_LOGIC;
    signal client_512_U0_regIpAddress1_read : STD_LOGIC;
    signal client_512_U0_regIpAddress0_read : STD_LOGIC;
    signal client_512_U0_clientPkgNum_read : STD_LOGIC;
    signal client_512_U0_expectedRespInKB_read : STD_LOGIC;
    signal client_512_U0_regBasePort_read : STD_LOGIC;
    signal client_512_U0_pkgWordCount_read : STD_LOGIC;
    signal client_512_U0_useIpAddr_read : STD_LOGIC;
    signal client_512_U0_useConn_read : STD_LOGIC;
    signal client_512_U0_runExperiment_read : STD_LOGIC;
    signal client_512_U0_txStatusBuffer_read : STD_LOGIC;
    signal client_512_U0_openConStatusBuffer_read : STD_LOGIC;
    signal client_512_U0_txMetaDataBuffer_din : STD_LOGIC_VECTOR (31 downto 0);
    signal client_512_U0_txMetaDataBuffer_write : STD_LOGIC;
    signal client_512_U0_txDataBuffer_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal client_512_U0_txDataBuffer_write : STD_LOGIC;
    signal client_512_U0_closeConnectionBuffer_din : STD_LOGIC_VECTOR (15 downto 0);
    signal client_512_U0_closeConnectionBuffer_write : STD_LOGIC;
    signal client_512_U0_m_axis_open_connection_TDATA : STD_LOGIC_VECTOR (47 downto 0);
    signal client_512_U0_m_axis_open_connection_TVALID : STD_LOGIC;
    signal txMetaData_handler_U0_ap_start : STD_LOGIC;
    signal txMetaData_handler_U0_ap_done : STD_LOGIC;
    signal txMetaData_handler_U0_ap_continue : STD_LOGIC;
    signal txMetaData_handler_U0_ap_idle : STD_LOGIC;
    signal txMetaData_handler_U0_ap_ready : STD_LOGIC;
    signal txMetaData_handler_U0_txMetaDataBuffer_read : STD_LOGIC;
    signal txMetaData_handler_U0_m_axis_tx_metadata_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal txMetaData_handler_U0_m_axis_tx_metadata_TVALID : STD_LOGIC;
    signal closeConnection_handler_U0_ap_start : STD_LOGIC;
    signal closeConnection_handler_U0_ap_done : STD_LOGIC;
    signal closeConnection_handler_U0_ap_continue : STD_LOGIC;
    signal closeConnection_handler_U0_ap_idle : STD_LOGIC;
    signal closeConnection_handler_U0_ap_ready : STD_LOGIC;
    signal closeConnection_handler_U0_closeConnectionBuffer_read : STD_LOGIC;
    signal closeConnection_handler_U0_m_axis_close_connection_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal closeConnection_handler_U0_m_axis_close_connection_TVALID : STD_LOGIC;
    signal server_512_U0_ap_start : STD_LOGIC;
    signal server_512_U0_ap_done : STD_LOGIC;
    signal server_512_U0_ap_continue : STD_LOGIC;
    signal server_512_U0_ap_idle : STD_LOGIC;
    signal server_512_U0_ap_ready : STD_LOGIC;
    signal server_512_U0_usePort_read : STD_LOGIC;
    signal server_512_U0_regBasePort_read : STD_LOGIC;
    signal server_512_U0_runExperiment_read : STD_LOGIC;
    signal server_512_U0_rxDataBuffer_read : STD_LOGIC;
    signal server_512_U0_m_axis_listen_port_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal server_512_U0_m_axis_listen_port_TVALID : STD_LOGIC;
    signal server_512_U0_s_axis_listen_port_status_TREADY : STD_LOGIC;
    signal server_512_U0_s_axis_notifications_TREADY : STD_LOGIC;
    signal server_512_U0_m_axis_read_package_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal server_512_U0_m_axis_read_package_TVALID : STD_LOGIC;
    signal server_512_U0_s_axis_rx_metadata_TREADY : STD_LOGIC;
    signal runExperiment_c_full_n : STD_LOGIC;
    signal runExperiment_c_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal runExperiment_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal runExperiment_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal runExperiment_c_empty_n : STD_LOGIC;
    signal runExperiment_c40_full_n : STD_LOGIC;
    signal runExperiment_c40_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal runExperiment_c40_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal runExperiment_c40_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal runExperiment_c40_empty_n : STD_LOGIC;
    signal useConn_c_full_n : STD_LOGIC;
    signal useConn_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal useConn_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal useConn_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal useConn_c_empty_n : STD_LOGIC;
    signal useIpAddr_c_full_n : STD_LOGIC;
    signal useIpAddr_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal useIpAddr_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal useIpAddr_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal useIpAddr_c_empty_n : STD_LOGIC;
    signal pkgWordCount_c_full_n : STD_LOGIC;
    signal pkgWordCount_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal pkgWordCount_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal pkgWordCount_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal pkgWordCount_c_empty_n : STD_LOGIC;
    signal regBasePort_c_full_n : STD_LOGIC;
    signal regBasePort_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal regBasePort_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal regBasePort_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal regBasePort_c_empty_n : STD_LOGIC;
    signal regBasePort_c41_full_n : STD_LOGIC;
    signal regBasePort_c41_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal regBasePort_c41_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal regBasePort_c41_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal regBasePort_c41_empty_n : STD_LOGIC;
    signal usePort_c_full_n : STD_LOGIC;
    signal usePort_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal usePort_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal usePort_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal usePort_c_empty_n : STD_LOGIC;
    signal expectedRespInKB_c_full_n : STD_LOGIC;
    signal expectedRespInKB_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal expectedRespInKB_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal expectedRespInKB_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal expectedRespInKB_c_empty_n : STD_LOGIC;
    signal clientPkgNum_c_full_n : STD_LOGIC;
    signal clientPkgNum_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal clientPkgNum_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal clientPkgNum_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal clientPkgNum_c_empty_n : STD_LOGIC;
    signal regIpAddress0_c_full_n : STD_LOGIC;
    signal regIpAddress0_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress0_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress0_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress0_c_empty_n : STD_LOGIC;
    signal regIpAddress1_c_full_n : STD_LOGIC;
    signal regIpAddress1_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress1_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress1_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress1_c_empty_n : STD_LOGIC;
    signal regIpAddress2_c_full_n : STD_LOGIC;
    signal regIpAddress2_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress2_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress2_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress2_c_empty_n : STD_LOGIC;
    signal regIpAddress3_c_full_n : STD_LOGIC;
    signal regIpAddress3_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress3_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress3_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress3_c_empty_n : STD_LOGIC;
    signal regIpAddress4_c_full_n : STD_LOGIC;
    signal regIpAddress4_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress4_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress4_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress4_c_empty_n : STD_LOGIC;
    signal regIpAddress5_c_full_n : STD_LOGIC;
    signal regIpAddress5_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress5_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress5_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress5_c_empty_n : STD_LOGIC;
    signal regIpAddress6_c_full_n : STD_LOGIC;
    signal regIpAddress6_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress6_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress6_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress6_c_empty_n : STD_LOGIC;
    signal regIpAddress7_c_full_n : STD_LOGIC;
    signal regIpAddress7_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress7_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress7_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress7_c_empty_n : STD_LOGIC;
    signal regIpAddress8_c_full_n : STD_LOGIC;
    signal regIpAddress8_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress8_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress8_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress8_c_empty_n : STD_LOGIC;
    signal regIpAddress9_c_full_n : STD_LOGIC;
    signal regIpAddress9_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress9_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress9_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress9_c_empty_n : STD_LOGIC;
    signal regIpAddress10_c_full_n : STD_LOGIC;
    signal regIpAddress10_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal regIpAddress10_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress10_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal regIpAddress10_c_empty_n : STD_LOGIC;
    signal openConStatusBuffer_full_n : STD_LOGIC;
    signal openConStatusBuffer_dout : STD_LOGIC_VECTOR (95 downto 0);
    signal openConStatusBuffer_num_data_valid : STD_LOGIC_VECTOR (9 downto 0);
    signal openConStatusBuffer_fifo_cap : STD_LOGIC_VECTOR (9 downto 0);
    signal openConStatusBuffer_empty_n : STD_LOGIC;
    signal txStatusBuffer_full_n : STD_LOGIC;
    signal txStatusBuffer_dout : STD_LOGIC_VECTOR (95 downto 0);
    signal txStatusBuffer_num_data_valid : STD_LOGIC_VECTOR (9 downto 0);
    signal txStatusBuffer_fifo_cap : STD_LOGIC_VECTOR (9 downto 0);
    signal txStatusBuffer_empty_n : STD_LOGIC;
    signal txDataBuffer_full_n : STD_LOGIC;
    signal txDataBuffer_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal txDataBuffer_num_data_valid : STD_LOGIC_VECTOR (9 downto 0);
    signal txDataBuffer_fifo_cap : STD_LOGIC_VECTOR (9 downto 0);
    signal txDataBuffer_empty_n : STD_LOGIC;
    signal rxDataBuffer_full_n : STD_LOGIC;
    signal rxDataBuffer_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal rxDataBuffer_num_data_valid : STD_LOGIC_VECTOR (9 downto 0);
    signal rxDataBuffer_fifo_cap : STD_LOGIC_VECTOR (9 downto 0);
    signal rxDataBuffer_empty_n : STD_LOGIC;
    signal txMetaDataBuffer_full_n : STD_LOGIC;
    signal txMetaDataBuffer_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal txMetaDataBuffer_num_data_valid : STD_LOGIC_VECTOR (9 downto 0);
    signal txMetaDataBuffer_fifo_cap : STD_LOGIC_VECTOR (9 downto 0);
    signal txMetaDataBuffer_empty_n : STD_LOGIC;
    signal closeConnectionBuffer_full_n : STD_LOGIC;
    signal closeConnectionBuffer_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal closeConnectionBuffer_num_data_valid : STD_LOGIC_VECTOR (9 downto 0);
    signal closeConnectionBuffer_fifo_cap : STD_LOGIC_VECTOR (9 downto 0);
    signal closeConnectionBuffer_empty_n : STD_LOGIC;

    component scatter_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        runExperiment : IN STD_LOGIC_VECTOR (0 downto 0);
        runExperiment_c_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        runExperiment_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        runExperiment_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        runExperiment_c_full_n : IN STD_LOGIC;
        runExperiment_c_write : OUT STD_LOGIC;
        runExperiment_c40_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        runExperiment_c40_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        runExperiment_c40_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        runExperiment_c40_full_n : IN STD_LOGIC;
        runExperiment_c40_write : OUT STD_LOGIC;
        useConn : IN STD_LOGIC_VECTOR (15 downto 0);
        useConn_c_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        useConn_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        useConn_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        useConn_c_full_n : IN STD_LOGIC;
        useConn_c_write : OUT STD_LOGIC;
        useIpAddr : IN STD_LOGIC_VECTOR (15 downto 0);
        useIpAddr_c_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        useIpAddr_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        useIpAddr_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        useIpAddr_c_full_n : IN STD_LOGIC;
        useIpAddr_c_write : OUT STD_LOGIC;
        pkgWordCount : IN STD_LOGIC_VECTOR (15 downto 0);
        pkgWordCount_c_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        pkgWordCount_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        pkgWordCount_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        pkgWordCount_c_full_n : IN STD_LOGIC;
        pkgWordCount_c_write : OUT STD_LOGIC;
        regBasePort : IN STD_LOGIC_VECTOR (15 downto 0);
        regBasePort_c_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        regBasePort_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regBasePort_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regBasePort_c_full_n : IN STD_LOGIC;
        regBasePort_c_write : OUT STD_LOGIC;
        regBasePort_c41_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        regBasePort_c41_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regBasePort_c41_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regBasePort_c41_full_n : IN STD_LOGIC;
        regBasePort_c41_write : OUT STD_LOGIC;
        usePort : IN STD_LOGIC_VECTOR (15 downto 0);
        usePort_c_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        usePort_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        usePort_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        usePort_c_full_n : IN STD_LOGIC;
        usePort_c_write : OUT STD_LOGIC;
        expectedRespInKB : IN STD_LOGIC_VECTOR (15 downto 0);
        expectedRespInKB_c_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        expectedRespInKB_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        expectedRespInKB_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        expectedRespInKB_c_full_n : IN STD_LOGIC;
        expectedRespInKB_c_write : OUT STD_LOGIC;
        clientPkgNum : IN STD_LOGIC_VECTOR (31 downto 0);
        clientPkgNum_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        clientPkgNum_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        clientPkgNum_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        clientPkgNum_c_full_n : IN STD_LOGIC;
        clientPkgNum_c_write : OUT STD_LOGIC;
        regIpAddress0 : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress0_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress0_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress0_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress0_c_full_n : IN STD_LOGIC;
        regIpAddress0_c_write : OUT STD_LOGIC;
        regIpAddress1 : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress1_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress1_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress1_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress1_c_full_n : IN STD_LOGIC;
        regIpAddress1_c_write : OUT STD_LOGIC;
        regIpAddress2 : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress2_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress2_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress2_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress2_c_full_n : IN STD_LOGIC;
        regIpAddress2_c_write : OUT STD_LOGIC;
        regIpAddress3 : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress3_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress3_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress3_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress3_c_full_n : IN STD_LOGIC;
        regIpAddress3_c_write : OUT STD_LOGIC;
        regIpAddress4 : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress4_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress4_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress4_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress4_c_full_n : IN STD_LOGIC;
        regIpAddress4_c_write : OUT STD_LOGIC;
        regIpAddress5 : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress5_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress5_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress5_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress5_c_full_n : IN STD_LOGIC;
        regIpAddress5_c_write : OUT STD_LOGIC;
        regIpAddress6 : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress6_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress6_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress6_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress6_c_full_n : IN STD_LOGIC;
        regIpAddress6_c_write : OUT STD_LOGIC;
        regIpAddress7 : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress7_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress7_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress7_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress7_c_full_n : IN STD_LOGIC;
        regIpAddress7_c_write : OUT STD_LOGIC;
        regIpAddress8 : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress8_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress8_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress8_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress8_c_full_n : IN STD_LOGIC;
        regIpAddress8_c_write : OUT STD_LOGIC;
        regIpAddress9 : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress9_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress9_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress9_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress9_c_full_n : IN STD_LOGIC;
        regIpAddress9_c_write : OUT STD_LOGIC;
        regIpAddress10 : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress10_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress10_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress10_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress10_c_full_n : IN STD_LOGIC;
        regIpAddress10_c_write : OUT STD_LOGIC );
    end component;


    component scatter_openStatus_handler IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_axis_open_status_TVALID : IN STD_LOGIC;
        openConStatusBuffer_din : OUT STD_LOGIC_VECTOR (95 downto 0);
        openConStatusBuffer_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        openConStatusBuffer_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        openConStatusBuffer_full_n : IN STD_LOGIC;
        openConStatusBuffer_write : OUT STD_LOGIC;
        s_axis_open_status_TDATA : IN STD_LOGIC_VECTOR (71 downto 0);
        s_axis_open_status_TREADY : OUT STD_LOGIC );
    end component;


    component scatter_txStatus_handler IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_axis_tx_status_TVALID : IN STD_LOGIC;
        txStatusBuffer_din : OUT STD_LOGIC_VECTOR (95 downto 0);
        txStatusBuffer_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        txStatusBuffer_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        txStatusBuffer_full_n : IN STD_LOGIC;
        txStatusBuffer_write : OUT STD_LOGIC;
        s_axis_tx_status_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_tx_status_TREADY : OUT STD_LOGIC );
    end component;


    component scatter_txDataBuffer_handler_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        txDataBuffer_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        txDataBuffer_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        txDataBuffer_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        txDataBuffer_empty_n : IN STD_LOGIC;
        txDataBuffer_read : OUT STD_LOGIC;
        m_axis_tx_data_TREADY : IN STD_LOGIC;
        m_axis_tx_data_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axis_tx_data_TVALID : OUT STD_LOGIC;
        m_axis_tx_data_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_tx_data_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_tx_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component scatter_rxDataBuffer_handler_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_axis_rx_data_TVALID : IN STD_LOGIC;
        rxDataBuffer_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        rxDataBuffer_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        rxDataBuffer_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        rxDataBuffer_full_n : IN STD_LOGIC;
        rxDataBuffer_write : OUT STD_LOGIC;
        s_axis_rx_data_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        s_axis_rx_data_TREADY : OUT STD_LOGIC;
        s_axis_rx_data_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_rx_data_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_rx_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component scatter_client_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        regIpAddress10_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress10_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress10_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress10_empty_n : IN STD_LOGIC;
        regIpAddress10_read : OUT STD_LOGIC;
        regIpAddress9_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress9_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress9_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress9_empty_n : IN STD_LOGIC;
        regIpAddress9_read : OUT STD_LOGIC;
        regIpAddress8_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress8_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress8_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress8_empty_n : IN STD_LOGIC;
        regIpAddress8_read : OUT STD_LOGIC;
        regIpAddress7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress7_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress7_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress7_empty_n : IN STD_LOGIC;
        regIpAddress7_read : OUT STD_LOGIC;
        regIpAddress6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress6_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress6_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress6_empty_n : IN STD_LOGIC;
        regIpAddress6_read : OUT STD_LOGIC;
        regIpAddress5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress5_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress5_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress5_empty_n : IN STD_LOGIC;
        regIpAddress5_read : OUT STD_LOGIC;
        regIpAddress4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress4_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress4_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress4_empty_n : IN STD_LOGIC;
        regIpAddress4_read : OUT STD_LOGIC;
        regIpAddress3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress3_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress3_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress3_empty_n : IN STD_LOGIC;
        regIpAddress3_read : OUT STD_LOGIC;
        regIpAddress2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress2_empty_n : IN STD_LOGIC;
        regIpAddress2_read : OUT STD_LOGIC;
        regIpAddress1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress1_empty_n : IN STD_LOGIC;
        regIpAddress1_read : OUT STD_LOGIC;
        regIpAddress0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        regIpAddress0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regIpAddress0_empty_n : IN STD_LOGIC;
        regIpAddress0_read : OUT STD_LOGIC;
        clientPkgNum_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        clientPkgNum_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        clientPkgNum_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        clientPkgNum_empty_n : IN STD_LOGIC;
        clientPkgNum_read : OUT STD_LOGIC;
        expectedRespInKB_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        expectedRespInKB_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        expectedRespInKB_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        expectedRespInKB_empty_n : IN STD_LOGIC;
        expectedRespInKB_read : OUT STD_LOGIC;
        regBasePort_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        regBasePort_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regBasePort_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regBasePort_empty_n : IN STD_LOGIC;
        regBasePort_read : OUT STD_LOGIC;
        pkgWordCount_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        pkgWordCount_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        pkgWordCount_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        pkgWordCount_empty_n : IN STD_LOGIC;
        pkgWordCount_read : OUT STD_LOGIC;
        useIpAddr_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        useIpAddr_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        useIpAddr_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        useIpAddr_empty_n : IN STD_LOGIC;
        useIpAddr_read : OUT STD_LOGIC;
        useConn_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        useConn_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        useConn_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        useConn_empty_n : IN STD_LOGIC;
        useConn_read : OUT STD_LOGIC;
        runExperiment_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        runExperiment_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        runExperiment_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        runExperiment_empty_n : IN STD_LOGIC;
        runExperiment_read : OUT STD_LOGIC;
        txStatusBuffer_dout : IN STD_LOGIC_VECTOR (95 downto 0);
        txStatusBuffer_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        txStatusBuffer_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        txStatusBuffer_empty_n : IN STD_LOGIC;
        txStatusBuffer_read : OUT STD_LOGIC;
        openConStatusBuffer_dout : IN STD_LOGIC_VECTOR (95 downto 0);
        openConStatusBuffer_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        openConStatusBuffer_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        openConStatusBuffer_empty_n : IN STD_LOGIC;
        openConStatusBuffer_read : OUT STD_LOGIC;
        txMetaDataBuffer_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        txMetaDataBuffer_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        txMetaDataBuffer_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        txMetaDataBuffer_full_n : IN STD_LOGIC;
        txMetaDataBuffer_write : OUT STD_LOGIC;
        txDataBuffer_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        txDataBuffer_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        txDataBuffer_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        txDataBuffer_full_n : IN STD_LOGIC;
        txDataBuffer_write : OUT STD_LOGIC;
        m_axis_open_connection_TREADY : IN STD_LOGIC;
        closeConnectionBuffer_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        closeConnectionBuffer_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        closeConnectionBuffer_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        closeConnectionBuffer_full_n : IN STD_LOGIC;
        closeConnectionBuffer_write : OUT STD_LOGIC;
        m_axis_open_connection_TDATA : OUT STD_LOGIC_VECTOR (47 downto 0);
        m_axis_open_connection_TVALID : OUT STD_LOGIC );
    end component;


    component scatter_txMetaData_handler IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        txMetaDataBuffer_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        txMetaDataBuffer_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        txMetaDataBuffer_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        txMetaDataBuffer_empty_n : IN STD_LOGIC;
        txMetaDataBuffer_read : OUT STD_LOGIC;
        m_axis_tx_metadata_TREADY : IN STD_LOGIC;
        m_axis_tx_metadata_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axis_tx_metadata_TVALID : OUT STD_LOGIC );
    end component;


    component scatter_closeConnection_handler IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        closeConnectionBuffer_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        closeConnectionBuffer_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        closeConnectionBuffer_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        closeConnectionBuffer_empty_n : IN STD_LOGIC;
        closeConnectionBuffer_read : OUT STD_LOGIC;
        m_axis_close_connection_TREADY : IN STD_LOGIC;
        m_axis_close_connection_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axis_close_connection_TVALID : OUT STD_LOGIC );
    end component;


    component scatter_server_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        usePort_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        usePort_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        usePort_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        usePort_empty_n : IN STD_LOGIC;
        usePort_read : OUT STD_LOGIC;
        regBasePort_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        regBasePort_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        regBasePort_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        regBasePort_empty_n : IN STD_LOGIC;
        regBasePort_read : OUT STD_LOGIC;
        runExperiment_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        runExperiment_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        runExperiment_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        runExperiment_empty_n : IN STD_LOGIC;
        runExperiment_read : OUT STD_LOGIC;
        s_axis_listen_port_status_TVALID : IN STD_LOGIC;
        s_axis_notifications_TVALID : IN STD_LOGIC;
        s_axis_rx_metadata_TVALID : IN STD_LOGIC;
        rxDataBuffer_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        rxDataBuffer_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        rxDataBuffer_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        rxDataBuffer_empty_n : IN STD_LOGIC;
        rxDataBuffer_read : OUT STD_LOGIC;
        m_axis_listen_port_TREADY : IN STD_LOGIC;
        m_axis_read_package_TREADY : IN STD_LOGIC;
        m_axis_listen_port_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axis_listen_port_TVALID : OUT STD_LOGIC;
        s_axis_listen_port_status_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        s_axis_listen_port_status_TREADY : OUT STD_LOGIC;
        s_axis_notifications_TDATA : IN STD_LOGIC_VECTOR (87 downto 0);
        s_axis_notifications_TREADY : OUT STD_LOGIC;
        m_axis_read_package_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axis_read_package_TVALID : OUT STD_LOGIC;
        s_axis_rx_metadata_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        s_axis_rx_metadata_TREADY : OUT STD_LOGIC );
    end component;


    component scatter_fifo_w1_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component scatter_fifo_w16_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component scatter_fifo_w32_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component scatter_fifo_w96_d512_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (95 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (95 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component scatter_fifo_w1024_d512_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1023 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1023 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component scatter_fifo_w32_d512_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component scatter_fifo_w16_d512_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    entry_proc_U0 : component scatter_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => entry_proc_U0_ap_start,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        runExperiment => runExperiment,
        runExperiment_c_din => entry_proc_U0_runExperiment_c_din,
        runExperiment_c_num_data_valid => runExperiment_c_num_data_valid,
        runExperiment_c_fifo_cap => runExperiment_c_fifo_cap,
        runExperiment_c_full_n => runExperiment_c_full_n,
        runExperiment_c_write => entry_proc_U0_runExperiment_c_write,
        runExperiment_c40_din => entry_proc_U0_runExperiment_c40_din,
        runExperiment_c40_num_data_valid => runExperiment_c40_num_data_valid,
        runExperiment_c40_fifo_cap => runExperiment_c40_fifo_cap,
        runExperiment_c40_full_n => runExperiment_c40_full_n,
        runExperiment_c40_write => entry_proc_U0_runExperiment_c40_write,
        useConn => useConn,
        useConn_c_din => entry_proc_U0_useConn_c_din,
        useConn_c_num_data_valid => useConn_c_num_data_valid,
        useConn_c_fifo_cap => useConn_c_fifo_cap,
        useConn_c_full_n => useConn_c_full_n,
        useConn_c_write => entry_proc_U0_useConn_c_write,
        useIpAddr => useIpAddr,
        useIpAddr_c_din => entry_proc_U0_useIpAddr_c_din,
        useIpAddr_c_num_data_valid => useIpAddr_c_num_data_valid,
        useIpAddr_c_fifo_cap => useIpAddr_c_fifo_cap,
        useIpAddr_c_full_n => useIpAddr_c_full_n,
        useIpAddr_c_write => entry_proc_U0_useIpAddr_c_write,
        pkgWordCount => pkgWordCount,
        pkgWordCount_c_din => entry_proc_U0_pkgWordCount_c_din,
        pkgWordCount_c_num_data_valid => pkgWordCount_c_num_data_valid,
        pkgWordCount_c_fifo_cap => pkgWordCount_c_fifo_cap,
        pkgWordCount_c_full_n => pkgWordCount_c_full_n,
        pkgWordCount_c_write => entry_proc_U0_pkgWordCount_c_write,
        regBasePort => regBasePort,
        regBasePort_c_din => entry_proc_U0_regBasePort_c_din,
        regBasePort_c_num_data_valid => regBasePort_c_num_data_valid,
        regBasePort_c_fifo_cap => regBasePort_c_fifo_cap,
        regBasePort_c_full_n => regBasePort_c_full_n,
        regBasePort_c_write => entry_proc_U0_regBasePort_c_write,
        regBasePort_c41_din => entry_proc_U0_regBasePort_c41_din,
        regBasePort_c41_num_data_valid => regBasePort_c41_num_data_valid,
        regBasePort_c41_fifo_cap => regBasePort_c41_fifo_cap,
        regBasePort_c41_full_n => regBasePort_c41_full_n,
        regBasePort_c41_write => entry_proc_U0_regBasePort_c41_write,
        usePort => usePort,
        usePort_c_din => entry_proc_U0_usePort_c_din,
        usePort_c_num_data_valid => usePort_c_num_data_valid,
        usePort_c_fifo_cap => usePort_c_fifo_cap,
        usePort_c_full_n => usePort_c_full_n,
        usePort_c_write => entry_proc_U0_usePort_c_write,
        expectedRespInKB => expectedRespInKB,
        expectedRespInKB_c_din => entry_proc_U0_expectedRespInKB_c_din,
        expectedRespInKB_c_num_data_valid => expectedRespInKB_c_num_data_valid,
        expectedRespInKB_c_fifo_cap => expectedRespInKB_c_fifo_cap,
        expectedRespInKB_c_full_n => expectedRespInKB_c_full_n,
        expectedRespInKB_c_write => entry_proc_U0_expectedRespInKB_c_write,
        clientPkgNum => clientPkgNum,
        clientPkgNum_c_din => entry_proc_U0_clientPkgNum_c_din,
        clientPkgNum_c_num_data_valid => clientPkgNum_c_num_data_valid,
        clientPkgNum_c_fifo_cap => clientPkgNum_c_fifo_cap,
        clientPkgNum_c_full_n => clientPkgNum_c_full_n,
        clientPkgNum_c_write => entry_proc_U0_clientPkgNum_c_write,
        regIpAddress0 => regIpAddress0,
        regIpAddress0_c_din => entry_proc_U0_regIpAddress0_c_din,
        regIpAddress0_c_num_data_valid => regIpAddress0_c_num_data_valid,
        regIpAddress0_c_fifo_cap => regIpAddress0_c_fifo_cap,
        regIpAddress0_c_full_n => regIpAddress0_c_full_n,
        regIpAddress0_c_write => entry_proc_U0_regIpAddress0_c_write,
        regIpAddress1 => regIpAddress1,
        regIpAddress1_c_din => entry_proc_U0_regIpAddress1_c_din,
        regIpAddress1_c_num_data_valid => regIpAddress1_c_num_data_valid,
        regIpAddress1_c_fifo_cap => regIpAddress1_c_fifo_cap,
        regIpAddress1_c_full_n => regIpAddress1_c_full_n,
        regIpAddress1_c_write => entry_proc_U0_regIpAddress1_c_write,
        regIpAddress2 => regIpAddress2,
        regIpAddress2_c_din => entry_proc_U0_regIpAddress2_c_din,
        regIpAddress2_c_num_data_valid => regIpAddress2_c_num_data_valid,
        regIpAddress2_c_fifo_cap => regIpAddress2_c_fifo_cap,
        regIpAddress2_c_full_n => regIpAddress2_c_full_n,
        regIpAddress2_c_write => entry_proc_U0_regIpAddress2_c_write,
        regIpAddress3 => regIpAddress3,
        regIpAddress3_c_din => entry_proc_U0_regIpAddress3_c_din,
        regIpAddress3_c_num_data_valid => regIpAddress3_c_num_data_valid,
        regIpAddress3_c_fifo_cap => regIpAddress3_c_fifo_cap,
        regIpAddress3_c_full_n => regIpAddress3_c_full_n,
        regIpAddress3_c_write => entry_proc_U0_regIpAddress3_c_write,
        regIpAddress4 => regIpAddress4,
        regIpAddress4_c_din => entry_proc_U0_regIpAddress4_c_din,
        regIpAddress4_c_num_data_valid => regIpAddress4_c_num_data_valid,
        regIpAddress4_c_fifo_cap => regIpAddress4_c_fifo_cap,
        regIpAddress4_c_full_n => regIpAddress4_c_full_n,
        regIpAddress4_c_write => entry_proc_U0_regIpAddress4_c_write,
        regIpAddress5 => regIpAddress5,
        regIpAddress5_c_din => entry_proc_U0_regIpAddress5_c_din,
        regIpAddress5_c_num_data_valid => regIpAddress5_c_num_data_valid,
        regIpAddress5_c_fifo_cap => regIpAddress5_c_fifo_cap,
        regIpAddress5_c_full_n => regIpAddress5_c_full_n,
        regIpAddress5_c_write => entry_proc_U0_regIpAddress5_c_write,
        regIpAddress6 => regIpAddress6,
        regIpAddress6_c_din => entry_proc_U0_regIpAddress6_c_din,
        regIpAddress6_c_num_data_valid => regIpAddress6_c_num_data_valid,
        regIpAddress6_c_fifo_cap => regIpAddress6_c_fifo_cap,
        regIpAddress6_c_full_n => regIpAddress6_c_full_n,
        regIpAddress6_c_write => entry_proc_U0_regIpAddress6_c_write,
        regIpAddress7 => regIpAddress7,
        regIpAddress7_c_din => entry_proc_U0_regIpAddress7_c_din,
        regIpAddress7_c_num_data_valid => regIpAddress7_c_num_data_valid,
        regIpAddress7_c_fifo_cap => regIpAddress7_c_fifo_cap,
        regIpAddress7_c_full_n => regIpAddress7_c_full_n,
        regIpAddress7_c_write => entry_proc_U0_regIpAddress7_c_write,
        regIpAddress8 => regIpAddress8,
        regIpAddress8_c_din => entry_proc_U0_regIpAddress8_c_din,
        regIpAddress8_c_num_data_valid => regIpAddress8_c_num_data_valid,
        regIpAddress8_c_fifo_cap => regIpAddress8_c_fifo_cap,
        regIpAddress8_c_full_n => regIpAddress8_c_full_n,
        regIpAddress8_c_write => entry_proc_U0_regIpAddress8_c_write,
        regIpAddress9 => regIpAddress9,
        regIpAddress9_c_din => entry_proc_U0_regIpAddress9_c_din,
        regIpAddress9_c_num_data_valid => regIpAddress9_c_num_data_valid,
        regIpAddress9_c_fifo_cap => regIpAddress9_c_fifo_cap,
        regIpAddress9_c_full_n => regIpAddress9_c_full_n,
        regIpAddress9_c_write => entry_proc_U0_regIpAddress9_c_write,
        regIpAddress10 => regIpAddress10,
        regIpAddress10_c_din => entry_proc_U0_regIpAddress10_c_din,
        regIpAddress10_c_num_data_valid => regIpAddress10_c_num_data_valid,
        regIpAddress10_c_fifo_cap => regIpAddress10_c_fifo_cap,
        regIpAddress10_c_full_n => regIpAddress10_c_full_n,
        regIpAddress10_c_write => entry_proc_U0_regIpAddress10_c_write);

    openStatus_handler_U0 : component scatter_openStatus_handler
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => openStatus_handler_U0_ap_start,
        ap_done => openStatus_handler_U0_ap_done,
        ap_continue => openStatus_handler_U0_ap_continue,
        ap_idle => openStatus_handler_U0_ap_idle,
        ap_ready => openStatus_handler_U0_ap_ready,
        s_axis_open_status_TVALID => s_axis_open_status_TVALID,
        openConStatusBuffer_din => openStatus_handler_U0_openConStatusBuffer_din,
        openConStatusBuffer_num_data_valid => openConStatusBuffer_num_data_valid,
        openConStatusBuffer_fifo_cap => openConStatusBuffer_fifo_cap,
        openConStatusBuffer_full_n => openConStatusBuffer_full_n,
        openConStatusBuffer_write => openStatus_handler_U0_openConStatusBuffer_write,
        s_axis_open_status_TDATA => s_axis_open_status_TDATA,
        s_axis_open_status_TREADY => openStatus_handler_U0_s_axis_open_status_TREADY);

    txStatus_handler_U0 : component scatter_txStatus_handler
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => txStatus_handler_U0_ap_start,
        ap_done => txStatus_handler_U0_ap_done,
        ap_continue => txStatus_handler_U0_ap_continue,
        ap_idle => txStatus_handler_U0_ap_idle,
        ap_ready => txStatus_handler_U0_ap_ready,
        s_axis_tx_status_TVALID => s_axis_tx_status_TVALID,
        txStatusBuffer_din => txStatus_handler_U0_txStatusBuffer_din,
        txStatusBuffer_num_data_valid => txStatusBuffer_num_data_valid,
        txStatusBuffer_fifo_cap => txStatusBuffer_fifo_cap,
        txStatusBuffer_full_n => txStatusBuffer_full_n,
        txStatusBuffer_write => txStatus_handler_U0_txStatusBuffer_write,
        s_axis_tx_status_TDATA => s_axis_tx_status_TDATA,
        s_axis_tx_status_TREADY => txStatus_handler_U0_s_axis_tx_status_TREADY);

    txDataBuffer_handler_512_U0 : component scatter_txDataBuffer_handler_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => txDataBuffer_handler_512_U0_ap_start,
        ap_done => txDataBuffer_handler_512_U0_ap_done,
        ap_continue => txDataBuffer_handler_512_U0_ap_continue,
        ap_idle => txDataBuffer_handler_512_U0_ap_idle,
        ap_ready => txDataBuffer_handler_512_U0_ap_ready,
        txDataBuffer_dout => txDataBuffer_dout,
        txDataBuffer_num_data_valid => txDataBuffer_num_data_valid,
        txDataBuffer_fifo_cap => txDataBuffer_fifo_cap,
        txDataBuffer_empty_n => txDataBuffer_empty_n,
        txDataBuffer_read => txDataBuffer_handler_512_U0_txDataBuffer_read,
        m_axis_tx_data_TREADY => m_axis_tx_data_TREADY,
        m_axis_tx_data_TDATA => txDataBuffer_handler_512_U0_m_axis_tx_data_TDATA,
        m_axis_tx_data_TVALID => txDataBuffer_handler_512_U0_m_axis_tx_data_TVALID,
        m_axis_tx_data_TKEEP => txDataBuffer_handler_512_U0_m_axis_tx_data_TKEEP,
        m_axis_tx_data_TSTRB => txDataBuffer_handler_512_U0_m_axis_tx_data_TSTRB,
        m_axis_tx_data_TLAST => txDataBuffer_handler_512_U0_m_axis_tx_data_TLAST);

    rxDataBuffer_handler_512_U0 : component scatter_rxDataBuffer_handler_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => rxDataBuffer_handler_512_U0_ap_start,
        ap_done => rxDataBuffer_handler_512_U0_ap_done,
        ap_continue => rxDataBuffer_handler_512_U0_ap_continue,
        ap_idle => rxDataBuffer_handler_512_U0_ap_idle,
        ap_ready => rxDataBuffer_handler_512_U0_ap_ready,
        s_axis_rx_data_TVALID => s_axis_rx_data_TVALID,
        rxDataBuffer_din => rxDataBuffer_handler_512_U0_rxDataBuffer_din,
        rxDataBuffer_num_data_valid => rxDataBuffer_num_data_valid,
        rxDataBuffer_fifo_cap => rxDataBuffer_fifo_cap,
        rxDataBuffer_full_n => rxDataBuffer_full_n,
        rxDataBuffer_write => rxDataBuffer_handler_512_U0_rxDataBuffer_write,
        s_axis_rx_data_TDATA => s_axis_rx_data_TDATA,
        s_axis_rx_data_TREADY => rxDataBuffer_handler_512_U0_s_axis_rx_data_TREADY,
        s_axis_rx_data_TKEEP => s_axis_rx_data_TKEEP,
        s_axis_rx_data_TSTRB => s_axis_rx_data_TSTRB,
        s_axis_rx_data_TLAST => s_axis_rx_data_TLAST);

    client_512_U0 : component scatter_client_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => client_512_U0_ap_start,
        ap_done => client_512_U0_ap_done,
        ap_continue => client_512_U0_ap_continue,
        ap_idle => client_512_U0_ap_idle,
        ap_ready => client_512_U0_ap_ready,
        regIpAddress10_dout => regIpAddress10_c_dout,
        regIpAddress10_num_data_valid => regIpAddress10_c_num_data_valid,
        regIpAddress10_fifo_cap => regIpAddress10_c_fifo_cap,
        regIpAddress10_empty_n => regIpAddress10_c_empty_n,
        regIpAddress10_read => client_512_U0_regIpAddress10_read,
        regIpAddress9_dout => regIpAddress9_c_dout,
        regIpAddress9_num_data_valid => regIpAddress9_c_num_data_valid,
        regIpAddress9_fifo_cap => regIpAddress9_c_fifo_cap,
        regIpAddress9_empty_n => regIpAddress9_c_empty_n,
        regIpAddress9_read => client_512_U0_regIpAddress9_read,
        regIpAddress8_dout => regIpAddress8_c_dout,
        regIpAddress8_num_data_valid => regIpAddress8_c_num_data_valid,
        regIpAddress8_fifo_cap => regIpAddress8_c_fifo_cap,
        regIpAddress8_empty_n => regIpAddress8_c_empty_n,
        regIpAddress8_read => client_512_U0_regIpAddress8_read,
        regIpAddress7_dout => regIpAddress7_c_dout,
        regIpAddress7_num_data_valid => regIpAddress7_c_num_data_valid,
        regIpAddress7_fifo_cap => regIpAddress7_c_fifo_cap,
        regIpAddress7_empty_n => regIpAddress7_c_empty_n,
        regIpAddress7_read => client_512_U0_regIpAddress7_read,
        regIpAddress6_dout => regIpAddress6_c_dout,
        regIpAddress6_num_data_valid => regIpAddress6_c_num_data_valid,
        regIpAddress6_fifo_cap => regIpAddress6_c_fifo_cap,
        regIpAddress6_empty_n => regIpAddress6_c_empty_n,
        regIpAddress6_read => client_512_U0_regIpAddress6_read,
        regIpAddress5_dout => regIpAddress5_c_dout,
        regIpAddress5_num_data_valid => regIpAddress5_c_num_data_valid,
        regIpAddress5_fifo_cap => regIpAddress5_c_fifo_cap,
        regIpAddress5_empty_n => regIpAddress5_c_empty_n,
        regIpAddress5_read => client_512_U0_regIpAddress5_read,
        regIpAddress4_dout => regIpAddress4_c_dout,
        regIpAddress4_num_data_valid => regIpAddress4_c_num_data_valid,
        regIpAddress4_fifo_cap => regIpAddress4_c_fifo_cap,
        regIpAddress4_empty_n => regIpAddress4_c_empty_n,
        regIpAddress4_read => client_512_U0_regIpAddress4_read,
        regIpAddress3_dout => regIpAddress3_c_dout,
        regIpAddress3_num_data_valid => regIpAddress3_c_num_data_valid,
        regIpAddress3_fifo_cap => regIpAddress3_c_fifo_cap,
        regIpAddress3_empty_n => regIpAddress3_c_empty_n,
        regIpAddress3_read => client_512_U0_regIpAddress3_read,
        regIpAddress2_dout => regIpAddress2_c_dout,
        regIpAddress2_num_data_valid => regIpAddress2_c_num_data_valid,
        regIpAddress2_fifo_cap => regIpAddress2_c_fifo_cap,
        regIpAddress2_empty_n => regIpAddress2_c_empty_n,
        regIpAddress2_read => client_512_U0_regIpAddress2_read,
        regIpAddress1_dout => regIpAddress1_c_dout,
        regIpAddress1_num_data_valid => regIpAddress1_c_num_data_valid,
        regIpAddress1_fifo_cap => regIpAddress1_c_fifo_cap,
        regIpAddress1_empty_n => regIpAddress1_c_empty_n,
        regIpAddress1_read => client_512_U0_regIpAddress1_read,
        regIpAddress0_dout => regIpAddress0_c_dout,
        regIpAddress0_num_data_valid => regIpAddress0_c_num_data_valid,
        regIpAddress0_fifo_cap => regIpAddress0_c_fifo_cap,
        regIpAddress0_empty_n => regIpAddress0_c_empty_n,
        regIpAddress0_read => client_512_U0_regIpAddress0_read,
        clientPkgNum_dout => clientPkgNum_c_dout,
        clientPkgNum_num_data_valid => clientPkgNum_c_num_data_valid,
        clientPkgNum_fifo_cap => clientPkgNum_c_fifo_cap,
        clientPkgNum_empty_n => clientPkgNum_c_empty_n,
        clientPkgNum_read => client_512_U0_clientPkgNum_read,
        expectedRespInKB_dout => expectedRespInKB_c_dout,
        expectedRespInKB_num_data_valid => expectedRespInKB_c_num_data_valid,
        expectedRespInKB_fifo_cap => expectedRespInKB_c_fifo_cap,
        expectedRespInKB_empty_n => expectedRespInKB_c_empty_n,
        expectedRespInKB_read => client_512_U0_expectedRespInKB_read,
        regBasePort_dout => regBasePort_c41_dout,
        regBasePort_num_data_valid => regBasePort_c41_num_data_valid,
        regBasePort_fifo_cap => regBasePort_c41_fifo_cap,
        regBasePort_empty_n => regBasePort_c41_empty_n,
        regBasePort_read => client_512_U0_regBasePort_read,
        pkgWordCount_dout => pkgWordCount_c_dout,
        pkgWordCount_num_data_valid => pkgWordCount_c_num_data_valid,
        pkgWordCount_fifo_cap => pkgWordCount_c_fifo_cap,
        pkgWordCount_empty_n => pkgWordCount_c_empty_n,
        pkgWordCount_read => client_512_U0_pkgWordCount_read,
        useIpAddr_dout => useIpAddr_c_dout,
        useIpAddr_num_data_valid => useIpAddr_c_num_data_valid,
        useIpAddr_fifo_cap => useIpAddr_c_fifo_cap,
        useIpAddr_empty_n => useIpAddr_c_empty_n,
        useIpAddr_read => client_512_U0_useIpAddr_read,
        useConn_dout => useConn_c_dout,
        useConn_num_data_valid => useConn_c_num_data_valid,
        useConn_fifo_cap => useConn_c_fifo_cap,
        useConn_empty_n => useConn_c_empty_n,
        useConn_read => client_512_U0_useConn_read,
        runExperiment_dout => runExperiment_c40_dout,
        runExperiment_num_data_valid => runExperiment_c40_num_data_valid,
        runExperiment_fifo_cap => runExperiment_c40_fifo_cap,
        runExperiment_empty_n => runExperiment_c40_empty_n,
        runExperiment_read => client_512_U0_runExperiment_read,
        txStatusBuffer_dout => txStatusBuffer_dout,
        txStatusBuffer_num_data_valid => txStatusBuffer_num_data_valid,
        txStatusBuffer_fifo_cap => txStatusBuffer_fifo_cap,
        txStatusBuffer_empty_n => txStatusBuffer_empty_n,
        txStatusBuffer_read => client_512_U0_txStatusBuffer_read,
        openConStatusBuffer_dout => openConStatusBuffer_dout,
        openConStatusBuffer_num_data_valid => openConStatusBuffer_num_data_valid,
        openConStatusBuffer_fifo_cap => openConStatusBuffer_fifo_cap,
        openConStatusBuffer_empty_n => openConStatusBuffer_empty_n,
        openConStatusBuffer_read => client_512_U0_openConStatusBuffer_read,
        txMetaDataBuffer_din => client_512_U0_txMetaDataBuffer_din,
        txMetaDataBuffer_num_data_valid => txMetaDataBuffer_num_data_valid,
        txMetaDataBuffer_fifo_cap => txMetaDataBuffer_fifo_cap,
        txMetaDataBuffer_full_n => txMetaDataBuffer_full_n,
        txMetaDataBuffer_write => client_512_U0_txMetaDataBuffer_write,
        txDataBuffer_din => client_512_U0_txDataBuffer_din,
        txDataBuffer_num_data_valid => txDataBuffer_num_data_valid,
        txDataBuffer_fifo_cap => txDataBuffer_fifo_cap,
        txDataBuffer_full_n => txDataBuffer_full_n,
        txDataBuffer_write => client_512_U0_txDataBuffer_write,
        m_axis_open_connection_TREADY => m_axis_open_connection_TREADY,
        closeConnectionBuffer_din => client_512_U0_closeConnectionBuffer_din,
        closeConnectionBuffer_num_data_valid => closeConnectionBuffer_num_data_valid,
        closeConnectionBuffer_fifo_cap => closeConnectionBuffer_fifo_cap,
        closeConnectionBuffer_full_n => closeConnectionBuffer_full_n,
        closeConnectionBuffer_write => client_512_U0_closeConnectionBuffer_write,
        m_axis_open_connection_TDATA => client_512_U0_m_axis_open_connection_TDATA,
        m_axis_open_connection_TVALID => client_512_U0_m_axis_open_connection_TVALID);

    txMetaData_handler_U0 : component scatter_txMetaData_handler
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => txMetaData_handler_U0_ap_start,
        ap_done => txMetaData_handler_U0_ap_done,
        ap_continue => txMetaData_handler_U0_ap_continue,
        ap_idle => txMetaData_handler_U0_ap_idle,
        ap_ready => txMetaData_handler_U0_ap_ready,
        txMetaDataBuffer_dout => txMetaDataBuffer_dout,
        txMetaDataBuffer_num_data_valid => txMetaDataBuffer_num_data_valid,
        txMetaDataBuffer_fifo_cap => txMetaDataBuffer_fifo_cap,
        txMetaDataBuffer_empty_n => txMetaDataBuffer_empty_n,
        txMetaDataBuffer_read => txMetaData_handler_U0_txMetaDataBuffer_read,
        m_axis_tx_metadata_TREADY => m_axis_tx_metadata_TREADY,
        m_axis_tx_metadata_TDATA => txMetaData_handler_U0_m_axis_tx_metadata_TDATA,
        m_axis_tx_metadata_TVALID => txMetaData_handler_U0_m_axis_tx_metadata_TVALID);

    closeConnection_handler_U0 : component scatter_closeConnection_handler
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => closeConnection_handler_U0_ap_start,
        ap_done => closeConnection_handler_U0_ap_done,
        ap_continue => closeConnection_handler_U0_ap_continue,
        ap_idle => closeConnection_handler_U0_ap_idle,
        ap_ready => closeConnection_handler_U0_ap_ready,
        closeConnectionBuffer_dout => closeConnectionBuffer_dout,
        closeConnectionBuffer_num_data_valid => closeConnectionBuffer_num_data_valid,
        closeConnectionBuffer_fifo_cap => closeConnectionBuffer_fifo_cap,
        closeConnectionBuffer_empty_n => closeConnectionBuffer_empty_n,
        closeConnectionBuffer_read => closeConnection_handler_U0_closeConnectionBuffer_read,
        m_axis_close_connection_TREADY => m_axis_close_connection_TREADY,
        m_axis_close_connection_TDATA => closeConnection_handler_U0_m_axis_close_connection_TDATA,
        m_axis_close_connection_TVALID => closeConnection_handler_U0_m_axis_close_connection_TVALID);

    server_512_U0 : component scatter_server_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => server_512_U0_ap_start,
        ap_done => server_512_U0_ap_done,
        ap_continue => server_512_U0_ap_continue,
        ap_idle => server_512_U0_ap_idle,
        ap_ready => server_512_U0_ap_ready,
        usePort_dout => usePort_c_dout,
        usePort_num_data_valid => usePort_c_num_data_valid,
        usePort_fifo_cap => usePort_c_fifo_cap,
        usePort_empty_n => usePort_c_empty_n,
        usePort_read => server_512_U0_usePort_read,
        regBasePort_dout => regBasePort_c_dout,
        regBasePort_num_data_valid => regBasePort_c_num_data_valid,
        regBasePort_fifo_cap => regBasePort_c_fifo_cap,
        regBasePort_empty_n => regBasePort_c_empty_n,
        regBasePort_read => server_512_U0_regBasePort_read,
        runExperiment_dout => runExperiment_c_dout,
        runExperiment_num_data_valid => runExperiment_c_num_data_valid,
        runExperiment_fifo_cap => runExperiment_c_fifo_cap,
        runExperiment_empty_n => runExperiment_c_empty_n,
        runExperiment_read => server_512_U0_runExperiment_read,
        s_axis_listen_port_status_TVALID => s_axis_listen_port_status_TVALID,
        s_axis_notifications_TVALID => s_axis_notifications_TVALID,
        s_axis_rx_metadata_TVALID => s_axis_rx_metadata_TVALID,
        rxDataBuffer_dout => rxDataBuffer_dout,
        rxDataBuffer_num_data_valid => rxDataBuffer_num_data_valid,
        rxDataBuffer_fifo_cap => rxDataBuffer_fifo_cap,
        rxDataBuffer_empty_n => rxDataBuffer_empty_n,
        rxDataBuffer_read => server_512_U0_rxDataBuffer_read,
        m_axis_listen_port_TREADY => m_axis_listen_port_TREADY,
        m_axis_read_package_TREADY => m_axis_read_package_TREADY,
        m_axis_listen_port_TDATA => server_512_U0_m_axis_listen_port_TDATA,
        m_axis_listen_port_TVALID => server_512_U0_m_axis_listen_port_TVALID,
        s_axis_listen_port_status_TDATA => s_axis_listen_port_status_TDATA,
        s_axis_listen_port_status_TREADY => server_512_U0_s_axis_listen_port_status_TREADY,
        s_axis_notifications_TDATA => s_axis_notifications_TDATA,
        s_axis_notifications_TREADY => server_512_U0_s_axis_notifications_TREADY,
        m_axis_read_package_TDATA => server_512_U0_m_axis_read_package_TDATA,
        m_axis_read_package_TVALID => server_512_U0_m_axis_read_package_TVALID,
        s_axis_rx_metadata_TDATA => s_axis_rx_metadata_TDATA,
        s_axis_rx_metadata_TREADY => server_512_U0_s_axis_rx_metadata_TREADY);

    runExperiment_c_U : component scatter_fifo_w1_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_runExperiment_c_din,
        if_full_n => runExperiment_c_full_n,
        if_write => entry_proc_U0_runExperiment_c_write,
        if_dout => runExperiment_c_dout,
        if_num_data_valid => runExperiment_c_num_data_valid,
        if_fifo_cap => runExperiment_c_fifo_cap,
        if_empty_n => runExperiment_c_empty_n,
        if_read => server_512_U0_runExperiment_read);

    runExperiment_c40_U : component scatter_fifo_w1_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_runExperiment_c40_din,
        if_full_n => runExperiment_c40_full_n,
        if_write => entry_proc_U0_runExperiment_c40_write,
        if_dout => runExperiment_c40_dout,
        if_num_data_valid => runExperiment_c40_num_data_valid,
        if_fifo_cap => runExperiment_c40_fifo_cap,
        if_empty_n => runExperiment_c40_empty_n,
        if_read => client_512_U0_runExperiment_read);

    useConn_c_U : component scatter_fifo_w16_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_useConn_c_din,
        if_full_n => useConn_c_full_n,
        if_write => entry_proc_U0_useConn_c_write,
        if_dout => useConn_c_dout,
        if_num_data_valid => useConn_c_num_data_valid,
        if_fifo_cap => useConn_c_fifo_cap,
        if_empty_n => useConn_c_empty_n,
        if_read => client_512_U0_useConn_read);

    useIpAddr_c_U : component scatter_fifo_w16_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_useIpAddr_c_din,
        if_full_n => useIpAddr_c_full_n,
        if_write => entry_proc_U0_useIpAddr_c_write,
        if_dout => useIpAddr_c_dout,
        if_num_data_valid => useIpAddr_c_num_data_valid,
        if_fifo_cap => useIpAddr_c_fifo_cap,
        if_empty_n => useIpAddr_c_empty_n,
        if_read => client_512_U0_useIpAddr_read);

    pkgWordCount_c_U : component scatter_fifo_w16_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_pkgWordCount_c_din,
        if_full_n => pkgWordCount_c_full_n,
        if_write => entry_proc_U0_pkgWordCount_c_write,
        if_dout => pkgWordCount_c_dout,
        if_num_data_valid => pkgWordCount_c_num_data_valid,
        if_fifo_cap => pkgWordCount_c_fifo_cap,
        if_empty_n => pkgWordCount_c_empty_n,
        if_read => client_512_U0_pkgWordCount_read);

    regBasePort_c_U : component scatter_fifo_w16_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_regBasePort_c_din,
        if_full_n => regBasePort_c_full_n,
        if_write => entry_proc_U0_regBasePort_c_write,
        if_dout => regBasePort_c_dout,
        if_num_data_valid => regBasePort_c_num_data_valid,
        if_fifo_cap => regBasePort_c_fifo_cap,
        if_empty_n => regBasePort_c_empty_n,
        if_read => server_512_U0_regBasePort_read);

    regBasePort_c41_U : component scatter_fifo_w16_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_regBasePort_c41_din,
        if_full_n => regBasePort_c41_full_n,
        if_write => entry_proc_U0_regBasePort_c41_write,
        if_dout => regBasePort_c41_dout,
        if_num_data_valid => regBasePort_c41_num_data_valid,
        if_fifo_cap => regBasePort_c41_fifo_cap,
        if_empty_n => regBasePort_c41_empty_n,
        if_read => client_512_U0_regBasePort_read);

    usePort_c_U : component scatter_fifo_w16_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_usePort_c_din,
        if_full_n => usePort_c_full_n,
        if_write => entry_proc_U0_usePort_c_write,
        if_dout => usePort_c_dout,
        if_num_data_valid => usePort_c_num_data_valid,
        if_fifo_cap => usePort_c_fifo_cap,
        if_empty_n => usePort_c_empty_n,
        if_read => server_512_U0_usePort_read);

    expectedRespInKB_c_U : component scatter_fifo_w16_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_expectedRespInKB_c_din,
        if_full_n => expectedRespInKB_c_full_n,
        if_write => entry_proc_U0_expectedRespInKB_c_write,
        if_dout => expectedRespInKB_c_dout,
        if_num_data_valid => expectedRespInKB_c_num_data_valid,
        if_fifo_cap => expectedRespInKB_c_fifo_cap,
        if_empty_n => expectedRespInKB_c_empty_n,
        if_read => client_512_U0_expectedRespInKB_read);

    clientPkgNum_c_U : component scatter_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_clientPkgNum_c_din,
        if_full_n => clientPkgNum_c_full_n,
        if_write => entry_proc_U0_clientPkgNum_c_write,
        if_dout => clientPkgNum_c_dout,
        if_num_data_valid => clientPkgNum_c_num_data_valid,
        if_fifo_cap => clientPkgNum_c_fifo_cap,
        if_empty_n => clientPkgNum_c_empty_n,
        if_read => client_512_U0_clientPkgNum_read);

    regIpAddress0_c_U : component scatter_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_regIpAddress0_c_din,
        if_full_n => regIpAddress0_c_full_n,
        if_write => entry_proc_U0_regIpAddress0_c_write,
        if_dout => regIpAddress0_c_dout,
        if_num_data_valid => regIpAddress0_c_num_data_valid,
        if_fifo_cap => regIpAddress0_c_fifo_cap,
        if_empty_n => regIpAddress0_c_empty_n,
        if_read => client_512_U0_regIpAddress0_read);

    regIpAddress1_c_U : component scatter_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_regIpAddress1_c_din,
        if_full_n => regIpAddress1_c_full_n,
        if_write => entry_proc_U0_regIpAddress1_c_write,
        if_dout => regIpAddress1_c_dout,
        if_num_data_valid => regIpAddress1_c_num_data_valid,
        if_fifo_cap => regIpAddress1_c_fifo_cap,
        if_empty_n => regIpAddress1_c_empty_n,
        if_read => client_512_U0_regIpAddress1_read);

    regIpAddress2_c_U : component scatter_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_regIpAddress2_c_din,
        if_full_n => regIpAddress2_c_full_n,
        if_write => entry_proc_U0_regIpAddress2_c_write,
        if_dout => regIpAddress2_c_dout,
        if_num_data_valid => regIpAddress2_c_num_data_valid,
        if_fifo_cap => regIpAddress2_c_fifo_cap,
        if_empty_n => regIpAddress2_c_empty_n,
        if_read => client_512_U0_regIpAddress2_read);

    regIpAddress3_c_U : component scatter_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_regIpAddress3_c_din,
        if_full_n => regIpAddress3_c_full_n,
        if_write => entry_proc_U0_regIpAddress3_c_write,
        if_dout => regIpAddress3_c_dout,
        if_num_data_valid => regIpAddress3_c_num_data_valid,
        if_fifo_cap => regIpAddress3_c_fifo_cap,
        if_empty_n => regIpAddress3_c_empty_n,
        if_read => client_512_U0_regIpAddress3_read);

    regIpAddress4_c_U : component scatter_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_regIpAddress4_c_din,
        if_full_n => regIpAddress4_c_full_n,
        if_write => entry_proc_U0_regIpAddress4_c_write,
        if_dout => regIpAddress4_c_dout,
        if_num_data_valid => regIpAddress4_c_num_data_valid,
        if_fifo_cap => regIpAddress4_c_fifo_cap,
        if_empty_n => regIpAddress4_c_empty_n,
        if_read => client_512_U0_regIpAddress4_read);

    regIpAddress5_c_U : component scatter_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_regIpAddress5_c_din,
        if_full_n => regIpAddress5_c_full_n,
        if_write => entry_proc_U0_regIpAddress5_c_write,
        if_dout => regIpAddress5_c_dout,
        if_num_data_valid => regIpAddress5_c_num_data_valid,
        if_fifo_cap => regIpAddress5_c_fifo_cap,
        if_empty_n => regIpAddress5_c_empty_n,
        if_read => client_512_U0_regIpAddress5_read);

    regIpAddress6_c_U : component scatter_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_regIpAddress6_c_din,
        if_full_n => regIpAddress6_c_full_n,
        if_write => entry_proc_U0_regIpAddress6_c_write,
        if_dout => regIpAddress6_c_dout,
        if_num_data_valid => regIpAddress6_c_num_data_valid,
        if_fifo_cap => regIpAddress6_c_fifo_cap,
        if_empty_n => regIpAddress6_c_empty_n,
        if_read => client_512_U0_regIpAddress6_read);

    regIpAddress7_c_U : component scatter_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_regIpAddress7_c_din,
        if_full_n => regIpAddress7_c_full_n,
        if_write => entry_proc_U0_regIpAddress7_c_write,
        if_dout => regIpAddress7_c_dout,
        if_num_data_valid => regIpAddress7_c_num_data_valid,
        if_fifo_cap => regIpAddress7_c_fifo_cap,
        if_empty_n => regIpAddress7_c_empty_n,
        if_read => client_512_U0_regIpAddress7_read);

    regIpAddress8_c_U : component scatter_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_regIpAddress8_c_din,
        if_full_n => regIpAddress8_c_full_n,
        if_write => entry_proc_U0_regIpAddress8_c_write,
        if_dout => regIpAddress8_c_dout,
        if_num_data_valid => regIpAddress8_c_num_data_valid,
        if_fifo_cap => regIpAddress8_c_fifo_cap,
        if_empty_n => regIpAddress8_c_empty_n,
        if_read => client_512_U0_regIpAddress8_read);

    regIpAddress9_c_U : component scatter_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_regIpAddress9_c_din,
        if_full_n => regIpAddress9_c_full_n,
        if_write => entry_proc_U0_regIpAddress9_c_write,
        if_dout => regIpAddress9_c_dout,
        if_num_data_valid => regIpAddress9_c_num_data_valid,
        if_fifo_cap => regIpAddress9_c_fifo_cap,
        if_empty_n => regIpAddress9_c_empty_n,
        if_read => client_512_U0_regIpAddress9_read);

    regIpAddress10_c_U : component scatter_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_regIpAddress10_c_din,
        if_full_n => regIpAddress10_c_full_n,
        if_write => entry_proc_U0_regIpAddress10_c_write,
        if_dout => regIpAddress10_c_dout,
        if_num_data_valid => regIpAddress10_c_num_data_valid,
        if_fifo_cap => regIpAddress10_c_fifo_cap,
        if_empty_n => regIpAddress10_c_empty_n,
        if_read => client_512_U0_regIpAddress10_read);

    openConStatusBuffer_U : component scatter_fifo_w96_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => openStatus_handler_U0_openConStatusBuffer_din,
        if_full_n => openConStatusBuffer_full_n,
        if_write => openStatus_handler_U0_openConStatusBuffer_write,
        if_dout => openConStatusBuffer_dout,
        if_num_data_valid => openConStatusBuffer_num_data_valid,
        if_fifo_cap => openConStatusBuffer_fifo_cap,
        if_empty_n => openConStatusBuffer_empty_n,
        if_read => client_512_U0_openConStatusBuffer_read);

    txStatusBuffer_U : component scatter_fifo_w96_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => txStatus_handler_U0_txStatusBuffer_din,
        if_full_n => txStatusBuffer_full_n,
        if_write => txStatus_handler_U0_txStatusBuffer_write,
        if_dout => txStatusBuffer_dout,
        if_num_data_valid => txStatusBuffer_num_data_valid,
        if_fifo_cap => txStatusBuffer_fifo_cap,
        if_empty_n => txStatusBuffer_empty_n,
        if_read => client_512_U0_txStatusBuffer_read);

    txDataBuffer_U : component scatter_fifo_w1024_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => client_512_U0_txDataBuffer_din,
        if_full_n => txDataBuffer_full_n,
        if_write => client_512_U0_txDataBuffer_write,
        if_dout => txDataBuffer_dout,
        if_num_data_valid => txDataBuffer_num_data_valid,
        if_fifo_cap => txDataBuffer_fifo_cap,
        if_empty_n => txDataBuffer_empty_n,
        if_read => txDataBuffer_handler_512_U0_txDataBuffer_read);

    rxDataBuffer_U : component scatter_fifo_w1024_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => rxDataBuffer_handler_512_U0_rxDataBuffer_din,
        if_full_n => rxDataBuffer_full_n,
        if_write => rxDataBuffer_handler_512_U0_rxDataBuffer_write,
        if_dout => rxDataBuffer_dout,
        if_num_data_valid => rxDataBuffer_num_data_valid,
        if_fifo_cap => rxDataBuffer_fifo_cap,
        if_empty_n => rxDataBuffer_empty_n,
        if_read => server_512_U0_rxDataBuffer_read);

    txMetaDataBuffer_U : component scatter_fifo_w32_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => client_512_U0_txMetaDataBuffer_din,
        if_full_n => txMetaDataBuffer_full_n,
        if_write => client_512_U0_txMetaDataBuffer_write,
        if_dout => txMetaDataBuffer_dout,
        if_num_data_valid => txMetaDataBuffer_num_data_valid,
        if_fifo_cap => txMetaDataBuffer_fifo_cap,
        if_empty_n => txMetaDataBuffer_empty_n,
        if_read => txMetaData_handler_U0_txMetaDataBuffer_read);

    closeConnectionBuffer_U : component scatter_fifo_w16_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => client_512_U0_closeConnectionBuffer_din,
        if_full_n => closeConnectionBuffer_full_n,
        if_write => client_512_U0_closeConnectionBuffer_write,
        if_dout => closeConnectionBuffer_dout,
        if_num_data_valid => closeConnectionBuffer_num_data_valid,
        if_fifo_cap => closeConnectionBuffer_fifo_cap,
        if_empty_n => closeConnectionBuffer_empty_n,
        if_read => closeConnection_handler_U0_closeConnectionBuffer_read);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    client_512_U0_ap_continue <= ap_const_logic_1;
    client_512_U0_ap_start <= ap_const_logic_1;
    closeConnection_handler_U0_ap_continue <= ap_const_logic_1;
    closeConnection_handler_U0_ap_start <= ap_const_logic_1;
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ap_const_logic_1;
    m_axis_close_connection_TDATA <= closeConnection_handler_U0_m_axis_close_connection_TDATA;
    m_axis_close_connection_TVALID <= closeConnection_handler_U0_m_axis_close_connection_TVALID;
    m_axis_listen_port_TDATA <= server_512_U0_m_axis_listen_port_TDATA;
    m_axis_listen_port_TVALID <= server_512_U0_m_axis_listen_port_TVALID;
    m_axis_open_connection_TDATA <= client_512_U0_m_axis_open_connection_TDATA;
    m_axis_open_connection_TVALID <= client_512_U0_m_axis_open_connection_TVALID;
    m_axis_read_package_TDATA <= server_512_U0_m_axis_read_package_TDATA;
    m_axis_read_package_TVALID <= server_512_U0_m_axis_read_package_TVALID;
    m_axis_tx_data_TDATA <= txDataBuffer_handler_512_U0_m_axis_tx_data_TDATA;
    m_axis_tx_data_TKEEP <= txDataBuffer_handler_512_U0_m_axis_tx_data_TKEEP;
    m_axis_tx_data_TLAST <= txDataBuffer_handler_512_U0_m_axis_tx_data_TLAST;
    m_axis_tx_data_TSTRB <= txDataBuffer_handler_512_U0_m_axis_tx_data_TSTRB;
    m_axis_tx_data_TVALID <= txDataBuffer_handler_512_U0_m_axis_tx_data_TVALID;
    m_axis_tx_metadata_TDATA <= txMetaData_handler_U0_m_axis_tx_metadata_TDATA;
    m_axis_tx_metadata_TVALID <= txMetaData_handler_U0_m_axis_tx_metadata_TVALID;
    openStatus_handler_U0_ap_continue <= ap_const_logic_1;
    openStatus_handler_U0_ap_start <= ap_const_logic_1;
    rxDataBuffer_handler_512_U0_ap_continue <= ap_const_logic_1;
    rxDataBuffer_handler_512_U0_ap_start <= ap_const_logic_1;
    s_axis_listen_port_status_TREADY <= server_512_U0_s_axis_listen_port_status_TREADY;
    s_axis_notifications_TREADY <= server_512_U0_s_axis_notifications_TREADY;
    s_axis_open_status_TREADY <= openStatus_handler_U0_s_axis_open_status_TREADY;
    s_axis_rx_data_TREADY <= rxDataBuffer_handler_512_U0_s_axis_rx_data_TREADY;
    s_axis_rx_metadata_TREADY <= server_512_U0_s_axis_rx_metadata_TREADY;
    s_axis_tx_status_TREADY <= txStatus_handler_U0_s_axis_tx_status_TREADY;
    server_512_U0_ap_continue <= ap_const_logic_1;
    server_512_U0_ap_start <= ap_const_logic_1;
    txDataBuffer_handler_512_U0_ap_continue <= ap_const_logic_1;
    txDataBuffer_handler_512_U0_ap_start <= ap_const_logic_1;
    txMetaData_handler_U0_ap_continue <= ap_const_logic_1;
    txMetaData_handler_U0_ap_start <= ap_const_logic_1;
    txStatus_handler_U0_ap_continue <= ap_const_logic_1;
    txStatus_handler_U0_ap_start <= ap_const_logic_1;
end behav;
